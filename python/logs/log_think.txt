Analysis object initialized
{'ðen': 2, 'ðenc': 1, 'ðench': 7, 'ðenke': 1, 'ðhenk': 2, 'ðhog': 5, 'ðing': 1, 'ðod': 1, 'ðog': 3, 'ðoh': 2, 'ðoƿg': 1, 'es': 1, 's': 2, 'thenke': 1, 'think': 1, 'thnk': 1, 'tho': 2, 'thogh': 7, 'thoh': 6, 'though': 1, 'thowth': 1, 'thynk': 1, 'toh': 2, 'þ': 1, 'þeink': 2, 'þen': 6, 'þenc': 7, 'þencke': 1, 'þeng': 7, 'þenge': 1, 'þench': 79, 'þenche': 18, 'þenk': 14, 'þenke': 5, 'yenke': 4, 'þeoh': 1, 'þinc': 2, 'yinge': 2, 'þinch': 2, 'þink': 2, 'þinke': 1, 'þoð': 1, 'þogh': 1, 'þoh': 51, 'yoh': 1, 'þohh': 1, 'þoch': 5, 'þou': 10, 'þouc': 4, 'þouh': 13, 'youh': 1, 'þouht': 1, 'þous': 2, 'þouth': 10, 'þouȝ': 35, 'þowth': 1, 'þoȝ': 28, 'þun': 1, 'þunch': 2, 'þynk': 1, 'zenke': 1}
Lexel initialized
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
[[{'lit': 'th', 'ln': 2, 'index': 0}]]
[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
MIN pattern length=5
Pattern CVVC is invalid
Pattern VVC is invalid
Pattern CVCCCV is valid
Pattern CCC is invalid
Pattern CVCCV is valid
Pattern C is invalid
Pattern CVCC is invalid
Pattern VCCV is invalid
Pattern VC is invalid
Pattern CCVC is invalid
Pattern CCCCV is invalid
Pattern CCVCCC is valid
Pattern CVVCC is valid
Pattern VVCCV is valid
Pattern CV is invalid
Pattern CCCCC is invalid
Pattern CVV is invalid
Pattern CCVVC is valid
Pattern VVVC is invalid
Pattern CVCV is invalid
Pattern CVCCC is valid
Pattern CCCC is invalid
Pattern CCVVCC is valid
Pattern CVC is invalid
Pattern CCV is invalid
Pattern CCCV is invalid
Pattern CCVCC is valid
Pattern CCVCCV is valid
Pattern VVCV is invalid
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					RESULT:  ['s']
				version split: ['s']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'th', 'e', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
th/e/n/k/e(CVCCV)
_/t/h/e/n/k/e(ACCVCCV)
_/th/e/n/k/e(ACVCCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				version split: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
th/i/n/k(CCCC)
th/i/n/k(CVCC)
_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'n', 'k']
				t/h/n/k(CCCC)
th/n/k(CCC)
_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'n', 'k']
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o']
				adding dashed alternative: ['_', 'th', 'o']
				t/h/o(CCV)
th/o(CV)
_/t/h/o(ACCV)
_/th/o(ACV)
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o']
				version split: ['_', 't', 'h', 'o']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
th/o/g/h(CVCC)
th/o/gh(CVC)
_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'gh']
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'h']
				t/h/o/h(CCVC)
th/o/h(CVC)
_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'h']
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: though
					resolving (12)
					> version: t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/ou/gh
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'ou', 'gh']
				t/h/o/u/g/h(CCVCCC)
t/h/o/u/g/h(CCVVCC)
t/h/o/u/gh(CCVCC)
t/h/o/u/gh(CCVVC)
th/o/u/g/h(CVCCC)
th/o/u/g/h(CVVCC)
t/h/ou/g/h(CCVCC)
th/o/u/gh(CVCC)
th/o/u/gh(CVVC)
t/h/ou/gh(CCVC)
th/ou/g/h(CVCC)
th/ou/gh(CVC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'g', 'h']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'gh']
				version split: ['th', 'ou', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'g', 'h']
				version split: ['th', 'ou', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', 'th', 'ow', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
th/o/w/t/h(CVCCC)
t/h/ow/t/h(CCVCC)
th/ow/t/h(CVCC)
_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> þ, ð, _, th, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
th/y/n/k(CCCC)
th/y/n/k(CVCC)
_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'o', 'h']
				t/o/h(CVC)
_/t/o/h(ACVC)
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['_', 't', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, s, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCCV : 1___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'e', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/_/h/e/n/k(CACVCC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'o', 'g']
				ð/h/o/g(CCVC)
ð/_/h/o/g(CACVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['o']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((o))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_']
				s(C)
s/_(CA)
				version split: ['s']
				{'string': 's', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s']
				version split: ['s', '_']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/t/h/e/n/k/e
					TRYING: t
					> version: _/th/e/n/k/e
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				_/t/h/e/n/k/e(ACCVCCV)
_/th/e/n/k/e(ACVCCV)
_/_/t/h/e/n/k/e(AACCVCCV)
_/_/th/e/n/k/e(AACVCCV)
				version split: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/th/i/n/k
					TRYING: th
					> version: _/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/t/h/n/k
					TRYING: t
					> version: _/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'n', 'k']
				_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'n', 'k']
				version split: ['_', 'th', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/t/h/o
					TRYING: t
					> version: _/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', 'th', 'o']
				_/t/h/o(ACCV)
_/th/o(ACV)
_/_/t/h/o(AACCV)
_/_/th/o(AACV)
				version split: ['_', 't', 'h', 'o']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o']
				version split: ['_', 'th', 'o']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o']
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/t/h/o/g/h
					TRYING: t
					> version: _/t/h/o/gh
					TRYING: t
					> version: _/th/o/g/h
					TRYING: th
					> version: _/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'gh']
				_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'gh']
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'g', 'h']
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/t/h/o/h
					TRYING: t
					> version: _/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'h']
				_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'h']
				version split: ['_', 'th', 'o', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/t/h/ou/g/h
					TRYING: t
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/t/h/ou/gh
					TRYING: t
					> version: _/th/ou/g/h
					TRYING: th
					> version: _/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'gh']
				_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'gh']
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'g', 'h']
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/t/h/o/w/t/h
					TRYING: t
					> version: _/th/o/w/t/h
					TRYING: th
					> version: _/t/h/ow/t/h
					TRYING: t
					> version: _/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ow', 't', 'h']
				_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/th/y/n/k
					TRYING: th
					> version: _/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'o', 'h']
				_/t/o/h(ACVC)
_/_/t/o/h(AACVC)
				version split: ['_', 't', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'o', 'h']
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> i, e, ei, _, o
					RESULT:  ['e']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((e))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					adding blocked set: V = V >> i, e, _, ye, o
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((eo)|(e))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((eo)|(e))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					> version: þ/ou/th
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, eo, o
					> version: þ/ow/th
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					> version: þ/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					> version: þ/u/n/c/h
					TRYING: u
					> version: þ/u/n/ch
					TRYING: u
					> version: þ/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCCV : 2___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: n
					> version: ð/e/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> n, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/h/e/n/k(CACVCC)
ð/_/_/h/e/n/k(CAACVCC)
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> n, h, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'o', 'g']
				ð/_/h/o/g(CACVC)
ð/_/_/h/o/g(CAACVC)
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: ð/i/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((ng)|(n))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((ng)|(n))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((ng)|(n))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((ng)|(n))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: d
					adding blocked set: C = C >> ng, n, d, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'd']
				ð/o/d(CVC)
ð/o/_/d(CVAC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o/d', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o/g', 'rgx': '((ð))/((o))/((g))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'h']
				ð/o/h(CVC)
ð/o/_/h(CVAC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o/h', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> n, g, _, ƿ, ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'ƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/o/_/ƿ/g(CVACC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o/ƿ', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 's']
				_/e/s(AVC)
_/e/_/s(AVAC)
				version split: ['_', 'e', 's']
				{'string': '_/e/s', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s/_
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_']
				s/_(CA)
s/_/_(CAA)
				version split: ['s', '_']
				{'string': 's/_', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_']
				version split: ['s', '_', '_']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/t/h/e/n/k/e(AACCVCCV)
_/_/th/e/n/k/e(AACVCCV)
_/_/_/t/h/e/n/k/e(AAACCVCCV)
_/_/_/th/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'n', 'k']
				_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', 'th', 'o']
				_/_/t/h/o(AACCV)
_/_/th/o(AACV)
_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o']
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o']
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'gh']
				_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'h']
				_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'gh']
				_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'o', 'h']
				_/_/t/o/h(AACVC)
_/_/_/t/o/h(AAACVC)
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: þ/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', 'e', '_', 'i', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/e/_/i/n/k(CVAACC)
þ/e/_/i/n/k(CVAACC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e/i', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e/i', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: n
					> version: þ/e/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((ng)|(n))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((ng)|(n))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: n
					> version: þ/e/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((ng)|(n))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((ng)|(n))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: n
					> version: þ/e/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: o
					> version: þ/eo/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'o', 'h']
				adding dashed alternative: ['þ', 'eo', '_', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/e/_/o/h(CVAVC)
þ/eo/_/h(CVAC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e/o', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo/h', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', 'e', '_', 'o', 'h']
				{'string': 'þ/e/_', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				version split: ['þ', 'eo', '_', 'h']
				{'string': 'þ/eo/_', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((n))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: ð
					adding blocked set: C = C >> n, ð, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ð']
				þ/o/ð(CVC)
þ/o/_/ð(CVAC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o/ð', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: g
					> version: þ/o/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o/g', 'rgx': '((þ))/((o))/((g))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o/gh', 'rgx': '((þ))/((o))/((g))$'}
				_____REMOVING________['þ', 'o', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h']
				þ/o/h(CVC)
þ/o/_/h(CVAC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', 'h']
				þ/o/h/h(CVCC)
þ/o/_/h/h(CVACC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					> version: þ/o/ch
					TRYING: ch
					adding blocked set: C = C >> n, g, _, ng, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/o/_/c/h(CVACC)
þ/o/_/ch(CVAC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o/c', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o/ch', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/u
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', 'u']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/o/_/u(CVAA)
þ/o/_/u(CVAA)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/u/c
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/c
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/o/_/u/c(CVAAC)
þ/o/_/u/c(CVAAC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/o/_/u/h(CVAAC)
þ/o/_/u/h(CVAAC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					> version: _/y/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þouht
					resolving (2)
					> version: þ/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/o/_/u/h/t(CVAACC)
þ/o/_/u/h/t(CVAACC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/u/s
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/s
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', 'u', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/o/_/u/s(CVAAC)
þ/o/_/u/s(CVAAC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/th
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/th
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'th']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/o/_/u/t/h(CVAACC)
þ/o/_/u/t/h(CVAACC)
þ/o/_/u/th(CVAAC)
þ/o/_/u/th(CVAAC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'th']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'th']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/o/_/u/ȝ(CVAAC)
þ/o/_/u/ȝ(CVAAC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					> version: þ/o/w/th
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'w', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/o/_/w/t/h(CVACCC)
þ/o/_/w/th(CVACC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o/w', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o/w', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'w', 'th']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ȝ']
				þ/o/ȝ(CVC)
þ/o/_/ȝ(CVAC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o/ȝ', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: n
					> version: þ/u/n
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: n
					> version: þ/u/n/c/h
					TRYING: n
					> version: þ/u/n/ch
					TRYING: n
					> version: þ/u/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((n))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((n))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, g, _, ng, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCCV : 3___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', '_']
				ð/e/n(CVC)
ð/e/n/_(CVCA)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((n))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', 'e', 'n', '_']
				{'string': 'ð/e/n/_', 'rgx': '((ð))/((e))/((n))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e/n/c', 'rgx': '((ð))/((e))/((n))/((c))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: c
					> version: ð/e/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e/n/c', 'rgx': '((ð))/((e))/((n))/((c)|(ch))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e/n/ch', 'rgx': '((ð))/((e))/((n))/((c)|(ch))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e/n/k', 'rgx': '((ð))/((e))/((n))/((k))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/h/e/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((h))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: ð/i/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: ð/i/ng
					> version: ð/i/ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'ng', '_']
				adding dashed alternative: ['ð', 'i', 'ng', '_']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/n/_/g(CACAC)
ð/i/n/_/g(CACAC)
ð/i/ng/_(CACA)
ð/i/ng/_(CACA)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'n', '_', 'g']
				{'string': 'ð/i/n/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', 'n', '_', 'g']
				{'string': 'ð/i/n/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', 'ng', '_']
				{'string': 'ð/i/ng/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', 'ng', '_']
				{'string': 'ð/i/ng/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/d
					TRYING: d
					adding blocked set: C = C >> h, _, c, d, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'd']
				ð/o/_/d(CVAC)
ð/o/_/_/d(CVAAC)
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_/d', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'd']
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', 'g', '_']
				ð/o/g(CVC)
ð/o/g/_(CVCA)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o/g', 'rgx': '((ð))/((o))/((g))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', 'o', 'g', '_']
				{'string': 'ð/o/g/_', 'rgx': '((ð))/((o))/((g))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_/h', 'rgx': '((ð))/((o))/((_))/((h))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'ƿ', 'g']
				ð/o/_/ƿ/g(CVACC)
ð/o/_/_/ƿ/g(CVAACC)
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', 's']
				_/e/_/s(AVAC)
_/e/_/_/s(AVAAC)
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_/s', 'rgx': '((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', 's']
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_', 'rgx': '((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_']
				s/_/_(CAA)
s/_/_/_(CAAA)
				version split: ['s', '_', '_']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_']
				version split: ['s', '_', '_', '_']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/_/t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/_/t/h/e/n/k/e(AAACCVCCV)
_/_/_/th/e/n/k/e(AAACVCCV)
_/_/_/_/t/h/e/n/k/e(AAAACCVCCV)
_/_/_/_/th/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o']
				_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> h, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> h, _, c, k, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/t/o/h(AAACVC)
_/_/_/_/t/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: þ/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				þ/e/_/i/n/k(CVAACC)
þ/e/_/i/n/k(CVAACC)
þ/e/_/_/i/n/k(CVAAACC)
þ/e/_/_/i/n/k(CVAAACC)
				version split: ['þ', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/i', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/i', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_']
				þ/e/n(CVC)
þ/e/n/_(CVCA)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((n))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', 'e', 'n', '_']
				{'string': 'þ/e/n/_', 'rgx': '((þ))/((e))/((n))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e/n/c', 'rgx': '((þ))/((e))/((n))/((c))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/e/ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', 'g']
				adding dashed alternative: ['þ', 'e', 'ng', '_']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/e/n/_/g(CVCAC)
þ/e/ng/_(CVCA)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e/n/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', 'e', 'n', '_', 'g']
				{'string': 'þ/e/n/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				version split: ['þ', 'e', 'ng', '_']
				{'string': 'þ/e/ng/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', 'g', 'e']
				adding dashed alternative: ['þ', 'e', 'ng', '_', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/e/n/_/g/e(CVCACV)
þ/e/ng/_/e(CVCAV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e/n/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e/ng/e', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', 'e', 'n', '_', 'g', 'e']
				{'string': 'þ/e/n/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				version split: ['þ', 'e', 'ng', '_', 'e']
				{'string': 'þ/e/ng/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: c
					> version: þ/e/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e/n/c', 'rgx': '((þ))/((e))/((n))/((c)|(ch))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e/n/ch', 'rgx': '((þ))/((e))/((n))/((c)|(ch))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e/n/k', 'rgx': '((þ))/((e))/((n))/((k))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e/n/k', 'rgx': '((þ))/((e))/((n))/((k))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/e/n/k/e
					TRYING: e
					> version: _/y/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/_/o/h
					TRYING: o
					> version: þ/eo/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', 'e', '_', 'o', 'h']
				{'string': 'þ/e/_/o', 'rgx': '((þ))/((eo)|(e))/((_))/((h))$'}
				_____REMOVING________['þ', 'e', '_', 'o', 'h']
				version split: ['þ', 'eo', '_', 'h']
				{'string': 'þ/eo/_/h', 'rgx': '((þ))/((eo)|(e))/((_))/((h))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: c
					> version: þ/i/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: c
					> version: þ/i/n/c/h
					TRYING: c
					> version: þ/i/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: þ/i/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n/ch', 'rgx': '((þ))/((i))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n/ch', 'rgx': '((þ))/((i))/((n))/((c)|(ch))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: k
					> version: þ/i/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: k
					> version: þ/i/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_/ð', 'rgx': '((þ))/((o))/((_))/((ð))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/o/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o/g/h', 'rgx': '((þ))/((o))/((g))/((h))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((h))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/o/h
					TRYING: o
					> version: _/y/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/h/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((h))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/c/h
					TRYING: c
					> version: þ/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_/c', 'rgx': '((þ))/((o))/((_))/((c)|(ch))$'}
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_/ch', 'rgx': '((þ))/((o))/((_))/((c)|(ch))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/_/u
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u']
				þ/o/_/u(CVAA)
þ/o/_/u(CVAA)
þ/o/_/_/u(CVAAA)
þ/o/_/_/u(CVAAA)
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u']
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u']
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'c']
				þ/o/_/u/c(CVAAC)
þ/o/_/u/c(CVAAC)
þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/u/c(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'c']
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h']
				þ/o/_/u/h(CVAAC)
þ/o/_/u/h(CVAAC)
þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/u/h(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h']
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/ou/h
					TRYING: ou
					> version: _/y/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þouht
					resolving (2)
					> version: þ/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h', 't']
				þ/o/_/u/h/t(CVAACC)
þ/o/_/u/h/t(CVAACC)
þ/o/_/_/u/h/t(CVAAACC)
þ/o/_/_/u/h/t(CVAAACC)
				version split: ['þ', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h', 't']
				version split: ['þ', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h', 't']
				version split: ['þ', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 's']
				þ/o/_/u/s(CVAAC)
þ/o/_/u/s(CVAAC)
þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/u/s(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 's']
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'th']
				þ/o/_/u/t/h(CVAACC)
þ/o/_/u/t/h(CVAACC)
þ/o/_/u/th(CVAAC)
þ/o/_/u/th(CVAAC)
þ/o/_/_/u/t/h(CVAAACC)
þ/o/_/_/u/t/h(CVAAACC)
þ/o/_/_/u/th(CVAAAC)
þ/o/_/_/u/th(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', 'u', 'th']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'th']
				version split: ['þ', 'o', '_', 'u', 'th']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'th']
				version split: ['þ', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'ȝ']
				þ/o/_/u/ȝ(CVAAC)
þ/o/_/u/ȝ(CVAAC)
þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/u/ȝ(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					> version: þ/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'w', 'th']
				þ/o/_/w/t/h(CVACCC)
þ/o/_/w/th(CVACC)
þ/o/_/_/w/t/h(CVAACCC)
þ/o/_/_/w/th(CVAACC)
				version split: ['þ', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/w', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', 'w', 'th']
				{'string': 'þ/o/_/w', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'w', 'th']
				version split: ['þ', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ȝ']
				þ/o/_/ȝ(CVAC)
þ/o/_/_/ȝ(CVAAC)
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					> version: þ/u/n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', 'n', '_']
				adding dashed alternative: ['þ', 'u', 'n', '_']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/u/n/_(CACA)
þ/u/n/_(CACA)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((n))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n', '_']
				{'string': 'þ/u/n/_', 'rgx': '((þ))/((u))/((n))/((_))$'}
				version split: ['þ', 'u', 'n', '_']
				{'string': 'þ/u/n/_', 'rgx': '((þ))/((u))/((n))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: c
					> version: þ/u/n/c/h
					TRYING: c
					> version: þ/u/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: þ/u/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c', 'rgx': '((þ))/((u))/((n))/((c)|(ch))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c', 'rgx': '((þ))/((u))/((n))/((c)|(ch))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n/ch', 'rgx': '((þ))/((u))/((n))/((c)|(ch))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n/ch', 'rgx': '((þ))/((u))/((n))/((c)|(ch))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: k
					> version: þ/y/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n/k', 'rgx': '((þ))/((y))/((n))/((k))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n/k', 'rgx': '((þ))/((y))/((n))/((k))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, ð, _, c, z, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCCV : 4___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', '_', '_']
				ð/e/n/_(CVCA)
ð/e/n/_/_(CVCAA)
				version split: ['ð', 'e', 'n', '_']
				{'string': 'ð/e/n/_', 'rgx': '((ð))/((e))/((n))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', '_']
				version split: ['ð', 'e', 'n', '_', '_']
				{'string': 'ð/e/n/_/_', 'rgx': '((ð))/((e))/((n))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', 'c', '_']
				ð/e/n/c(CVCC)
ð/e/n/c/_(CVCCA)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e/n/c', 'rgx': '((ð))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', 'e', 'n', 'c', '_']
				{'string': 'ð/e/n/c/_', 'rgx': '((ð))/((e))/((n))/((c))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: h
					> version: ð/e/n/ch
					RESULT:  ['h']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e/n/c/h', 'rgx': '((ð))/((e))/((n))/((c)|(ch))/((h))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e/n/ch', 'rgx': '((ð))/((e))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', 'k', '_', 'e']
				ð/e/n/k/e(CVCCV)
ð/e/n/k/_/e(CVCCAV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e/n/k/e', 'rgx': '((ð))/((e))/((n))/((k))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', 'e', 'n', 'k', '_', 'e']
				{'string': 'ð/e/n/k/_', 'rgx': '((ð))/((e))/((n))/((k))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/h/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', '_', 'e', 'n', 'k']
				ð/_/_/h/e/n/k(CAACVCC)
ð/_/_/h/_/e/n/k(CAACAVCC)
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/h/e', 'rgx': '((ð))/((_))/((_))/((h))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', 'h', '_', 'e', 'n', 'k']
				{'string': 'ð/_/_/h/_', 'rgx': '((ð))/((_))/((_))/((h))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/h/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', '_', 'o', 'g']
				ð/_/_/h/o/g(CAACVC)
ð/_/_/h/_/o/g(CAACAVC)
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/h/o', 'rgx': '((ð))/((_))/((_))/((h))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', 'h', '_', 'o', 'g']
				{'string': 'ð/_/_/h/_', 'rgx': '((ð))/((_))/((_))/((h))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/_/g
					TRYING: g
					adding blocked set: C = C >> g, k, _, h
					> version: ð/i/n/_/g
					TRYING: g
					adding blocked set: C = C >> g, k, _, h
					> version: ð/i/ng/_
					> version: ð/i/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', 'n', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'n', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'ng', '_', '_']
				adding dashed alternative: ['ð', 'i', 'ng', '_', '_']
				ð/i/n/_/g(CACAC)
ð/i/n/_/g(CACAC)
ð/i/ng/_(CACA)
ð/i/ng/_(CACA)
ð/i/n/_/_/g(CACAAC)
ð/i/n/_/_/g(CACAAC)
ð/i/ng/_/_(CACAA)
ð/i/ng/_/_(CACAA)
				version split: ['ð', 'i', 'n', '_', 'g']
				{'string': 'ð/i/n/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', 'g']
				version split: ['ð', 'i', 'n', '_', 'g']
				{'string': 'ð/i/n/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', 'g']
				version split: ['ð', 'i', 'ng', '_']
				{'string': 'ð/i/ng/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng', '_']
				version split: ['ð', 'i', 'ng', '_']
				{'string': 'ð/i/ng/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng', '_']
				version split: ['ð', 'i', 'n', '_', '_', 'g']
				{'string': 'ð/i/n/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				version split: ['ð', 'i', 'n', '_', '_', 'g']
				{'string': 'ð/i/n/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				version split: ['ð', 'i', 'ng', '_', '_']
				{'string': 'ð/i/ng/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				version split: ['ð', 'i', 'ng', '_', '_']
				{'string': 'ð/i/ng/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/_/d
					TRYING: d
					adding blocked set: C = C >> k, _, d, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'd']
				ð/o/_/_/d(CVAAC)
ð/o/_/_/_/d(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'd']
				version split: ['ð', 'o', '_', '_', '_', 'd']
				{'string': 'ð/o/_/_/_', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', 'g', '_', '_']
				ð/o/g/_(CVCA)
ð/o/g/_/_(CVCAA)
				version split: ['ð', 'o', 'g', '_']
				{'string': 'ð/o/g/_', 'rgx': '((ð))/((o))/((g))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', 'g', '_']
				version split: ['ð', 'o', 'g', '_', '_']
				{'string': 'ð/o/g/_/_', 'rgx': '((ð))/((o))/((g))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'h', '_']
				ð/o/_/h(CVAC)
ð/o/_/h/_(CVACA)
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_/h', 'rgx': '((ð))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'h']
				version split: ['ð', 'o', '_', 'h', '_']
				{'string': 'ð/o/_/h/_', 'rgx': '((ð))/((o))/((_))/((h))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				ð/o/_/_/ƿ/g(CVAACC)
ð/o/_/_/_/ƿ/g(CVAAACC)
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/_', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/_/_/s
					TRYING: s
					adding blocked set: C = C >> k, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', '_', 's']
				_/e/_/_/s(AVAAC)
_/e/_/_/_/s(AVAAAC)
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', 's']
				version split: ['_', 'e', '_', '_', '_', 's']
				{'string': '_/e/_/_/_', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', '_']
				s/_/_/_(CAAA)
s/_/_/_/_(CAAAA)
				version split: ['s', '_', '_', '_']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_']
				{'string': 's/_/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/_/_/t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/_/_/t/h/e/n/k/e(AAAACCVCCV)
_/_/_/_/th/e/n/k/e(AAAACVCCV)
_/_/_/_/_/t/h/e/n/k/e(AAAAACCVCCV)
_/_/_/_/_/th/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
_/_/_/_/_/t/h/n/k(AAAAACCCC)
_/_/_/_/_/th/n/k(AAAAACCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o']
				_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
_/_/_/_/_/t/h/o(AAAAACCV)
_/_/_/_/_/th/o(AAAAACV)
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
_/_/_/_/_/t/h/o/g/h(AAAAACCVCC)
_/_/_/_/_/t/h/o/gh(AAAAACCVC)
_/_/_/_/_/th/o/g/h(AAAAACVCC)
_/_/_/_/_/th/o/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
_/_/_/_/_/t/h/o/h(AAAAACCVC)
_/_/_/_/_/th/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/t/h/ou/g/h(AAAAACCVCC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/t/h/ou/gh(AAAAACCVC)
_/_/_/_/_/th/ou/g/h(AAAAACVCC)
_/_/_/_/_/th/ou/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
_/_/_/_/_/t/h/o/w/t/h(AAAAACCVCCC)
_/_/_/_/_/th/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/t/h/ow/t/h(AAAAACCVCC)
_/_/_/_/_/th/ow/t/h(AAAAACVCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/t/o/h(AAAACVC)
_/_/_/_/_/t/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/e/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: þ/e/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				þ/e/_/_/i/n/k(CVAAACC)
þ/e/_/_/i/n/k(CVAAACC)
þ/e/_/_/_/i/n/k(CVAAAACC)
þ/e/_/_/_/i/n/k(CVAAAACC)
				version split: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/i', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/i', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/_', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/_', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', '_']
				þ/e/n/_(CVCA)
þ/e/n/_/_(CVCAA)
				version split: ['þ', 'e', 'n', '_']
				{'string': 'þ/e/n/_', 'rgx': '((þ))/((e))/((n))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_']
				version split: ['þ', 'e', 'n', '_', '_']
				{'string': 'þ/e/n/_/_', 'rgx': '((þ))/((e))/((n))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'c', '_']
				þ/e/n/c(CVCC)
þ/e/n/c/_(CVCCA)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e/n/c', 'rgx': '((þ))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', 'e', 'n', 'c', '_']
				{'string': 'þ/e/n/c/_', 'rgx': '((þ))/((e))/((n))/((c))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/_/g
					TRYING: g
					adding blocked set: C = C >> g, k, _, h
					> version: þ/e/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', '_', 'g']
				adding dashed alternative: ['þ', 'e', 'ng', '_', '_']
				þ/e/n/_/g(CVCAC)
þ/e/ng/_(CVCA)
þ/e/n/_/_/g(CVCAAC)
þ/e/ng/_/_(CVCAA)
				version split: ['þ', 'e', 'n', '_', 'g']
				{'string': 'þ/e/n/_/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_', 'g']
				version split: ['þ', 'e', 'ng', '_']
				{'string': 'þ/e/ng/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', '_']
				version split: ['þ', 'e', 'n', '_', '_', 'g']
				{'string': 'þ/e/n/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				version split: ['þ', 'e', 'ng', '_', '_']
				{'string': 'þ/e/ng/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/_/g/e
					TRYING: g
					adding blocked set: C = C >> g, k, _, h
					> version: þ/e/ng/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', '_', 'g', 'e']
				adding dashed alternative: ['þ', 'e', 'ng', '_', '_', 'e']
				þ/e/n/_/g/e(CVCACV)
þ/e/ng/_/e(CVCAV)
þ/e/n/_/_/g/e(CVCAACV)
þ/e/ng/_/_/e(CVCAAV)
				version split: ['þ', 'e', 'n', '_', 'g', 'e']
				{'string': 'þ/e/n/_/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_', 'g', 'e']
				version split: ['þ', 'e', 'ng', '_', 'e']
				{'string': 'þ/e/ng/_/e', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', '_', 'e']
				version split: ['þ', 'e', 'n', '_', '_', 'g', 'e']
				{'string': 'þ/e/n/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				version split: ['þ', 'e', 'ng', '_', '_', 'e']
				{'string': 'þ/e/ng/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: h
					> version: þ/e/n/ch
					RESULT:  ['h']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e/n/c/h', 'rgx': '((þ))/((e))/((n))/((c)|(ch))/((h))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e/n/ch', 'rgx': '((þ))/((e))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'k', '_']
				þ/e/n/k(CVCC)
þ/e/n/k/_(CVCCA)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e/n/k', 'rgx': '((þ))/((e))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', 'e', 'n', 'k', '_']
				{'string': 'þ/e/n/k/_', 'rgx': '((þ))/((e))/((n))/((k))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'k', '_', 'e']
				þ/e/n/k/e(CVCCV)
þ/e/n/k/_/e(CVCCAV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e/n/k/e', 'rgx': '((þ))/((e))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', 'e', 'n', 'k', '_', 'e']
				{'string': 'þ/e/n/k/_', 'rgx': '((þ))/((e))/((n))/((k))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/eo/_/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'eo', '_', 'h', '_']
				þ/eo/_/h(CVAC)
þ/eo/_/h/_(CVACA)
				version split: ['þ', 'eo', '_', 'h']
				{'string': 'þ/eo/_/h', 'rgx': '((þ))/((eo)|(e))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', 'eo', '_', 'h']
				version split: ['þ', 'eo', '_', 'h', '_']
				{'string': 'þ/eo/_/h/_', 'rgx': '((þ))/((eo)|(e))/((_))/((h))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					> version: þ/i/n/c
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', '_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', '_']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/n/c/_(CACCA)
þ/i/n/c/_(CACCA)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n/c', 'rgx': '((þ))/((i))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c', '_']
				{'string': 'þ/i/n/c/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))$'}
				version split: ['þ', 'i', 'n', 'c', '_']
				{'string': 'þ/i/n/c/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: h
					> version: þ/i/n/c/h
					TRYING: h
					> version: þ/i/n/ch
					> version: þ/i/n/ch
					RESULT:  ['h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c/h', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c/h', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n/ch', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n/ch', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					> version: þ/i/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/n/k/_(CACCA)
þ/i/n/k/_(CACCA)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n/k', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k', '_']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				version split: ['þ', 'i', 'n', 'k', '_']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: e
					> version: þ/i/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_', 'e']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/n/k/_/e(CACCAV)
þ/i/n/k/_/e(CACCAV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n/k/e', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n/k/e', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', '_', 'e']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				version split: ['þ', 'i', 'n', 'k', '_', 'e']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ð', '_']
				þ/o/_/ð(CVAC)
þ/o/_/ð/_(CVACA)
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_/ð', 'rgx': '((þ))/((o))/((_))/((ð))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ð']
				version split: ['þ', 'o', '_', 'ð', '_']
				{'string': 'þ/o/_/ð/_', 'rgx': '((þ))/((o))/((_))/((ð))/((_))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/o/g/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'g', 'h', '_']
				þ/o/g/h(CVCC)
þ/o/g/h/_(CVCCA)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o/g/h', 'rgx': '((þ))/((o))/((g))/((h))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'g', 'h', '_']
				{'string': 'þ/o/g/h/_', 'rgx': '((þ))/((o))/((g))/((h))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', '_']
				þ/o/_/h(CVAC)
þ/o/_/h/_(CVACA)
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h']
				version split: ['þ', 'o', '_', 'h', '_']
				{'string': 'þ/o/_/h/_', 'rgx': '((þ))/((o))/((_))/((h))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/_/o/h
					TRYING: o
					> version: _/y/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/h/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_/h/h', 'rgx': '((þ))/((o))/((_))/((h))/((h))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/c/h
					TRYING: h
					> version: þ/o/_/ch
					RESULT:  ['h']
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_/c/h', 'rgx': '((þ))/((o))/((_))/((c)|(ch))/((h))$'}
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_/ch', 'rgx': '((þ))/((o))/((_))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'o', '_', 'ch']
				ANALYSING: þou
					resolving (2)
					> version: þ/o/_/_/u
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u']
				þ/o/_/_/u(CVAAA)
þ/o/_/_/u(CVAAA)
þ/o/_/_/_/u(CVAAAA)
þ/o/_/_/_/u(CVAAAA)
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u']
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u']
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'c']
				þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/_/u/c(CVAAAAC)
þ/o/_/_/_/u/c(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/_/_/u/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h']
				þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/_/u/h(CVAAAAC)
þ/o/_/_/_/u/h(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/ou/h
					TRYING: ou
					> version: _/y/_/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/ou/h(AAAAAVC)
_/y/_/_/_/ou/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þouht
					resolving (2)
					> version: þ/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				þ/o/_/_/u/h/t(CVAAACC)
þ/o/_/_/u/h/t(CVAAACC)
þ/o/_/_/_/u/h/t(CVAAAACC)
þ/o/_/_/_/u/h/t(CVAAAACC)
				version split: ['þ', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h', 't']
				version split: ['þ', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h', 't']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/_/_/u/s
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/s
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 's']
				þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/_/u/s(CVAAAAC)
þ/o/_/_/_/u/s(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'th']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'th']
				þ/o/_/_/u/t/h(CVAAACC)
þ/o/_/_/u/t/h(CVAAACC)
þ/o/_/_/u/th(CVAAAC)
þ/o/_/_/u/th(CVAAAC)
þ/o/_/_/_/u/t/h(CVAAAACC)
þ/o/_/_/_/u/t/h(CVAAAACC)
þ/o/_/_/_/u/th(CVAAAAC)
þ/o/_/_/_/u/th(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'th']
				version split: ['þ', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'th']
				version split: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/_/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/o/_/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/_/u/ȝ(CVAAAAC)
þ/o/_/_/_/u/ȝ(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> w, k, _, h
					> version: þ/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> w, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'w', 'th']
				þ/o/_/_/w/t/h(CVAACCC)
þ/o/_/_/w/th(CVAACC)
þ/o/_/_/_/w/t/h(CVAAACCC)
þ/o/_/_/_/w/th(CVAAACC)
				version split: ['þ', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'w', 'th']
				version split: ['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ȝ']
				þ/o/_/_/ȝ(CVAAC)
þ/o/_/_/_/ȝ(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/_', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n/_
					> version: þ/u/n/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', 'n', '_', '_']
				adding dashed alternative: ['þ', 'u', 'n', '_', '_']
				þ/u/n/_(CACA)
þ/u/n/_(CACA)
þ/u/n/_/_(CACAA)
þ/u/n/_/_(CACAA)
				version split: ['þ', 'u', 'n', '_']
				{'string': 'þ/u/n/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', '_']
				version split: ['þ', 'u', 'n', '_']
				{'string': 'þ/u/n/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', '_']
				version split: ['þ', 'u', 'n', '_', '_']
				{'string': 'þ/u/n/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))$'}
				version split: ['þ', 'u', 'n', '_', '_']
				{'string': 'þ/u/n/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: h
					> version: þ/u/n/c/h
					TRYING: h
					> version: þ/u/n/ch
					> version: þ/u/n/ch
					RESULT:  ['h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c/h', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c/h', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n/ch', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n/ch', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					> version: þ/y/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', 'n', 'k', '_']
				adding dashed alternative: ['þ', 'y', 'n', 'k', '_']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/n/k/_(CACCA)
þ/y/n/k/_(CACCA)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n/k', 'rgx': '((þ))/((y))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n/k', 'rgx': '((þ))/((y))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k', '_']
				{'string': 'þ/y/n/k/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))$'}
				version split: ['þ', 'y', 'n', 'k', '_']
				{'string': 'þ/y/n/k/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> k, _, z, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVCCCV : 5___
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', '_', '_', '_']
				ð/e/n/_/_(CVCAA)
ð/e/n/_/_/_(CVCAAA)
				version split: ['ð', 'e', 'n', '_', '_']
				{'string': 'ð/e/n/_/_', 'rgx': '((ð))/((e))/((n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', '_', '_']
				version split: ['ð', 'e', 'n', '_', '_', '_']
				{'string': 'ð/e/n/_/_/_', 'rgx': '((ð))/((e))/((n))/((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', 'c', '_', '_']
				ð/e/n/c/_(CVCCA)
ð/e/n/c/_/_(CVCCAA)
				version split: ['ð', 'e', 'n', 'c', '_']
				{'string': 'ð/e/n/c/_', 'rgx': '((ð))/((e))/((n))/((c))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', '_']
				version split: ['ð', 'e', 'n', 'c', '_', '_']
				{'string': 'ð/e/n/c/_/_', 'rgx': '((ð))/((e))/((n))/((c))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (1)
					> version: ð/e/n/c/h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', 'n', 'c', 'h', '_']
				ð/e/n/c/h(CVCCC)
ð/e/n/c/h/_(CVCCCA)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e/n/c/h', 'rgx': '((ð))/((e))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'c', 'h', '_']
				{'string': 'ð/e/n/c/h/_', 'rgx': '((ð))/((e))/((n))/((c)|(ch))/((h))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'k', '_', 'e']
				{'string': 'ð/e/n/k/_/e', 'rgx': '((ð))/((e))/((n))/((k))/((_))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/h/_/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', '_', 'h', '_', 'e', 'n', 'k']
				{'string': 'ð/_/_/h/_/e/n', 'rgx': '((ð))/((_))/((_))/((h))/((_))/((e))$'}
				_____REMOVING________['ð', '_', '_', 'h', '_', 'e', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/h/_/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', '_', 'h', '_', 'o', 'g']
				{'string': 'ð/_/_/h/_/o/g', 'rgx': '((ð))/((_))/((_))/((h))/((_))/((o))$'}
				_____REMOVING________['ð', '_', '_', 'h', '_', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/_/_/g
					TRYING: g
					> version: ð/i/n/_/_/g
					TRYING: g
					> version: ð/i/ng/_/_
					> version: ð/i/ng/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', 'n', '_', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'n', '_', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', 'ng', '_', '_', '_']
				adding dashed alternative: ['ð', 'i', 'ng', '_', '_', '_']
				ð/i/n/_/_/g(CACAAC)
ð/i/n/_/_/g(CACAAC)
ð/i/ng/_/_(CACAA)
ð/i/ng/_/_(CACAA)
ð/i/n/_/_/_/g(CACAAAC)
ð/i/n/_/_/_/g(CACAAAC)
ð/i/ng/_/_/_(CACAAA)
ð/i/ng/_/_/_(CACAAA)
				version split: ['ð', 'i', 'n', '_', '_', 'g']
				{'string': 'ð/i/n/_/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', '_', 'g']
				version split: ['ð', 'i', 'n', '_', '_', 'g']
				{'string': 'ð/i/n/_/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', '_', 'g']
				version split: ['ð', 'i', 'ng', '_', '_']
				{'string': 'ð/i/ng/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng', '_', '_']
				version split: ['ð', 'i', 'ng', '_', '_']
				{'string': 'ð/i/ng/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng', '_', '_']
				version split: ['ð', 'i', 'n', '_', '_', '_', 'g']
				{'string': 'ð/i/n/_/_/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', '_', '_', 'g']
				version split: ['ð', 'i', 'n', '_', '_', '_', 'g']
				{'string': 'ð/i/n/_/_/_/g', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', '_', '_', '_', 'g']
				version split: ['ð', 'i', 'ng', '_', '_', '_']
				{'string': 'ð/i/ng/_/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				version split: ['ð', 'i', 'ng', '_', '_', '_']
				{'string': 'ð/i/ng/_/_/_', 'rgx': '((ð))/((i))/((ng)|(n))/((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/_/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', '_', 'd']
				ð/o/_/_/_/d(CVAAAC)
ð/o/_/_/_/_/d(CVAAAAC)
				version split: ['ð', 'o', '_', '_', '_', 'd']
				{'string': 'ð/o/_/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'd']
				version split: ['ð', 'o', '_', '_', '_', '_', 'd']
				{'string': 'ð/o/_/_/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', 'g', '_', '_', '_']
				ð/o/g/_/_(CVCAA)
ð/o/g/_/_/_(CVCAAA)
				version split: ['ð', 'o', 'g', '_', '_']
				{'string': 'ð/o/g/_/_', 'rgx': '((ð))/((o))/((g))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', 'g', '_', '_']
				version split: ['ð', 'o', 'g', '_', '_', '_']
				{'string': 'ð/o/g/_/_/_', 'rgx': '((ð))/((o))/((g))/((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'h', '_', '_']
				ð/o/_/h/_(CVACA)
ð/o/_/h/_/_(CVACAA)
				version split: ['ð', 'o', '_', 'h', '_']
				{'string': 'ð/o/_/h/_', 'rgx': '((ð))/((o))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'h', '_']
				version split: ['ð', 'o', '_', 'h', '_', '_']
				{'string': 'ð/o/_/h/_/_', 'rgx': '((ð))/((o))/((_))/((h))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/_/_/ƿ/g
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', '_', 'ƿ', 'g']
				ð/o/_/_/_/ƿ/g(CVAAACC)
ð/o/_/_/_/_/ƿ/g(CVAAAACC)
				version split: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/_/ƿ/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/_/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', '_', 'ƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/_/_/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', '_', '_', 's']
				_/e/_/_/_/s(AVAAAC)
_/e/_/_/_/_/s(AVAAAAC)
				version split: ['_', 'e', '_', '_', '_', 's']
				{'string': '_/e/_/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', '_', 's']
				version split: ['_', 'e', '_', '_', '_', '_', 's']
				{'string': '_/e/_/_/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: s/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', '_', '_']
				s/_/_/_/_(CAAAA)
s/_/_/_/_/_(CAAAAA)
				version split: ['s', '_', '_', '_', '_']
				{'string': 's/_/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_', '_']
				{'string': 's/_/_/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/_/_/_/t/h/e/n/k/e
					TRYING: t
					> version: _/_/_/_/_/th/e/n/k/e
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/_/_/_/t/h/e/n/k/e(AAAAACCVCCV)
_/_/_/_/_/th/e/n/k/e(AAAAACVCCV)
_/_/_/_/_/_/t/h/e/n/k/e(AAAAAACCVCCV)
_/_/_/_/_/_/th/e/n/k/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/th/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				ANALYSING: think
					resolving (4)
					> version: _/_/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/_/th/i/n/k
					TRYING: th
					> version: _/_/_/_/_/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
_/_/_/_/_/_/t/h/i/n/k(AAAAAACCACC)
_/_/_/_/_/_/t/h/i/n/k(AAAAAACCACC)
_/_/_/_/_/_/th/i/n/k(AAAAAACACC)
_/_/_/_/_/_/th/i/n/k(AAAAAACACC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/_/_/t/h/n/k
					TRYING: t
					> version: _/_/_/_/_/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/_/_/t/h/n/k(AAAAACCCC)
_/_/_/_/_/th/n/k(AAAAACCC)
_/_/_/_/_/_/t/h/n/k(AAAAAACCCC)
_/_/_/_/_/_/th/n/k(AAAAAACCC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/_/th/n', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/_/_/t/h/o
					TRYING: t
					> version: _/_/_/_/_/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o']
				_/_/_/_/_/t/h/o(AAAAACCV)
_/_/_/_/_/th/o(AAAAACV)
_/_/_/_/_/_/t/h/o(AAAAAACCV)
_/_/_/_/_/_/th/o(AAAAAACV)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/_/_/t/h/o/g/h
					TRYING: t
					> version: _/_/_/_/_/t/h/o/gh
					TRYING: t
					> version: _/_/_/_/_/th/o/g/h
					TRYING: th
					> version: _/_/_/_/_/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/_/_/t/h/o/g/h(AAAAACCVCC)
_/_/_/_/_/t/h/o/gh(AAAAACCVC)
_/_/_/_/_/th/o/g/h(AAAAACVCC)
_/_/_/_/_/th/o/gh(AAAAACVC)
_/_/_/_/_/_/t/h/o/g/h(AAAAAACCVCC)
_/_/_/_/_/_/t/h/o/gh(AAAAAACCVC)
_/_/_/_/_/_/th/o/g/h(AAAAAACVCC)
_/_/_/_/_/_/th/o/gh(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/_/_/t/h/o/h
					TRYING: t
					> version: _/_/_/_/_/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/_/_/t/h/o/h(AAAAACCVC)
_/_/_/_/_/th/o/h(AAAAACVC)
_/_/_/_/_/_/t/h/o/h(AAAAAACCVC)
_/_/_/_/_/_/th/o/h(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'h']
				ANALYSING: though
					resolving (12)
					> version: _/_/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/_/t/h/ou/g/h
					TRYING: t
					> version: _/_/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/_/t/h/ou/gh
					TRYING: t
					> version: _/_/_/_/_/th/ou/g/h
					TRYING: th
					> version: _/_/_/_/_/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/t/h/ou/g/h(AAAAACCVCC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/t/h/ou/gh(AAAAACCVC)
_/_/_/_/_/th/ou/g/h(AAAAACVCC)
_/_/_/_/_/th/ou/gh(AAAAACVC)
_/_/_/_/_/_/t/h/o/u/g/h(AAAAAACCVACC)
_/_/_/_/_/_/t/h/o/u/g/h(AAAAAACCVACC)
_/_/_/_/_/_/t/h/o/u/gh(AAAAAACCVAC)
_/_/_/_/_/_/t/h/o/u/gh(AAAAAACCVAC)
_/_/_/_/_/_/th/o/u/g/h(AAAAAACVACC)
_/_/_/_/_/_/th/o/u/g/h(AAAAAACVACC)
_/_/_/_/_/_/t/h/ou/g/h(AAAAAACCVCC)
_/_/_/_/_/_/th/o/u/gh(AAAAAACVAC)
_/_/_/_/_/_/th/o/u/gh(AAAAAACVAC)
_/_/_/_/_/_/t/h/ou/gh(AAAAAACCVC)
_/_/_/_/_/_/th/ou/g/h(AAAAAACVCC)
_/_/_/_/_/_/th/ou/gh(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/_/_/t/h/o/w/t/h
					TRYING: t
					> version: _/_/_/_/_/th/o/w/t/h
					TRYING: th
					> version: _/_/_/_/_/t/h/ow/t/h
					TRYING: t
					> version: _/_/_/_/_/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/_/_/t/h/o/w/t/h(AAAAACCVCCC)
_/_/_/_/_/th/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/t/h/ow/t/h(AAAAACCVCC)
_/_/_/_/_/th/ow/t/h(AAAAACVCC)
_/_/_/_/_/_/t/h/o/w/t/h(AAAAAACCVCCC)
_/_/_/_/_/_/th/o/w/t/h(AAAAAACVCCC)
_/_/_/_/_/_/t/h/ow/t/h(AAAAAACCVCC)
_/_/_/_/_/_/th/ow/t/h(AAAAAACVCC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/th/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/_/th/y/n/k
					TRYING: th
					> version: _/_/_/_/_/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
_/_/_/_/_/_/t/h/y/n/k(AAAAAACCACC)
_/_/_/_/_/_/t/h/y/n/k(AAAAAACCACC)
_/_/_/_/_/_/th/y/n/k(AAAAAACACC)
_/_/_/_/_/_/th/y/n/k(AAAAAACACC)
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/_/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/_/t/o/h(AAAAACVC)
_/_/_/_/_/_/t/o/h(AAAAAACVC)
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/t/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 't', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', '_']
				þ/_/_/_/_(CAAAA)
þ/_/_/_/_/_(CAAAAA)
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/e/_/_/_/i/n/k
					TRYING: i
					> version: þ/e/_/_/_/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/_/i/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				version split: ['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/e/_/_/_/i/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'i', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', '_', '_']
				þ/e/n/_/_(CVCAA)
þ/e/n/_/_/_(CVCAAA)
				version split: ['þ', 'e', 'n', '_', '_']
				{'string': 'þ/e/n/_/_', 'rgx': '((þ))/((e))/((n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_', '_']
				version split: ['þ', 'e', 'n', '_', '_', '_']
				{'string': 'þ/e/n/_/_/_', 'rgx': '((þ))/((e))/((n))/((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'c', '_', '_']
				þ/e/n/c/_(CVCCA)
þ/e/n/c/_/_(CVCCAA)
				version split: ['þ', 'e', 'n', 'c', '_']
				{'string': 'þ/e/n/c/_', 'rgx': '((þ))/((e))/((n))/((c))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', '_']
				version split: ['þ', 'e', 'n', 'c', '_', '_']
				{'string': 'þ/e/n/c/_/_', 'rgx': '((þ))/((e))/((n))/((c))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/_/_/g
					TRYING: g
					> version: þ/e/ng/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', '_', '_', '_', 'g']
				adding dashed alternative: ['þ', 'e', 'ng', '_', '_', '_']
				þ/e/n/_/_/g(CVCAAC)
þ/e/ng/_/_(CVCAA)
þ/e/n/_/_/_/g(CVCAAAC)
þ/e/ng/_/_/_(CVCAAA)
				version split: ['þ', 'e', 'n', '_', '_', 'g']
				{'string': 'þ/e/n/_/_/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_', '_', 'g']
				version split: ['þ', 'e', 'ng', '_', '_']
				{'string': 'þ/e/ng/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', '_', '_']
				version split: ['þ', 'e', 'n', '_', '_', '_', 'g']
				{'string': 'þ/e/n/_/_/_/g', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', '_', '_', '_', 'g']
				version split: ['þ', 'e', 'ng', '_', '_', '_']
				{'string': 'þ/e/ng/_/_/_', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/_/_/g/e
					TRYING: g
					> version: þ/e/ng/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', '_', '_', 'g', 'e']
				{'string': 'þ/e/n/_/_/g/e', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((e))$'}
				_____REMOVING________['þ', 'e', 'n', '_', '_', 'g', 'e']
				version split: ['þ', 'e', 'ng', '_', '_', 'e']
				{'string': 'þ/e/ng/_/_/e', 'rgx': '((þ))/((e))/((ng)|(n))/((_))/((_))/((e))$'}
				ANALYSING: þench
					resolving (1)
					> version: þ/e/n/c/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'c', 'h', '_']
				þ/e/n/c/h(CVCCC)
þ/e/n/c/h/_(CVCCCA)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e/n/c/h', 'rgx': '((þ))/((e))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'c', 'h', '_']
				{'string': 'þ/e/n/c/h/_', 'rgx': '((þ))/((e))/((n))/((c)|(ch))/((h))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'n', 'k', '_', '_']
				þ/e/n/k/_(CVCCA)
þ/e/n/k/_/_(CVCCAA)
				version split: ['þ', 'e', 'n', 'k', '_']
				{'string': 'þ/e/n/k/_', 'rgx': '((þ))/((e))/((n))/((k))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', '_']
				version split: ['þ', 'e', 'n', 'k', '_', '_']
				{'string': 'þ/e/n/k/_/_', 'rgx': '((þ))/((e))/((n))/((k))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k', '_', 'e']
				{'string': 'þ/e/n/k/_/e', 'rgx': '((þ))/((e))/((n))/((k))/((_))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/_/_/e/n/k/e
					TRYING: e
					> version: _/y/_/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((e))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (1)
					> version: þ/eo/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'eo', '_', 'h', '_', '_']
				þ/eo/_/h/_(CVACA)
þ/eo/_/h/_/_(CVACAA)
				version split: ['þ', 'eo', '_', 'h', '_']
				{'string': 'þ/eo/_/h/_', 'rgx': '((þ))/((eo)|(e))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['þ', 'eo', '_', 'h', '_']
				version split: ['þ', 'eo', '_', 'h', '_', '_']
				{'string': 'þ/eo/_/h/_/_', 'rgx': '((þ))/((eo)|(e))/((_))/((h))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c/_
					> version: þ/i/n/c/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', '_', '_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', '_', '_']
				þ/i/n/c/_(CACCA)
þ/i/n/c/_(CACCA)
þ/i/n/c/_/_(CACCAA)
þ/i/n/c/_/_(CACCAA)
				version split: ['þ', 'i', 'n', 'c', '_']
				{'string': 'þ/i/n/c/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', '_']
				version split: ['þ', 'i', 'n', 'c', '_']
				{'string': 'þ/i/n/c/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', '_']
				version split: ['þ', 'i', 'n', 'c', '_', '_']
				{'string': 'þ/i/n/c/_/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))/((_))$'}
				version split: ['þ', 'i', 'n', 'c', '_', '_']
				{'string': 'þ/i/n/c/_/_', 'rgx': '((þ))/((i))/((n))/((c))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þinch
					resolving (2)
					> version: þ/i/n/c/h
					> version: þ/i/n/c/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', 'h', '_']
				adding dashed alternative: ['þ', 'i', 'n', 'c', 'h', '_']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/c/h/_(CACCCA)
þ/i/n/c/h/_(CACCCA)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c/h', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n/c/h', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h', '_']
				{'string': 'þ/i/n/c/h/_', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))/((_))$'}
				version split: ['þ', 'i', 'n', 'c', 'h', '_']
				{'string': 'þ/i/n/c/h/_', 'rgx': '((þ))/((i))/((n))/((c)|(ch))/((h))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k/_
					> version: þ/i/n/k/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_', '_']
				adding dashed alternative: ['þ', 'i', 'n', 'k', '_', '_']
				þ/i/n/k/_(CACCA)
þ/i/n/k/_(CACCA)
þ/i/n/k/_/_(CACCAA)
þ/i/n/k/_/_(CACCAA)
				version split: ['þ', 'i', 'n', 'k', '_']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', '_']
				version split: ['þ', 'i', 'n', 'k', '_']
				{'string': 'þ/i/n/k/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', '_']
				version split: ['þ', 'i', 'n', 'k', '_', '_']
				{'string': 'þ/i/n/k/_/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((_))$'}
				version split: ['þ', 'i', 'n', 'k', '_', '_']
				{'string': 'þ/i/n/k/_/_', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/_/e
					TRYING: e
					> version: þ/i/n/k/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'i', 'n', 'k', '_', 'e']
				{'string': 'þ/i/n/k/_/e', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((e))$'}
				version split: ['þ', 'i', 'n', 'k', '_', 'e']
				{'string': 'þ/i/n/k/_/e', 'rgx': '((þ))/((i))/((n))/((k))/((_))/((e))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/ð/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ð', '_', '_']
				þ/o/_/ð/_(CVACA)
þ/o/_/ð/_/_(CVACAA)
				version split: ['þ', 'o', '_', 'ð', '_']
				{'string': 'þ/o/_/ð/_', 'rgx': '((þ))/((o))/((_))/((ð))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ð', '_']
				version split: ['þ', 'o', '_', 'ð', '_', '_']
				{'string': 'þ/o/_/ð/_/_', 'rgx': '((þ))/((o))/((_))/((ð))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/o/g/h/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'g', 'h', '_', '_']
				þ/o/g/h/_(CVCCA)
þ/o/g/h/_/_(CVCCAA)
				version split: ['þ', 'o', 'g', 'h', '_']
				{'string': 'þ/o/g/h/_', 'rgx': '((þ))/((o))/((g))/((h))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h', '_']
				version split: ['þ', 'o', 'g', 'h', '_', '_']
				{'string': 'þ/o/g/h/_/_', 'rgx': '((þ))/((o))/((g))/((h))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/h/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', '_', '_']
				þ/o/_/h/_(CVACA)
þ/o/_/h/_/_(CVACAA)
				version split: ['þ', 'o', '_', 'h', '_']
				{'string': 'þ/o/_/h/_', 'rgx': '((þ))/((o))/((_))/((h))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h', '_']
				version split: ['þ', 'o', '_', 'h', '_', '_']
				{'string': 'þ/o/_/h/_/_', 'rgx': '((þ))/((o))/((_))/((h))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/_/_/o/h
					TRYING: o
					> version: _/y/_/_/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/h/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', 'h', '_']
				þ/o/_/h/h(CVACC)
þ/o/_/h/h/_(CVACCA)
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_/h/h', 'rgx': '((þ))/((o))/((_))/((h))/((h))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h', 'h']
				version split: ['þ', 'o', '_', 'h', 'h', '_']
				{'string': 'þ/o/_/h/h/_', 'rgx': '((þ))/((o))/((_))/((h))/((h))/((_))$'}
				ANALYSING: þoch
					resolving (1)
					> version: þ/o/_/c/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'c', 'h', '_']
				þ/o/_/c/h(CVACC)
þ/o/_/c/h/_(CVACCA)
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_/c/h', 'rgx': '((þ))/((o))/((_))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'c', 'h']
				version split: ['þ', 'o', '_', 'c', 'h', '_']
				{'string': 'þ/o/_/c/h/_', 'rgx': '((þ))/((o))/((_))/((c)|(ch))/((h))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/_/_/_/u
					TRYING: u
					> version: þ/o/_/_/_/u
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/_/_/_/u/c
					TRYING: u
					> version: þ/o/_/_/_/u/c
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_/u/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_/u/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'c']
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/_/_/_/u/h
					TRYING: u
					> version: þ/o/_/_/_/u/h
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/_/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, u, _, ou, o
					> version: _/y/_/_/_/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, u, _, ou, o
					RESULT:  ['o']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				ANALYSING: þouht
					resolving (2)
					> version: þ/o/_/_/_/u/h/t
					TRYING: u
					> version: þ/o/_/_/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'þ/o/_/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: þous
					resolving (2)
					> version: þ/o/_/_/_/u/s
					TRYING: u
					> version: þ/o/_/_/_/u/s
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_/u/s', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_/u/s', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 's']
				ANALYSING: þouth
					resolving (4)
					> version: þ/o/_/_/_/u/t/h
					TRYING: u
					> version: þ/o/_/_/_/u/t/h
					TRYING: u
					> version: þ/o/_/_/_/u/th
					TRYING: u
					> version: þ/o/_/_/_/u/th
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/_/u/t', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'þ/o/_/_/_/u/t', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/_/u/th', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'th']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'þ/o/_/_/_/u/th', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'th']
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/_/_/_/u/ȝ
					TRYING: u
					> version: þ/o/_/_/_/u/ȝ
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_/u/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_/u/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/_/_/_/w/t/h
					TRYING: w
					> version: þ/o/_/_/_/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', '_', 'w', 'th']
				þ/o/_/_/_/w/t/h(CVAAACCC)
þ/o/_/_/_/w/th(CVAAACC)
þ/o/_/_/_/_/w/t/h(CVAAAACCC)
þ/o/_/_/_/_/w/th(CVAAAACC)
				version split: ['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/_/w/t', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/_/w/th', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'w', 'th']
				version split: ['þ', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', '_', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', '_', 'w', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/_/_/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', '_', 'ȝ']
				þ/o/_/_/_/ȝ(CVAAAC)
þ/o/_/_/_/_/ȝ(CVAAAAC)
				version split: ['þ', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n/_/_
					> version: þ/u/n/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', 'n', '_', '_', '_']
				adding dashed alternative: ['þ', 'u', 'n', '_', '_', '_']
				þ/u/n/_/_(CACAA)
þ/u/n/_/_(CACAA)
þ/u/n/_/_/_(CACAAA)
þ/u/n/_/_/_(CACAAA)
				version split: ['þ', 'u', 'n', '_', '_']
				{'string': 'þ/u/n/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', '_', '_']
				version split: ['þ', 'u', 'n', '_', '_']
				{'string': 'þ/u/n/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', '_', '_']
				version split: ['þ', 'u', 'n', '_', '_', '_']
				{'string': 'þ/u/n/_/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))/((_))$'}
				version split: ['þ', 'u', 'n', '_', '_', '_']
				{'string': 'þ/u/n/_/_/_', 'rgx': '((þ))/((u))/((n))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (2)
					> version: þ/u/n/c/h
					> version: þ/u/n/c/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', 'n', 'c', 'h', '_']
				adding dashed alternative: ['þ', 'u', 'n', 'c', 'h', '_']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/c/h/_(CACCCA)
þ/u/n/c/h/_(CACCCA)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c/h', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n/c/h', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h', '_']
				{'string': 'þ/u/n/c/h/_', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))/((_))$'}
				version split: ['þ', 'u', 'n', 'c', 'h', '_']
				{'string': 'þ/u/n/c/h/_', 'rgx': '((þ))/((u))/((n))/((c)|(ch))/((h))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k/_
					> version: þ/y/n/k/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', 'n', 'k', '_', '_']
				adding dashed alternative: ['þ', 'y', 'n', 'k', '_', '_']
				þ/y/n/k/_(CACCA)
þ/y/n/k/_(CACCA)
þ/y/n/k/_/_(CACCAA)
þ/y/n/k/_/_(CACCAA)
				version split: ['þ', 'y', 'n', 'k', '_']
				{'string': 'þ/y/n/k/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k', '_']
				version split: ['þ', 'y', 'n', 'k', '_']
				{'string': 'þ/y/n/k/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k', '_']
				version split: ['þ', 'y', 'n', 'k', '_', '_']
				{'string': 'þ/y/n/k/_/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))/((_))$'}
				version split: ['þ', 'y', 'n', 'k', '_', '_']
				{'string': 'þ/y/n/k/_/_', 'rgx': '((þ))/((y))/((n))/((k))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
_/_/_/_/_/_/z/e/n/k/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['ð', 'e', 'n', '_', '_', '_']
		only one version left: ['ð', 'e', 'n', 'c', '_', '_']
		only one version left: ['ð', 'e', 'n', 'c', 'h', '_']
		only one version left: ['ð', 'e', 'n', 'k', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['ð', 'i', 'ng', '_', '_', '_']
		FAIL: 
		only one version left: ['ð', 'o', 'g', '_', '_', '_']
		only one version left: ['ð', 'o', '_', 'h', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', '_', '_', '_']
		FAIL: 
		only one version left: ['þ', 'e', 'n', '_', '_', '_']
		only one version left: ['þ', 'e', 'n', 'c', '_', '_']
		only one version left: ['þ', 'e', 'ng', '_', '_', '_']
		only one version left: ['þ', 'e', 'ng', '_', '_', 'e']
		only one version left: ['þ', 'e', 'n', 'c', 'h', '_']
		only one version left: ['þ', 'e', 'n', 'k', '_', '_']
		only one version left: ['þ', 'e', 'n', 'k', '_', 'e']
		FAIL: 
		only one version left: ['þ', 'eo', '_', 'h', '_', '_']
		only one version left: ['þ', 'i', 'n', 'c', '_', '_']
		FAIL: 
		only one version left: ['þ', 'i', 'n', 'c', 'h', '_']
		only one version left: ['þ', 'i', 'n', 'k', '_', '_']
		only one version left: ['þ', 'i', 'n', 'k', '_', 'e']
		only one version left: ['þ', 'o', '_', 'ð', '_', '_']
		only one version left: ['þ', 'o', 'g', 'h', '_', '_']
		only one version left: ['þ', 'o', '_', 'h', '_', '_']
		FAIL: 
		only one version left: ['þ', 'o', '_', 'h', 'h', '_']
		only one version left: ['þ', 'o', '_', 'c', 'h', '_']
		only one version left: ['þ', 'o', '_', '_', '_', 'u']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', 'u', 'n', '_', '_', '_']
		only one version left: ['þ', 'u', 'n', 'c', 'h', '_']
		only one version left: ['þ', 'y', 'n', 'k', '_', '_']
		FAIL: 
		SPLIT: ['þ', 'e', 'n', 'c', 'k', 'e']
		SPLIT: ['þ', 'e', 'n', 'c', 'h', 'e']
		SPLIT: ['ð', 'e', 'n', '_', '_', '_']
		['ð', 'e', 'n', '_', '_', '_']
		SPLIT: ['ð', 'e', 'n', 'c', '_', '_']
		['ð', 'e', 'n', 'c', '_', '_']
		SPLIT: ['ð', 'e', 'n', 'c', 'h', '_']
		['ð', 'e', 'n', 'c', 'h', '_']
		SPLIT: ['ð', 'e', 'n', 'k', '_', 'e']
		['ð', 'e', 'n', 'k', '_', 'e']
		SPLIT: ["['ð']", "['_']", "['_']", "['h']", "['_']", "['e']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['h']", "['_']", "['o']"]
		SPLIT: ['ð', 'i', 'ng', '_', '_', '_']
		['ð', 'i', 'ng', '_', '_', '_']
		['ð', 'i', 'ng', '_', '_', '_']
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['ð', 'o', 'g', '_', '_', '_']
		['ð', 'o', 'g', '_', '_', '_']
		SPLIT: ['ð', 'o', '_', 'h', '_', '_']
		['ð', 'o', '_', 'h', '_', '_']
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['e']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['s', '_', '_', '_', '_', '_']
		['s', '_', '_', '_', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ['þ', 'e', 'n', '_', '_', '_']
		['þ', 'e', 'n', '_', '_', '_']
		SPLIT: ['þ', 'e', 'n', 'c', '_', '_']
		['þ', 'e', 'n', 'c', '_', '_']
		SPLIT: ['þ', 'e', 'ng', '_', '_', '_']
		['þ', 'e', 'ng', '_', '_', '_']
		SPLIT: ['þ', 'e', 'ng', '_', '_', 'e']
		['þ', 'e', 'ng', '_', '_', 'e']
		SPLIT: ['þ', 'e', 'n', 'c', 'h', '_']
		['þ', 'e', 'n', 'c', 'h', '_']
		SPLIT: ['þ', 'e', 'n', 'k', '_', '_']
		['þ', 'e', 'n', 'k', '_', '_']
		SPLIT: ['þ', 'e', 'n', 'k', '_', 'e']
		['þ', 'e', 'n', 'k', '_', 'e']
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['e']"]
		SPLIT: ['þ', 'eo', '_', 'h', '_', '_']
		['þ', 'eo', '_', 'h', '_', '_']
		SPLIT: ['þ', 'i', 'n', 'c', '_', '_']
		['þ', 'i', 'n', 'c', '_', '_']
		['þ', 'i', 'n', 'c', '_', '_']
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ['þ', 'i', 'n', 'c', 'h', '_']
		['þ', 'i', 'n', 'c', 'h', '_']
		['þ', 'i', 'n', 'c', 'h', '_']
		SPLIT: ['þ', 'i', 'n', 'k', '_', '_']
		['þ', 'i', 'n', 'k', '_', '_']
		['þ', 'i', 'n', 'k', '_', '_']
		SPLIT: ['þ', 'i', 'n', 'k', '_', 'e']
		['þ', 'i', 'n', 'k', '_', 'e']
		['þ', 'i', 'n', 'k', '_', 'e']
		SPLIT: ['þ', 'o', '_', 'ð', '_', '_']
		['þ', 'o', '_', 'ð', '_', '_']
		SPLIT: ['þ', 'o', 'g', 'h', '_', '_']
		['þ', 'o', 'g', 'h', '_', '_']
		SPLIT: ['þ', 'o', '_', 'h', '_', '_']
		['þ', 'o', '_', 'h', '_', '_']
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ['þ', 'o', '_', 'h', 'h', '_']
		['þ', 'o', '_', 'h', 'h', '_']
		SPLIT: ['þ', 'o', '_', 'c', 'h', '_']
		['þ', 'o', '_', 'c', 'h', '_']
		SPLIT: ['þ', 'o', '_', '_', '_', 'u']
		['þ', 'o', '_', '_', '_', 'u']
		['þ', 'o', '_', '_', '_', 'u']
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['o']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', 'u', 'n', '_', '_', '_']
		['þ', 'u', 'n', '_', '_', '_']
		['þ', 'u', 'n', '_', '_', '_']
		SPLIT: ['þ', 'u', 'n', 'c', 'h', '_']
		['þ', 'u', 'n', 'c', 'h', '_']
		['þ', 'u', 'n', 'c', 'h', '_']
		SPLIT: ['þ', 'y', 'n', 'k', '_', '_']
		['þ', 'y', 'n', 'k', '_', '_']
		['þ', 'y', 'n', 'k', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCCV is INVALID
		[]
		29
		OVERVIEW: version for pattern CVCCCV

faulty splits: 29
['ð']['']['']['h']['']['e'] <-! ðhenk
['ð']['']['']['h']['']['o'] <-! ðhog
['ð']['o'][''][''][''][''] <-! ðod
['ð']['o'][''][''][''][''] <-! ðoƿg
['']['e'][''][''][''][''] <-! es
[''][''][''][''][''][''] <-! thenke
[''][''][''][''][''][''] <-! think
[''][''][''][''][''][''] <-! thnk
[''][''][''][''][''][''] <-! tho
[''][''][''][''][''][''] <-! thogh
[''][''][''][''][''][''] <-! thoh
[''][''][''][''][''][''] <-! though
[''][''][''][''][''][''] <-! thowth
[''][''][''][''][''][''] <-! thynk
[''][''][''][''][''][''] <-! toh
['þ']['e']['']['']['']['i'] <-! þeink
['']['y']['']['']['']['e'] <-! yenke
['']['y']['']['']['']['i'] <-! yinge
['']['y']['']['']['']['o'] <-! yoh
['þ']['o']['']['']['']['u'] <-! þouc
['þ']['o']['']['']['']['u'] <-! þouh
['']['y']['']['']['']['o'] <-! youh
['þ']['o']['']['']['']['u'] <-! þouht
['þ']['o']['']['']['']['u'] <-! þous
['þ']['o']['']['']['']['u'] <-! þouth
['þ']['o']['']['']['']['u'] <-! þouȝ
['þ']['o'][''][''][''][''] <-! þowth
['þ']['o'][''][''][''][''] <-! þoȝ
[''][''][''][''][''][''] <-! zenke
þ | e | n | c | k | e
þ | e | n | c | h | e
ð | e | n | _ | _ | _
ð | e | n | c | _ | _
ð | e | n | c | h | _
ð | e | n | k | _ | e
['ð'] | ['_'] | ['_'] | ['h'] | ['_'] | ['e']
['ð'] | ['_'] | ['_'] | ['h'] | ['_'] | ['o']
ð | i | ng | _ | _ | _
['ð'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
ð | o | g | _ | _ | _
ð | o | _ | h | _ | _
['ð'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['e'] | ['_'] | ['_'] | ['_'] | ['_']
s | _ | _ | _ | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
þ | _ | _ | _ | _ | _
['þ'] | ['e'] | ['_'] | ['_'] | ['_'] | ['i']
þ | e | n | _ | _ | _
þ | e | n | c | _ | _
þ | e | ng | _ | _ | _
þ | e | ng | _ | _ | e
þ | e | n | c | h | _
þ | e | n | k | _ | _
þ | e | n | k | _ | e
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['e']
þ | eo | _ | h | _ | _
þ | i | n | c | _ | _
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['i']
þ | i | n | c | h | _
þ | i | n | k | _ | _
þ | i | n | k | _ | e
þ | o | _ | ð | _ | _
þ | o | g | h | _ | _
þ | o | _ | h | _ | _
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['o']
þ | o | _ | h | h | _
þ | o | _ | c | h | _
þ | o | _ | _ | _ | u
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['o']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
þ | u | n | _ | _ | _
þ | u | n | c | h | _
þ | y | n | k | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 't'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 's', 't'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'þ', 'ð', '_', 's', 't'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 'z'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 'th', 's'},{'y', 'þ', 'ð', '_', 's'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 's', 't'},{'þ', 'ð', '_', 's', 't'}
2 : {'n', 'g', 'w', '_', 'ng'},{'n', 'g', '_', 'ng', 'c'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ƿ', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', '_', 'ng', 't'},{'n', 'ð', 'g', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 'z'},{'n', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ng', 'ch'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', '_'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'ng', 'n', 'd', '_'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'}
3 : {'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'z', 'k', 'ch'},{'h', '_', 'c', 's', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', '_', 'ƿ', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'd', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'k', 't', 'ch'}
4 : {'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 't', 'h'},{'g', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 't', 'h'},{'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 's', 'h'},{'k', '_', 't', 'h'},{'th', 'k', '_', 'h'},{'g', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'th', 'k', '_', 'h'},{'i', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'ȝ', 'k', '_', 'h'},{'w', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'g', 'k', '_', 'h'},{'w', 'k', '_', 'h'},{'g', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'i', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'th', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'i', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'i', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 'd', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'i', 'k', '_', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'i', 'k', '_', 'h'},{'k', '_', 'z', 'h'},{'ƿ', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'th', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 't', 'h'},{'k', 'u', '_', 'h'},{'th', 'k', '_', 'h'},{'k', '_', 't', 'h'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: ðenke
				adding littera based on matching pattern
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenge
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: þenke
				adding littera based on matching pattern
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: þinke
				adding littera based on matching pattern
				ANALYSING: zenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n']
				ð/e/n(CVC)
_/ð/e/n(ACVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['_', 'ð', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
_/ð/e/n/c(ACVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['_', 'ð', 'e', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: ð/e/n/ch
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
_/ð/e/n/c/h(ACVCCC)
_/ð/e/n/ch(ACVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'e', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'h', 'e', 'n', 'k']
				ð/h/e/n/k(CCVCC)
_/ð/h/e/n/k(ACCVCC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'h', 'o', 'g']
				ð/h/o/g(CCVC)
_/ð/h/o/g(ACCVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['_', 'ð', 'h', 'o', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', 'ð', 'i', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
_/ð/i/n/g(ACACC)
_/ð/i/n/g(ACACC)
_/ð/i/ng(ACAC)
_/ð/i/ng(ACAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'd']
				ð/o/d(CVC)
_/ð/o/d(ACVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['_', 'ð', 'o', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'g']
				ð/o/g(CVC)
_/ð/o/g(ACVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['_', 'ð', 'o', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'h']
				ð/o/h(CVC)
_/ð/o/h(ACVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['_', 'ð', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: ð/oƿ/g
					TRYING: ð
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', 'ð', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
_/ð/o/ƿ/g(ACVCC)
_/ð/oƿ/g(ACVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'oƿ', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> y, þ, ð, th, _, s, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
th/i/n/k(CCCC)
th/i/n/k(CVCC)
_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'n', 'k']
				t/h/n/k(CCCC)
th/n/k(CCC)
_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'n', 'k']
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o']
				adding dashed alternative: ['_', 'th', 'o']
				t/h/o(CCV)
th/o(CV)
_/t/h/o(ACCV)
_/th/o(ACV)
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o']
				version split: ['_', 't', 'h', 'o']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
th/o/g/h(CVCC)
th/o/gh(CVC)
_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'gh']
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'h']
				t/h/o/h(CCVC)
th/o/h(CVC)
_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'h']
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: though
					resolving (12)
					> version: t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/ou/gh
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'ou', 'gh']
				t/h/o/u/g/h(CCVCCC)
t/h/o/u/g/h(CCVVCC)
t/h/o/u/gh(CCVCC)
t/h/o/u/gh(CCVVC)
th/o/u/g/h(CVCCC)
th/o/u/g/h(CVVCC)
t/h/ou/g/h(CCVCC)
th/o/u/gh(CVCC)
th/o/u/gh(CVVC)
t/h/ou/gh(CCVC)
th/ou/g/h(CVCC)
th/ou/gh(CVC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'g', 'h']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'gh']
				version split: ['th', 'ou', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'g', 'h']
				version split: ['th', 'ou', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', 'th', 'ow', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
th/o/w/t/h(CVCCC)
t/h/ow/t/h(CCVCC)
th/ow/t/h(CVCC)
_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
th/y/n/k(CCCC)
th/y/n/k(CVCC)
_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					adding blocked set: C = C >> y, þ, ð, th, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'o', 'h']
				t/o/h(CVC)
_/t/o/h(ACVC)
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['_', 't', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ']
				þ(C)
_/þ(AC)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ']
				version split: ['_', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ei/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
_/þ/e/i/n/k(ACVACC)
_/þ/e/i/n/k(ACVACC)
_/þ/ei/n/k(ACVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ei', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n']
				þ/e/n(CVC)
_/þ/e/n(ACVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['_', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
_/þ/e/n/c(ACVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['_', 'þ', 'e', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/e/ng
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', 'þ', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
_/þ/e/n/g(ACVCC)
_/þ/e/ng(ACVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['_', 'þ', 'e', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/e/n/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
_/þ/e/n/c/h(ACVCCC)
_/þ/e/n/ch(ACVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
_/þ/e/n/k(ACVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['_', 'þ', 'e', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/eo/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', 'þ', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
_/þ/e/o/h(ACVVC)
_/þ/eo/h(ACVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['_', 'þ', 'e', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'eo', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
_/þ/i/n/c(ACACC)
_/þ/i/n/c(ACACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/ch(ACACC)
_/þ/i/n/ch(ACACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
_/þ/i/n/k(ACACC)
_/þ/i/n/k(ACACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'ð']
				þ/o/ð(CVC)
_/þ/o/ð(ACVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['_', 'þ', 'o', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/gh
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
_/þ/o/g/h(ACVCC)
_/þ/o/gh(ACVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['_', 'þ', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'h']
				þ/o/h(CVC)
_/þ/o/h(ACVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['_', 'þ', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
_/þ/o/h/h(ACVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['_', 'þ', 'o', 'h', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
_/þ/o/c/h(ACVCC)
_/þ/o/ch(ACVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['_', 'þ', 'o', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', 'þ', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
_/þ/o/u(ACVA)
_/þ/o/u(ACVA)
_/þ/ou(ACV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/c
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', 'þ', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
_/þ/o/u/c(ACVAC)
_/þ/o/u/c(ACVAC)
_/þ/ou/c(ACVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'þ', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
_/þ/o/u/h(ACVAC)
_/þ/o/u/h(ACVAC)
_/þ/ou/h(ACVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/h/t
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', 'þ', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
_/þ/o/u/h/t(ACVACC)
_/þ/o/u/h/t(ACVACC)
_/þ/ou/h/t(ACVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/s
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', 'þ', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
_/þ/o/u/s(ACVAC)
_/þ/o/u/s(ACVAC)
_/þ/ou/s(ACVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/t/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/th
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/th(ACVAC)
_/þ/o/u/th(ACVAC)
_/þ/ou/t/h(ACVCC)
_/þ/ou/th(ACVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'th']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ou/ȝ
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', 'þ', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
_/þ/o/u/ȝ(ACVAC)
_/þ/o/u/ȝ(ACVAC)
_/þ/ou/ȝ(ACVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/o/w/th
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ow/t/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/ow/th
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
_/þ/o/w/t/h(ACVCCC)
_/þ/o/w/th(ACVCC)
_/þ/ow/t/h(ACVCC)
_/þ/ow/th(ACVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'w', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ow', 'th']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'ȝ']
				þ/o/ȝ(CVC)
_/þ/o/ȝ(ACVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['_', 'þ', 'o', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/u/n
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', 'þ', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
_/þ/u/n(ACAC)
_/þ/u/n(ACAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/ch(ACACC)
_/þ/u/n/ch(ACACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					> version: þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> y, þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'y', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
_/þ/y/n/k(ACACC)
_/þ/y/n/k(ACACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCV : 1___
				ANALYSING: ðenke
				adding littera based on matching pattern
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenge
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: þenke
				adding littera based on matching pattern
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: þinke
				adding littera based on matching pattern
				ANALYSING: zenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/ð/e/n
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n']
				_/ð/e/n(ACVC)
_/_/ð/e/n(AACVC)
				version split: ['_', 'ð', 'e', 'n']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n']
				version split: ['_', '_', 'ð', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/ð/e/n/c
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'c']
				_/ð/e/n/c(ACVCC)
_/_/ð/e/n/c(AACVCC)
				version split: ['_', 'ð', 'e', 'n', 'c']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/ð/e/n/c/h
					TRYING: ð
					> version: _/ð/e/n/ch
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'ch']
				_/ð/e/n/c/h(ACVCCC)
_/ð/e/n/ch(ACVCC)
_/_/ð/e/n/c/h(AACVCCC)
_/_/ð/e/n/ch(AACVCC)
				version split: ['_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', 'ð', 'e', 'n', 'ch']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/ð/h/e/n/k
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/ð/h/e/n/k(ACCVCC)
_/_/ð/h/e/n/k(AACCVCC)
				version split: ['_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/ð/h/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'h', 'o', 'g']
				_/ð/h/o/g(ACCVC)
_/_/ð/h/o/g(AACCVC)
				version split: ['_', 'ð', 'h', 'o', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/ð/i/n/g
					TRYING: ð
					> version: _/ð/i/n/g
					TRYING: ð
					> version: _/ð/i/ng
					TRYING: ð
					> version: _/ð/i/ng
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'ng']
				_/ð/i/n/g(ACACC)
_/ð/i/n/g(ACACC)
_/ð/i/ng(ACAC)
_/ð/i/ng(ACAC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/ng(AACAC)
_/_/ð/i/ng(AACAC)
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'n', 'g']
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'n', 'g']
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'ng']
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'ng']
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/ð/o/d
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'd']
				_/ð/o/d(ACVC)
_/_/ð/o/d(AACVC)
				version split: ['_', 'ð', 'o', 'd']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'd']
				version split: ['_', '_', 'ð', 'o', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/ð/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'g']
				_/ð/o/g(ACVC)
_/_/ð/o/g(AACVC)
				version split: ['_', 'ð', 'o', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'g']
				version split: ['_', '_', 'ð', 'o', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/ð/o/h
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'h']
				_/ð/o/h(ACVC)
_/_/ð/o/h(AACVC)
				version split: ['_', 'ð', 'o', 'h']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'h']
				version split: ['_', '_', 'ð', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/ð/o/ƿ/g
					TRYING: ð
					> version: _/ð/oƿ/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'oƿ', 'g']
				_/ð/o/ƿ/g(ACVCC)
_/ð/oƿ/g(ACVC)
_/_/ð/o/ƿ/g(AACVCC)
_/_/ð/oƿ/g(AACVC)
				version split: ['_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', 'ð', 'oƿ', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/th/i/n/k
					TRYING: th
					> version: _/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/t/h/n/k
					TRYING: t
					> version: _/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'n', 'k']
				_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'n', 'k']
				version split: ['_', 'th', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/t/h/o
					TRYING: t
					> version: _/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', 'th', 'o']
				_/t/h/o(ACCV)
_/th/o(ACV)
_/_/t/h/o(AACCV)
_/_/th/o(AACV)
				version split: ['_', 't', 'h', 'o']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o']
				version split: ['_', 'th', 'o']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o']
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/t/h/o/g/h
					TRYING: t
					> version: _/t/h/o/gh
					TRYING: t
					> version: _/th/o/g/h
					TRYING: th
					> version: _/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'gh']
				_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'gh']
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'g', 'h']
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/t/h/o/h
					TRYING: t
					> version: _/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'h']
				_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'h']
				version split: ['_', 'th', 'o', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/t/h/ou/g/h
					TRYING: t
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/t/h/ou/gh
					TRYING: t
					> version: _/th/ou/g/h
					TRYING: th
					> version: _/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'gh']
				_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'gh']
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'g', 'h']
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/t/h/o/w/t/h
					TRYING: t
					> version: _/th/o/w/t/h
					TRYING: th
					> version: _/t/h/ow/t/h
					TRYING: t
					> version: _/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ow', 't', 'h']
				_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/th/y/n/k
					TRYING: th
					> version: _/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'o', 'h']
				_/t/o/h(ACVC)
_/_/t/o/h(AACVC)
				version split: ['_', 't', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'o', 'h']
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ']
				_/þ(AC)
_/_/þ(AAC)
				version split: ['_', 'þ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ']
				version split: ['_', '_', 'þ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/þ/e/i/n/k
					TRYING: þ
					> version: _/þ/e/i/n/k
					TRYING: þ
					> version: _/þ/ei/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'ei', 'n', 'k']
				_/þ/e/i/n/k(ACVACC)
_/þ/e/i/n/k(ACVACC)
_/þ/ei/n/k(ACVCC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/ei/n/k(AACVCC)
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', 'þ', 'ei', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/þ/e/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n']
				_/þ/e/n(ACVC)
_/_/þ/e/n(AACVC)
				version split: ['_', 'þ', 'e', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n']
				version split: ['_', '_', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/þ/e/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c']
				_/þ/e/n/c(ACVCC)
_/_/þ/e/n/c(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/þ/e/n/g
					TRYING: þ
					> version: _/þ/e/ng
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'ng']
				_/þ/e/n/g(ACVCC)
_/þ/e/ng(ACVC)
_/_/þ/e/n/g(AACVCC)
_/_/þ/e/ng(AACVC)
				version split: ['_', 'þ', 'e', 'n', 'g']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'g']
				version split: ['_', 'þ', 'e', 'ng']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'ng']
				version split: ['_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/þ/e/n/c/h
					TRYING: þ
					> version: _/þ/e/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'ch']
				_/þ/e/n/c/h(ACVCCC)
_/þ/e/n/ch(ACVCC)
_/_/þ/e/n/c/h(AACVCCC)
_/_/þ/e/n/ch(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', 'þ', 'e', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/þ/e/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'k']
				_/þ/e/n/k(ACVCC)
_/_/þ/e/n/k(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/þ/e/o/h
					TRYING: þ
					> version: _/þ/eo/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'eo', 'h']
				_/þ/e/o/h(ACVVC)
_/þ/eo/h(ACVC)
_/_/þ/e/o/h(AACVVC)
_/_/þ/eo/h(AACVC)
				version split: ['_', 'þ', 'e', 'o', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'o', 'h']
				version split: ['_', 'þ', 'eo', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'eo', 'h']
				version split: ['_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'eo', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/þ/i/n/c
					TRYING: þ
					> version: _/þ/i/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c']
				_/þ/i/n/c(ACACC)
_/þ/i/n/c(ACACC)
_/_/þ/i/n/c(AACACC)
_/_/þ/i/n/c(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c']
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/þ/i/n/c/h
					TRYING: þ
					> version: _/þ/i/n/c/h
					TRYING: þ
					> version: _/þ/i/n/ch
					TRYING: þ
					> version: _/þ/i/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'ch']
				_/þ/i/n/c/h(ACACCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/ch(ACACC)
_/þ/i/n/ch(ACACC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/ch(AACACC)
_/_/þ/i/n/ch(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'ch']
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/þ/i/n/k
					TRYING: þ
					> version: _/þ/i/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k']
				_/þ/i/n/k(ACACC)
_/þ/i/n/k(ACACC)
_/_/þ/i/n/k(AACACC)
_/_/þ/i/n/k(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k']
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/þ/o/ð
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ð']
				_/þ/o/ð(ACVC)
_/_/þ/o/ð(AACVC)
				version split: ['_', 'þ', 'o', 'ð']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ð']
				version split: ['_', '_', 'þ', 'o', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/þ/o/g/h
					TRYING: þ
					> version: _/þ/o/gh
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'gh']
				_/þ/o/g/h(ACVCC)
_/þ/o/gh(ACVC)
_/_/þ/o/g/h(AACVCC)
_/_/þ/o/gh(AACVC)
				version split: ['_', 'þ', 'o', 'g', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'g', 'h']
				version split: ['_', 'þ', 'o', 'gh']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'gh']
				version split: ['_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/þ/o/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'h']
				_/þ/o/h(ACVC)
_/_/þ/o/h(AACVC)
				version split: ['_', 'þ', 'o', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'h']
				version split: ['_', '_', 'þ', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/þ/o/h/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'h', 'h']
				_/þ/o/h/h(ACVCC)
_/_/þ/o/h/h(AACVCC)
				version split: ['_', 'þ', 'o', 'h', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/þ/o/c/h
					TRYING: þ
					> version: _/þ/o/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ch']
				_/þ/o/c/h(ACVCC)
_/þ/o/ch(ACVC)
_/_/þ/o/c/h(AACVCC)
_/_/þ/o/ch(AACVC)
				version split: ['_', 'þ', 'o', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'c', 'h']
				version split: ['_', 'þ', 'o', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ch']
				version split: ['_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/þ/o/u
					TRYING: þ
					> version: _/þ/o/u
					TRYING: þ
					> version: _/þ/ou
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', 'þ', 'ou']
				_/þ/o/u(ACVA)
_/þ/o/u(ACVA)
_/þ/ou(ACV)
_/_/þ/o/u(AACVA)
_/_/þ/o/u(AACVA)
_/_/þ/ou(AACV)
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u']
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u']
				version split: ['_', 'þ', 'ou']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou']
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/þ/o/u/c
					TRYING: þ
					> version: _/þ/o/u/c
					TRYING: þ
					> version: _/þ/ou/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'c']
				_/þ/o/u/c(ACVAC)
_/þ/o/u/c(ACVAC)
_/þ/ou/c(ACVC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/ou/c(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'c']
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'c']
				version split: ['_', 'þ', 'ou', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'c']
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/þ/o/u/h
					TRYING: þ
					> version: _/þ/o/u/h
					TRYING: þ
					> version: _/þ/ou/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'h']
				_/þ/o/u/h(ACVAC)
_/þ/o/u/h(ACVAC)
_/þ/ou/h(ACVC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/ou/h(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h']
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h']
				version split: ['_', 'þ', 'ou', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: _/þ/o/u/h/t
					TRYING: þ
					> version: _/þ/o/u/h/t
					TRYING: þ
					> version: _/þ/ou/h/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'h', 't']
				_/þ/o/u/h/t(ACVACC)
_/þ/o/u/h/t(ACVACC)
_/þ/ou/h/t(ACVCC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/ou/h/t(AACVCC)
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', 'þ', 'ou', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/þ/o/u/s
					TRYING: þ
					> version: _/þ/o/u/s
					TRYING: þ
					> version: _/þ/ou/s
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 's']
				_/þ/o/u/s(ACVAC)
_/þ/o/u/s(ACVAC)
_/þ/ou/s(ACVC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/ou/s(AACVC)
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 's']
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 's']
				version split: ['_', 'þ', 'ou', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 's']
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/þ/o/u/t/h
					TRYING: þ
					> version: _/þ/o/u/t/h
					TRYING: þ
					> version: _/þ/o/u/th
					TRYING: þ
					> version: _/þ/o/u/th
					TRYING: þ
					> version: _/þ/ou/t/h
					TRYING: þ
					> version: _/þ/ou/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'th']
				_/þ/o/u/t/h(ACVACC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/th(ACVAC)
_/þ/o/u/th(ACVAC)
_/þ/ou/t/h(ACVCC)
_/þ/ou/th(ACVC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/ou/t/h(AACVCC)
_/_/þ/ou/th(AACVC)
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'th']
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'th']
				version split: ['_', 'þ', 'ou', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 't', 'h']
				version split: ['_', 'þ', 'ou', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'th']
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/þ/o/u/ȝ
					TRYING: þ
					> version: _/þ/o/u/ȝ
					TRYING: þ
					> version: _/þ/ou/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'ȝ']
				_/þ/o/u/ȝ(ACVAC)
_/þ/o/u/ȝ(ACVAC)
_/þ/ou/ȝ(ACVC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/ou/ȝ(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', 'þ', 'ou', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/þ/o/w/t/h
					TRYING: þ
					> version: _/þ/o/w/th
					TRYING: þ
					> version: _/þ/ow/t/h
					TRYING: þ
					> version: _/þ/ow/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ow', 'th']
				_/þ/o/w/t/h(ACVCCC)
_/þ/o/w/th(ACVCC)
_/þ/ow/t/h(ACVCC)
_/þ/ow/th(ACVC)
_/_/þ/o/w/t/h(AACVCCC)
_/_/þ/o/w/th(AACVCC)
_/_/þ/ow/t/h(AACVCC)
_/_/þ/ow/th(AACVC)
				version split: ['_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', 'þ', 'o', 'w', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'w', 'th']
				version split: ['_', 'þ', 'ow', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ow', 't', 'h']
				version split: ['_', 'þ', 'ow', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ow', 'th']
				version split: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ow', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/þ/o/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ȝ']
				_/þ/o/ȝ(ACVC)
_/_/þ/o/ȝ(AACVC)
				version split: ['_', 'þ', 'o', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/þ/u/n
					TRYING: þ
					> version: _/þ/u/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n']
				_/þ/u/n(ACAC)
_/þ/u/n(ACAC)
_/_/þ/u/n(AACAC)
_/_/þ/u/n(AACAC)
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n']
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n']
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/þ/u/n/c/h
					TRYING: þ
					> version: _/þ/u/n/c/h
					TRYING: þ
					> version: _/þ/u/n/ch
					TRYING: þ
					> version: _/þ/u/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'ch']
				_/þ/u/n/c/h(ACACCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/ch(ACACC)
_/þ/u/n/ch(ACACC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/ch(AACACC)
_/_/þ/u/n/ch(AACACC)
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'ch']
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/þ/y/n/k
					TRYING: þ
					> version: _/þ/y/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'y', 'n', 'k']
				_/þ/y/n/k(ACACC)
_/þ/y/n/k(ACACC)
_/_/þ/y/n/k(AACACC)
_/_/þ/y/n/k(AACACC)
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'y', 'n', 'k']
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCV : 2___
				ANALYSING: ðenke
				adding littera based on matching pattern
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenge
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: þenke
				adding littera based on matching pattern
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: þinke
				adding littera based on matching pattern
				ANALYSING: zenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> ð, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n']
				_/_/ð/e/n(AACVC)
_/_/_/ð/e/n(AAACVC)
				version split: ['_', '_', 'ð', 'e', 'n']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/ð/e/n/c
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/ð/e/n/c(AACVCC)
_/_/_/ð/e/n/c(AAACVCC)
				version split: ['_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/_/ð/e/n/c/h
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/e/n/ch
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/ð/e/n/c/h(AACVCCC)
_/_/ð/e/n/ch(AACVCC)
_/_/_/ð/e/n/c/h(AAACVCCC)
_/_/_/ð/e/n/ch(AAACVCC)
				version split: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/ð/h/e/n/k
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/ð/h/e/n/k(AACCVCC)
_/_/_/ð/h/e/n/k(AAACCVCC)
				version split: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/ð/h/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/ð/h/o/g(AACCVC)
_/_/_/ð/h/o/g(AAACCVC)
				version split: ['_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'ng']
				_/_/ð/i/n/g(AACACC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/ng(AACAC)
_/_/ð/i/ng(AACAC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/ð/i/ng(AAACAC)
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/_/ð/o/d
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'd']
				_/_/ð/o/d(AACVC)
_/_/_/ð/o/d(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'd']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/_/ð/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'g']
				_/_/ð/o/g(AACVC)
_/_/_/ð/o/g(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/ð/o/h
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'h']
				_/_/ð/o/h(AACVC)
_/_/_/ð/o/h(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'h']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/ð/o/ƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/oƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/ð/o/ƿ/g(AACVCC)
_/_/ð/oƿ/g(AACVC)
_/_/_/ð/o/ƿ/g(AAACVCC)
_/_/_/ð/oƿ/g(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: s
					RESULT:  ['s']
				version split: ['_', 'e', 's']
				{'string': '_/e/s', 'rgx': '((_))/((e))/((s))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((s))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'n', 'k']
				_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', 'th', 'o']
				_/_/t/h/o(AACCV)
_/_/th/o(AACV)
_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o']
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o']
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'gh']
				_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'h']
				_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'gh']
				_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'o', 'h']
				_/_/t/o/h(AACVC)
_/_/_/t/o/h(AAACVC)
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/_/þ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ']
				_/_/þ(AAC)
_/_/_/þ(AAAC)
				version split: ['_', '_', 'þ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ']
				version split: ['_', '_', '_', 'þ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ei/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/þ/e/i/n/k(AACVACC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/ei/n/k(AACVCC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/ei/n/k(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/_/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n']
				_/_/þ/e/n(AACVC)
_/_/_/þ/e/n(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/_/þ/e/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/þ/e/n/c(AACVCC)
_/_/_/þ/e/n/c(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/_/þ/e/n/g
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/ng
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'ng']
				_/_/þ/e/n/g(AACVCC)
_/_/þ/e/ng(AACVC)
_/_/_/þ/e/n/g(AAACVCC)
_/_/_/þ/e/ng(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/_/þ/e/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/þ/e/n/c/h(AACVCCC)
_/_/þ/e/n/ch(AACVCC)
_/_/_/þ/e/n/c/h(AAACVCCC)
_/_/_/þ/e/n/ch(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/_/þ/e/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/þ/e/n/k(AACVCC)
_/_/_/þ/e/n/k(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/þ/e/o/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/eo/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'eo', 'h']
				_/_/þ/e/o/h(AACVVC)
_/_/þ/eo/h(AACVC)
_/_/_/þ/e/o/h(AAACVVC)
_/_/_/þ/eo/h(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/þ/i/n/c(AACACC)
_/_/þ/i/n/c(AACACC)
_/_/_/þ/i/n/c(AAACACC)
_/_/_/þ/i/n/c(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, s, _
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, s, _
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, s, _
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/ch(AACACC)
_/_/þ/i/n/ch(AACACC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/þ/i/n/ch(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/þ/i/n/k(AACACC)
_/_/þ/i/n/k(AACACC)
_/_/_/þ/i/n/k(AAACACC)
_/_/_/þ/i/n/k(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/_/þ/o/ð
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ð']
				_/_/þ/o/ð(AACVC)
_/_/_/þ/o/ð(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/_/þ/o/g/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/gh
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'gh']
				_/_/þ/o/g/h(AACVCC)
_/_/þ/o/gh(AACVC)
_/_/_/þ/o/g/h(AAACVCC)
_/_/_/þ/o/gh(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/_/þ/o/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'h']
				_/_/þ/o/h(AACVC)
_/_/_/þ/o/h(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/_/þ/o/h/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/þ/o/h/h(AACVCC)
_/_/_/þ/o/h/h(AAACVCC)
				version split: ['_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/_/þ/o/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ch']
				_/_/þ/o/c/h(AACVCC)
_/_/þ/o/ch(AACVC)
_/_/_/þ/o/c/h(AAACVCC)
_/_/_/þ/o/ch(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou']
				_/_/þ/o/u(AACVA)
_/_/þ/o/u(AACVA)
_/_/þ/ou(AACV)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/ou(AAACV)
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', 'þ', 'ou']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'c']
				_/_/þ/o/u/c(AACVAC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/ou/c(AACVC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/ou/c(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'h']
				_/_/þ/o/u/h(AACVAC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/ou/h(AACVC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/ou/h(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					> version: _/y/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: _/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/þ/o/u/h/t(AACVACC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/ou/h/t(AACVCC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/ou/h/t(AAACVCC)
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 's']
				_/_/þ/o/u/s(AACVAC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/ou/s(AACVC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/ou/s(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', 'þ', 'ou', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'th']
				_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/ou/t/h(AACVCC)
_/_/þ/ou/th(AACVC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/ou/t/h(AAACVCC)
_/_/_/þ/ou/th(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/ou/ȝ(AACVC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/ou/ȝ(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/_/þ/o/w/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/w/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ow/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ow/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ow', 'th']
				_/_/þ/o/w/t/h(AACVCCC)
_/_/þ/o/w/th(AACVCC)
_/_/þ/ow/t/h(AACVCC)
_/_/þ/ow/th(AACVC)
_/_/_/þ/o/w/t/h(AAACVCCC)
_/_/_/þ/o/w/th(AAACVCC)
_/_/_/þ/ow/t/h(AAACVCC)
_/_/_/þ/ow/th(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/þ/o/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/þ/o/ȝ(AACVC)
_/_/_/þ/o/ȝ(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n']
				_/_/þ/u/n(AACAC)
_/_/þ/u/n(AACAC)
_/_/_/þ/u/n(AAACAC)
_/_/_/þ/u/n(AAACAC)
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/ch(AACACC)
_/_/þ/u/n/ch(AACACC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/þ/u/n/ch(AAACACC)
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/þ/y/n/k(AACACC)
_/_/þ/y/n/k(AACACC)
_/_/_/þ/y/n/k(AAACACC)
_/_/_/þ/y/n/k(AAACACC)
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCV : 3___
				ANALYSING: ðenke
				adding littera based on matching pattern
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenge
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: þenke
				adding littera based on matching pattern
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: þinke
				adding littera based on matching pattern
				ANALYSING: zenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/_/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n']
				_/_/_/ð/e/n(AAACVC)
_/_/_/_/ð/e/n(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/_/ð/e/n/c
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/_/ð/e/n/c(AAACVCC)
_/_/_/_/ð/e/n/c(AAAACVCC)
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/_/_/ð/e/n/c/h
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					> version: _/_/_/ð/e/n/ch
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/_/ð/e/n/c/h(AAACVCCC)
_/_/_/ð/e/n/ch(AAACVCC)
_/_/_/_/ð/e/n/c/h(AAAACVCCC)
_/_/_/_/ð/e/n/ch(AAAACVCC)
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/_/ð/h/e/n/k
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/_/ð/h/e/n/k(AAACCVCC)
_/_/_/_/ð/h/e/n/k(AAAACCVCC)
				version split: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/_/ð/h/o/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/_/ð/h/o/g(AAACCVC)
_/_/_/_/ð/h/o/g(AAAACCVC)
				version split: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/_/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					> version: _/_/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					> version: _/_/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					> version: _/_/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/ð/i/ng(AAAACAC)
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/_/_/ð/o/d
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'd']
				_/_/_/ð/o/d(AAACVC)
_/_/_/_/ð/o/d(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/_/_/ð/o/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'g']
				_/_/_/ð/o/g(AAACVC)
_/_/_/_/ð/o/g(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/_/ð/o/h
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'h']
				_/_/_/ð/o/h(AAACVC)
_/_/_/_/ð/o/h(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/_/ð/o/ƿ/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					> version: _/_/_/ð/oƿ/g
					TRYING: ð
					adding blocked set: C = C >> ck, ð, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/_/ð/o/ƿ/g(AAACVCC)
_/_/_/ð/oƿ/g(AAACVC)
_/_/_/_/ð/o/ƿ/g(AAAACVCC)
_/_/_/_/ð/oƿ/g(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's', '_']
				_/e/s(AVC)
_/e/s/_(AVCA)
				version split: ['_', 'e', 's']
				{'string': '_/e/s', 'rgx': '((_))/((e))/((s))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', 'e', 's', '_']
				{'string': '_/e/s/_', 'rgx': '((_))/((e))/((s))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', '_']
				_/_/s(AAC)
_/_/s/_(AACA)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((s))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', 's', '_']
				{'string': '_/_/s/_', 'rgx': '((_))/((_))/((s))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o']
				_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ck, g, _, th, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> ck, g, _, k, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/t/o/h(AAACVC)
_/_/_/_/t/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/_/_/þ
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ']
				_/_/_/þ(AAAC)
_/_/_/_/þ(AAAAC)
				version split: ['_', '_', '_', 'þ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ']
				version split: ['_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/_/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ei/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/ei/n/k(AAACVCC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/ei/n/k(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/_/_/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n']
				_/_/_/þ/e/n(AAACVC)
_/_/_/_/þ/e/n(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/_/_/þ/e/n/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/_/þ/e/n/c(AAACVCC)
_/_/_/_/þ/e/n/c(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/_/_/þ/e/n/g
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/e/ng
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				_/_/_/þ/e/n/g(AAACVCC)
_/_/_/þ/e/ng(AAACVC)
_/_/_/_/þ/e/n/g(AAAACVCC)
_/_/_/_/þ/e/ng(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/_/_/þ/e/n/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/e/n/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/_/þ/e/n/c/h(AAACVCCC)
_/_/_/þ/e/n/ch(AAACVCC)
_/_/_/_/þ/e/n/c/h(AAAACVCCC)
_/_/_/_/þ/e/n/ch(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/_/_/þ/e/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/_/þ/e/n/k(AAACVCC)
_/_/_/_/þ/e/n/k(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/_/þ/e/o/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/eo/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				_/_/_/þ/e/o/h(AAACVVC)
_/_/_/þ/eo/h(AAACVC)
_/_/_/_/þ/e/o/h(AAAACVVC)
_/_/_/_/þ/eo/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/_/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/_/þ/i/n/c(AAACACC)
_/_/_/þ/i/n/c(AAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, ck, g, _, k, ch
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, ck, g, _, k, ch
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, ck, g, _, k, ch
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, ck, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/_/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/þ/i/n/ch(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/_/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/_/þ/i/n/k(AAACACC)
_/_/_/þ/i/n/k(AAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/_/_/þ/o/ð
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				_/_/_/þ/o/ð(AAACVC)
_/_/_/_/þ/o/ð(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/_/_/þ/o/g/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/gh
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				_/_/_/þ/o/g/h(AAACVCC)
_/_/_/þ/o/gh(AAACVC)
_/_/_/_/þ/o/g/h(AAAACVCC)
_/_/_/_/þ/o/gh(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/_/_/þ/o/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'h']
				_/_/_/þ/o/h(AAACVC)
_/_/_/_/þ/o/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/o/h
					TRYING: o
					> version: _/y/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/_/_/þ/o/h/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/_/þ/o/h/h(AAACVCC)
_/_/_/_/þ/o/h/h(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/_/_/þ/o/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				_/_/_/þ/o/c/h(AAACVCC)
_/_/_/þ/o/ch(AAACVC)
_/_/_/_/þ/o/c/h(AAAACVCC)
_/_/_/_/þ/o/ch(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/_/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou']
				_/_/_/þ/o/u(AAACVA)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/ou(AAACV)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/ou(AAAACV)
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/_/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/c
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/ou/c(AAACVC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/ou/c(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/_/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/ou/h(AAACVC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/ou/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/ou/h
					TRYING: ou
					> version: _/y/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: _/_/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/h/t
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/ou/h/t(AAACVCC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/ou/h/t(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/_/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/s
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 's']
				_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/ou/s(AAACVC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/ou/s(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/_/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/t/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/th
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/ou/t/h(AAACVCC)
_/_/_/þ/ou/th(AAACVC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/ou/t/h(AAAACVCC)
_/_/_/_/þ/ou/th(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ou/ȝ
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/ou/ȝ(AAACVC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/ou/ȝ(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/_/_/þ/o/w/t/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/o/w/th
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ow/t/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/ow/th
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				_/_/_/þ/o/w/t/h(AAACVCCC)
_/_/_/þ/o/w/th(AAACVCC)
_/_/_/þ/ow/t/h(AAACVCC)
_/_/_/þ/ow/th(AAACVC)
_/_/_/_/þ/o/w/t/h(AAAACVCCC)
_/_/_/_/þ/o/w/th(AAAACVCC)
_/_/_/_/þ/ow/t/h(AAAACVCC)
_/_/_/_/þ/ow/th(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/_/þ/o/ȝ
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/_/þ/o/ȝ(AAACVC)
_/_/_/_/þ/o/ȝ(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/_/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n']
				_/_/_/þ/u/n(AAACAC)
_/_/_/þ/u/n(AAACAC)
_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/þ/u/n(AAAACAC)
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/_/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/þ/u/n/ch(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/_/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					> version: _/_/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> ck, þ, g, _, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/_/þ/y/n/k(AAACACC)
_/_/_/þ/y/n/k(AAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCV : 4___
				ANALYSING: ðenke
				adding littera based on matching pattern
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: þencke
				adding littera based on matching pattern
				ANALYSING: þenge
				adding littera based on matching pattern
				ANALYSING: þenche
				adding littera based on matching pattern
				ANALYSING: þenke
				adding littera based on matching pattern
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: þinke
				adding littera based on matching pattern
				ANALYSING: zenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/_/_/ð/e/n
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				_/_/_/_/ð/e/n(AAAACVC)
_/_/_/_/_/ð/e/n(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/_/_/ð/e/n/c
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/_/_/ð/e/n/c(AAAACVCC)
_/_/_/_/_/ð/e/n/c(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: _/_/_/_/ð/e/n/c/h
					TRYING: ð
					> version: _/_/_/_/ð/e/n/ch
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/_/_/ð/e/n/c/h(AAAACVCCC)
_/_/_/_/ð/e/n/ch(AAAACVCC)
_/_/_/_/_/ð/e/n/c/h(AAAAACVCCC)
_/_/_/_/_/ð/e/n/ch(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/_/_/ð/h/e/n/k
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/_/_/ð/h/e/n/k(AAAACCVCC)
_/_/_/_/_/ð/h/e/n/k(AAAAACCVCC)
				version split: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_/ð/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/_/_/ð/h/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/_/_/ð/h/o/g(AAAACCVC)
_/_/_/_/_/ð/h/o/g(AAAAACCVC)
				version split: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_/ð/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: _/_/_/_/ð/i/n/g
					TRYING: ð
					> version: _/_/_/_/ð/i/n/g
					TRYING: ð
					> version: _/_/_/_/ð/i/ng
					TRYING: ð
					> version: _/_/_/_/ð/i/ng
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/_/ð/i/n/g(AAAAACACC)
_/_/_/_/_/ð/i/n/g(AAAAACACC)
_/_/_/_/_/ð/i/ng(AAAAACAC)
_/_/_/_/_/ð/i/ng(AAAAACAC)
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: _/_/_/_/ð/o/d
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				_/_/_/_/ð/o/d(AAAACVC)
_/_/_/_/_/ð/o/d(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: _/_/_/_/ð/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				_/_/_/_/ð/o/g(AAAACVC)
_/_/_/_/_/ð/o/g(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/_/_/ð/o/h
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				_/_/_/_/ð/o/h(AAAACVC)
_/_/_/_/_/ð/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/_/_/ð/o/ƿ/g
					TRYING: ð
					> version: _/_/_/_/ð/oƿ/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/_/_/ð/o/ƿ/g(AAAACVCC)
_/_/_/_/ð/oƿ/g(AAAACVC)
_/_/_/_/_/ð/o/ƿ/g(AAAAACVCC)
_/_/_/_/_/ð/oƿ/g(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_/ð/oƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/s/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's', '_', '_']
				_/e/s/_(AVCA)
_/e/s/_/_(AVCAA)
				version split: ['_', 'e', 's', '_']
				{'string': '_/e/s/_', 'rgx': '((_))/((e))/((s))/((_))/((_))$'}
				_____REMOVING________['_', 'e', 's', '_']
				version split: ['_', 'e', 's', '_', '_']
				{'string': '_/e/s/_/_', 'rgx': '((_))/((e))/((s))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', '_', '_']
				_/_/s/_(AACA)
_/_/s/_/_(AACAA)
				version split: ['_', '_', 's', '_']
				{'string': '_/_/s/_', 'rgx': '((_))/((_))/((s))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', '_']
				version split: ['_', '_', 's', '_', '_']
				{'string': '_/_/s/_/_', 'rgx': '((_))/((_))/((s))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/_/t/h/n/k
					TRYING: t
					> version: _/_/_/_/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
_/_/_/_/_/t/h/n/k(AAAAACCCC)
_/_/_/_/_/th/n/k(AAAAACCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/th/n', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/_/t/h/o
					TRYING: t
					> version: _/_/_/_/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o']
				_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
_/_/_/_/_/t/h/o(AAAAACCV)
_/_/_/_/_/th/o(AAAAACV)
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/_/t/h/o/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/gh
					TRYING: t
					> version: _/_/_/_/th/o/g/h
					TRYING: th
					> version: _/_/_/_/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
_/_/_/_/_/t/h/o/g/h(AAAAACCVCC)
_/_/_/_/_/t/h/o/gh(AAAAACCVC)
_/_/_/_/_/th/o/g/h(AAAAACVCC)
_/_/_/_/_/th/o/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/_/t/h/o/h
					TRYING: t
					> version: _/_/_/_/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
_/_/_/_/_/t/h/o/h(AAAAACCVC)
_/_/_/_/_/th/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'h']
				ANALYSING: though
					resolving (12)
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/t/h/ou/g/h
					TRYING: t
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/t/h/ou/gh
					TRYING: t
					> version: _/_/_/_/th/ou/g/h
					TRYING: th
					> version: _/_/_/_/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/t/h/ou/g/h(AAAAACCVCC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/t/h/ou/gh(AAAAACCVC)
_/_/_/_/_/th/ou/g/h(AAAAACVCC)
_/_/_/_/_/th/ou/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/_/t/h/o/w/t/h
					TRYING: t
					> version: _/_/_/_/th/o/w/t/h
					TRYING: th
					> version: _/_/_/_/t/h/ow/t/h
					TRYING: t
					> version: _/_/_/_/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
_/_/_/_/_/t/h/o/w/t/h(AAAAACCVCCC)
_/_/_/_/_/th/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/t/h/ow/t/h(AAAAACCVCC)
_/_/_/_/_/th/ow/t/h(AAAAACVCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/th/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/t/o/h(AAAACVC)
_/_/_/_/_/t/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/t/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: _/_/_/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ']
				_/_/_/_/þ(AAAAC)
_/_/_/_/_/þ(AAAAAC)
				version split: ['_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ']
				version split: ['_', '_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ']
				ANALYSING: þeink
					resolving (3)
					> version: _/_/_/_/þ/e/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/e/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/ei/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/ei/n/k(AAAACVCC)
_/_/_/_/_/þ/e/i/n/k(AAAAACVACC)
_/_/_/_/_/þ/e/i/n/k(AAAAACVACC)
_/_/_/_/_/þ/ei/n/k(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_/þ/ei', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: _/_/_/_/þ/e/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				_/_/_/_/þ/e/n(AAAACVC)
_/_/_/_/_/þ/e/n(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: _/_/_/_/þ/e/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/_/_/þ/e/n/c(AAAACVCC)
_/_/_/_/_/þ/e/n/c(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				ANALYSING: þeng
					resolving (2)
					> version: _/_/_/_/þ/e/n/g
					TRYING: þ
					> version: _/_/_/_/þ/e/ng
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				_/_/_/_/þ/e/n/g(AAAACVCC)
_/_/_/_/þ/e/ng(AAAACVC)
_/_/_/_/_/þ/e/n/g(AAAAACVCC)
_/_/_/_/_/þ/e/ng(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				ANALYSING: þench
					resolving (2)
					> version: _/_/_/_/þ/e/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/e/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/_/_/þ/e/n/c/h(AAAACVCCC)
_/_/_/_/þ/e/n/ch(AAAACVCC)
_/_/_/_/_/þ/e/n/c/h(AAAAACVCCC)
_/_/_/_/_/þ/e/n/ch(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				ANALYSING: þenk
					resolving (1)
					> version: _/_/_/_/þ/e/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/_/_/þ/e/n/k(AAAACVCC)
_/_/_/_/_/þ/e/n/k(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/_/_/þ/e/o/h
					TRYING: þ
					> version: _/_/_/_/þ/eo/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				_/_/_/_/þ/e/o/h(AAAACVVC)
_/_/_/_/þ/eo/h(AAAACVC)
_/_/_/_/_/þ/e/o/h(AAAAACVVC)
_/_/_/_/_/þ/eo/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_/þ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: _/_/_/_/þ/i/n/c
					TRYING: þ
					> version: _/_/_/_/þ/i/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/_/þ/i/n/c(AAAAACACC)
_/_/_/_/_/þ/i/n/c(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/i/ng/e
					TRYING: i
					> version: _/y/_/_/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: _/_/_/_/þ/i/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/i/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/i/n/ch
					TRYING: þ
					> version: _/_/_/_/þ/i/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/_/þ/i/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/i/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/i/n/ch(AAAAACACC)
_/_/_/_/_/þ/i/n/ch(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: _/_/_/_/þ/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/i/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/_/þ/i/n/k(AAAAACACC)
_/_/_/_/_/þ/i/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				ANALYSING: þoð
					resolving (1)
					> version: _/_/_/_/þ/o/ð
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				_/_/_/_/þ/o/ð(AAAACVC)
_/_/_/_/_/þ/o/ð(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: _/_/_/_/þ/o/g/h
					TRYING: þ
					> version: _/_/_/_/þ/o/gh
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				_/_/_/_/þ/o/g/h(AAAACVCC)
_/_/_/_/þ/o/gh(AAAACVC)
_/_/_/_/_/þ/o/g/h(AAAAACVCC)
_/_/_/_/_/þ/o/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: _/_/_/_/þ/o/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				_/_/_/_/þ/o/h(AAAACVC)
_/_/_/_/_/þ/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/_/o/h
					TRYING: o
					> version: _/y/_/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: _/_/_/_/þ/o/h/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/_/_/þ/o/h/h(AAAACVCC)
_/_/_/_/_/þ/o/h/h(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: _/_/_/_/þ/o/c/h
					TRYING: þ
					> version: _/_/_/_/þ/o/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				_/_/_/_/þ/o/c/h(AAAACVCC)
_/_/_/_/þ/o/ch(AAAACVC)
_/_/_/_/_/þ/o/c/h(AAAAACVCC)
_/_/_/_/_/þ/o/ch(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				ANALYSING: þou
					resolving (3)
					> version: _/_/_/_/þ/o/u
					TRYING: þ
					> version: _/_/_/_/þ/o/u
					TRYING: þ
					> version: _/_/_/_/þ/ou
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou']
				_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/ou(AAAACV)
_/_/_/_/_/þ/o/u(AAAAACVA)
_/_/_/_/_/þ/o/u(AAAAACVA)
_/_/_/_/_/þ/ou(AAAAACV)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: _/_/_/_/þ/o/u/c
					TRYING: þ
					> version: _/_/_/_/þ/o/u/c
					TRYING: þ
					> version: _/_/_/_/þ/ou/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/ou/c(AAAACVC)
_/_/_/_/_/þ/o/u/c(AAAAACVAC)
_/_/_/_/_/þ/o/u/c(AAAAACVAC)
_/_/_/_/_/þ/ou/c(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: _/_/_/_/þ/o/u/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/h
					TRYING: þ
					> version: _/_/_/_/þ/ou/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/ou/h(AAAACVC)
_/_/_/_/_/þ/o/u/h(AAAAACVAC)
_/_/_/_/_/þ/o/u/h(AAAAACVAC)
_/_/_/_/_/þ/ou/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, _, ou, o
					> version: _/y/_/_/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, _, ou, o
					RESULT:  ['o']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((o))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: _/_/_/_/þ/o/u/h/t
					TRYING: þ
					> version: _/_/_/_/þ/o/u/h/t
					TRYING: þ
					> version: _/_/_/_/þ/ou/h/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/ou/h/t(AAAACVCC)
_/_/_/_/_/þ/o/u/h/t(AAAAACVACC)
_/_/_/_/_/þ/o/u/h/t(AAAAACVACC)
_/_/_/_/_/þ/ou/h/t(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: _/_/_/_/þ/o/u/s
					TRYING: þ
					> version: _/_/_/_/þ/o/u/s
					TRYING: þ
					> version: _/_/_/_/þ/ou/s
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/ou/s(AAAACVC)
_/_/_/_/_/þ/o/u/s(AAAAACVAC)
_/_/_/_/_/þ/o/u/s(AAAAACVAC)
_/_/_/_/_/þ/ou/s(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: _/_/_/_/þ/o/u/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/th
					TRYING: þ
					> version: _/_/_/_/þ/o/u/th
					TRYING: þ
					> version: _/_/_/_/þ/ou/t/h
					TRYING: þ
					> version: _/_/_/_/þ/ou/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/ou/t/h(AAAACVCC)
_/_/_/_/þ/ou/th(AAAACVC)
_/_/_/_/_/þ/o/u/t/h(AAAAACVACC)
_/_/_/_/_/þ/o/u/t/h(AAAAACVACC)
_/_/_/_/_/þ/o/u/th(AAAAACVAC)
_/_/_/_/_/þ/o/u/th(AAAAACVAC)
_/_/_/_/_/þ/ou/t/h(AAAAACVCC)
_/_/_/_/_/þ/ou/th(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/_/_/þ/o/u/ȝ
					TRYING: þ
					> version: _/_/_/_/þ/o/u/ȝ
					TRYING: þ
					> version: _/_/_/_/þ/ou/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/ou/ȝ(AAAACVC)
_/_/_/_/_/þ/o/u/ȝ(AAAAACVAC)
_/_/_/_/_/þ/o/u/ȝ(AAAAACVAC)
_/_/_/_/_/þ/ou/ȝ(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (4)
					> version: _/_/_/_/þ/o/w/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/w/th
					TRYING: þ
					> version: _/_/_/_/þ/ow/t/h
					TRYING: þ
					> version: _/_/_/_/þ/ow/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				_/_/_/_/þ/o/w/t/h(AAAACVCCC)
_/_/_/_/þ/o/w/th(AAAACVCC)
_/_/_/_/þ/ow/t/h(AAAACVCC)
_/_/_/_/þ/ow/th(AAAACVC)
_/_/_/_/_/þ/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/þ/o/w/th(AAAAACVCC)
_/_/_/_/_/þ/ow/t/h(AAAAACVCC)
_/_/_/_/_/þ/ow/th(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_/þ/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_/þ/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/_/_/þ/o/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/_/_/þ/o/ȝ(AAAACVC)
_/_/_/_/_/þ/o/ȝ(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: _/_/_/_/þ/u/n
					TRYING: þ
					> version: _/_/_/_/þ/u/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/_/þ/u/n(AAAAACAC)
_/_/_/_/_/þ/u/n(AAAAACAC)
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: _/_/_/_/þ/u/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/u/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/u/n/ch
					TRYING: þ
					> version: _/_/_/_/þ/u/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/_/þ/u/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/u/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/u/n/ch(AAAAACACC)
_/_/_/_/_/þ/u/n/ch(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: _/_/_/_/þ/y/n/k
					TRYING: þ
					> version: _/_/_/_/þ/y/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/_/þ/y/n/k(AAAAACACC)
_/_/_/_/_/þ/y/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/þ/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/þ/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', 'e', 's', '_', '_']
		only one version left: ['_', '_', 's', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ð', 'e', 'n', 'k', 'e']
		SPLIT: ['th', 'e', 'n', 'k', 'e']
		SPLIT: ['þ', 'e', 'n', 'ck', 'e']
		SPLIT: ['þ', 'e', 'n', 'g', 'e']
		SPLIT: ['þ', 'e', 'n', 'ch', 'e']
		SPLIT: ['þ', 'e', 'n', 'k', 'e']
		SPLIT: ['y', 'e', 'n', 'k', 'e']
		SPLIT: ['þ', 'i', 'n', 'k', 'e']
		SPLIT: ['z', 'e', 'n', 'k', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'e', 's', '_', '_']
		['_', 'e', 's', '_', '_']
		SPLIT: ['_', '_', 's', '_', '_']
		['_', '_', 's', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['i']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['o']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCV is INVALID
		[{'y', 'þ', 'ð', 'th', '_', 'z'}, {'ck', 'g', '_', 'k', 'ch'}]
		50
		OVERVIEW: version for pattern CVCCV
{'y', 'þ', 'ð', 'th', '_', 'z'}, {'ck', 'g', '_', 'k', 'ch'}
faulty splits: 50
[''][''][''][''][''] <-! ðen
[''][''][''][''][''] <-! ðenc
[''][''][''][''][''] <-! ðench
[''][''][''][''][''] <-! ðhenk
[''][''][''][''][''] <-! ðhog
[''][''][''][''][''] <-! ðing
[''][''][''][''][''] <-! ðod
[''][''][''][''][''] <-! ðog
[''][''][''][''][''] <-! ðoh
[''][''][''][''][''] <-! ðoƿg
[''][''][''][''][''] <-! think
[''][''][''][''][''] <-! thnk
[''][''][''][''][''] <-! tho
[''][''][''][''][''] <-! thogh
[''][''][''][''][''] <-! thoh
[''][''][''][''][''] <-! though
[''][''][''][''][''] <-! thowth
[''][''][''][''][''] <-! thynk
[''][''][''][''][''] <-! toh
[''][''][''][''][''] <-! þ
[''][''][''][''][''] <-! þeink
[''][''][''][''][''] <-! þen
[''][''][''][''][''] <-! þenc
[''][''][''][''][''] <-! þeng
[''][''][''][''][''] <-! þench
[''][''][''][''][''] <-! þenk
[''][''][''][''][''] <-! þeoh
[''][''][''][''][''] <-! þinc
['']['y']['']['']['i'] <-! yinge
[''][''][''][''][''] <-! þinch
[''][''][''][''][''] <-! þink
[''][''][''][''][''] <-! þoð
[''][''][''][''][''] <-! þogh
[''][''][''][''][''] <-! þoh
['']['y']['']['']['o'] <-! yoh
[''][''][''][''][''] <-! þohh
[''][''][''][''][''] <-! þoch
[''][''][''][''][''] <-! þou
[''][''][''][''][''] <-! þouc
[''][''][''][''][''] <-! þouh
['']['y']['']['']['o'] <-! youh
[''][''][''][''][''] <-! þouht
[''][''][''][''][''] <-! þous
[''][''][''][''][''] <-! þouth
[''][''][''][''][''] <-! þouȝ
[''][''][''][''][''] <-! þowth
[''][''][''][''][''] <-! þoȝ
[''][''][''][''][''] <-! þun
[''][''][''][''][''] <-! þunch
[''][''][''][''][''] <-! þynk
ð | e | n | k | e
th | e | n | k | e
þ | e | n | ck | e
þ | e | n | g | e
þ | e | n | ch | e
þ | e | n | k | e
y | e | n | k | e
þ | i | n | k | e
z | e | n | k | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
_ | e | s | _ | _
_ | _ | s | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['i']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['o']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 's', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z', 't'},{'y', 'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_', 'z'}
2 : {'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'ð', 'n'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'i', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'i', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'i', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'i', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'}
3 : {'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'i', 'ck', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'i', 'ck', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'i', 'ck', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'i', 'ck', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'th', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', 'k', 'ch'},{'ck', 'g', '_', 'k', 't', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'þ', 'g', '_', 'k', 'ch'},{'ck', 'ð', 'g', '_', 'k', 'ch'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CCVCCC
	Selection for pattern: CCVCCC completed
	Making a version for pattern: CCVCCC
			___CCVCCC : 0___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> ð, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					> version: th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					> version: t/h/i/n/k
					TRYING: t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					> version: t/h/o/gh
					TRYING: t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					> version: t/h/y/n/k
					TRYING: t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['t']
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCCC : 1___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n']
				ð/e/n(CVC)
ð/_/e/n(CAVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
ð/_/e/n/c(CAVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/_/e/n/k/e(CAVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'd']
				ð/o/d(CVC)
ð/_/o/d(CAVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g']
				ð/o/g(CVC)
ð/_/o/g(CAVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h']
				ð/o/h(CVC)
ð/_/o/h(CAVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 's']
				_/e/s(AVC)
_/_/e/s(AAVC)
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: h
					> version: t/h/i/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: h
					> version: t/h/o/gh
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: h
					> version: t/h/y/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h']
				t/o/h(CVC)
t/_/o/h(CAVC)
				version split: ['t', 'o', 'h']
				{'string': 't/o', 'rgx': '((t))/((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_', 'rgx': '((t))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n']
				þ/e/n(CVC)
þ/_/e/n(CAVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
þ/_/e/n/c(CAVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
þ/_/e/n/k(CAVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/_/e/n/k/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ð']
				þ/o/ð(CVC)
þ/_/o/ð(CAVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h']
				þ/o/h(CVC)
þ/_/o/h(CAVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
þ/_/o/h/h(CAVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					> version: þ/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					> version: þ/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ']
				þ/o/ȝ(CVC)
þ/_/o/ȝ(CAVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, y, h, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVCCC : 2___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: e
					> version: ð/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e', 'rgx': '((ð))/((h))/((e))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o', 'rgx': '((ð))/((h))/((o))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: o
					> version: ð/_/oƿ/g
					TRYING: oƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'oƿ', 'o'}
					RESULT:  ['oƿ', 'o']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e', 'rgx': '((t))/((h))/((e))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k']
				t/h/n/k(CCCC)
t/h/_/n/k(CCACC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h/n', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: o
					> version: t/h/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o', 'rgx': '((t))/((_))/((o))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> e, ei, _, oƿ, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: e
					> version: þ/_/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: e
					> version: þ/_/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: e
					> version: þ/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/e/o/h
					TRYING: e
					> version: þ/_/eo/h
					TRYING: eo
					adding blocked set: V = V >> e, _, oƿ, eo, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_/eo', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: o
					> version: þ/_/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: o
					> version: þ/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/ou/c
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/ou/h/t
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/ou/s
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/ou/t/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: þ/_/ou/th
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/o/w/t/h
					TRYING: o
					> version: þ/_/o/w/th
					TRYING: o
					> version: þ/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					> version: þ/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 't', 'h']
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVCCC : 3___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: n
					adding blocked set: C = C >> n, u, w
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n']
				ð/_/e/n(CAVC)
ð/_/e/_/n(CAVAC)
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n']
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c']
				ð/_/e/n/c(CAVCC)
ð/_/e/_/n/c(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					> version: ð/_/e/n/ch
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'ch']
				ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
ð/_/e/_/n/c/h(CAVACCC)
ð/_/e/_/n/ch(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				ð/_/e/n/k/e(CAVCCV)
ð/_/e/_/n/k/e(CAVACCV)
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/h/e/_/n/k(CCVACC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n', 'rgx': '((ð))/((h))/((e))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_', 'rgx': '((ð))/((h))/((e))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: g
					adding blocked set: C = C >> g, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', 'g']
				ð/h/o/g(CCVC)
ð/h/o/_/g(CCVAC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o/g', 'rgx': '((ð))/((h))/((o))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_', 'rgx': '((ð))/((h))/((o))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, u, w, _
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, u, w, _
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: d
					adding blocked set: C = C >> u, w, d, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'd']
				ð/_/o/d(CAVC)
ð/_/o/_/d(CAVAC)
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o/d', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'd']
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: g
					adding blocked set: C = C >> g, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'g']
				ð/_/o/g(CAVC)
ð/_/o/_/g(CAVAC)
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o/g', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g']
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o/h', 'rgx': '((ð))/((_))/((o))/((h))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: ƿ
					> version: ð/_/oƿ/g
					TRYING: g
					adding blocked set: C = C >> h, g, u, w, _
					RESULT:  ['ƿ']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o/ƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: s
					adding blocked set: C = C >> h, u, w, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', 's']
				_/_/e/s(AAVC)
_/_/e/_/s(AAVAC)
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e/s', 'rgx': '((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', 'e', 's']
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_', 'rgx': '((_))/((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, u, w, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
t/h/e/_/n/k/e(CCVACCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e/n', 'rgx': '((t))/((h))/((e))/((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_', 'rgx': '((t))/((h))/((e))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					> version: t/h/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', 'i', 'n', 'k']
				t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/i/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'n', 'k']
				t/h/_/n/k(CCACC)
t/h/_/_/n/k(CCAACC)
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_']
				t/h/o(CCV)
t/h/o/_(CCVA)
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, u, w, _, ƿ
					> version: t/h/o/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'g', 'h']
				adding dashed alternative: ['t', 'h', 'o', '_', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
t/h/o/_/g/h(CCVACC)
t/h/o/_/gh(CCVAC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o/gh', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o/h', 'rgx': '((t))/((h))/((o))/((h))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, h, u, w, _, ƿ
					> version: t/h/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', 'y', 'n', 'k']
				t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/y/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o/h', 'rgx': '((t))/((_))/((o))/((h))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					> version: þ/_/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/i/n/k(CAVAACC)
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n']
				þ/_/e/n(CAVC)
þ/_/e/_/n(CAVAC)
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n']
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c']
				þ/_/e/n/c(CAVCC)
þ/_/e/_/n/c(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/_/e/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
þ/_/e/_/n/c/k/e(CAVACCCV)
þ/_/e/_/n/ck/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/_/e/ng
					TRYING: ng
					adding blocked set: C = C >> h, u, w, _, ƿ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng']
				þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g']
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng']
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/_/e/ng/e
					TRYING: ng
					adding blocked set: C = C >> h, u, w, _, ƿ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng', 'e']
				þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/_/e/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch']
				þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
þ/_/e/_/n/c/h(CAVACCC)
þ/_/e/_/n/ch(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/_/e/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
þ/_/e/_/n/c/h/e(CAVACCCV)
þ/_/e/_/n/ch/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k']
				þ/_/e/n/k(CAVCC)
þ/_/e/_/n/k(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				þ/_/e/n/k/e(CAVCCV)
þ/_/e/_/n/k/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: _/y/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'o', 'h']
				þ/_/e/o/h(CAVVC)
þ/_/e/_/o/h(CAVAVC)
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', 'h']
				version split: ['þ', '_', 'e', '_', 'o', 'h']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: ð
					adding blocked set: C = C >> h, ð, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ð']
				þ/_/o/ð(CAVC)
þ/_/o/_/ð(CAVAC)
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o/ð', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ð']
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, u, w, _, ƿ
					> version: þ/_/o/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'gh']
				þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
þ/_/o/_/g/h(CAVACC)
þ/_/o/_/gh(CAVAC)
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'g', 'h']
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o/gh', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'gh']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((h))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: h
					> version: _/y/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((h))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((h))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((h))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> h, u, w, _, ƿ, c
					> version: þ/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> h, u, w, _, ƿ, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ch']
				þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o/c', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'c', 'h']
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o/ch', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/ou
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/ou/c
					TRYING: c
					adding blocked set: C = C >> h, u, w, _, ƿ, c
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/ou/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'h'}
					RESULT:  ['u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/ou/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'h'}
					> version: _/y/ou/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'h'}
					RESULT:  ['u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/ou/h/t
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'h'}
					RESULT:  ['u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/ou/s
					TRYING: s
					adding blocked set: C = C >> h, u, w, _, ƿ, s
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/ou/t/h
					TRYING: t
					adding blocked set: C = C >> h, u, w, _, ƿ, t
					> version: þ/_/ou/th
					TRYING: th
					adding blocked set: C = C >> h, u, w, _, th, ƿ
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 't', 'h']
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/ou/ȝ
					TRYING: ȝ
					>>> MULTIPLE RESOLVE OPTIONS: {'ȝ', 'u'}
					RESULT:  ['ȝ', 'u']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/t/h
					TRYING: w
					> version: þ/_/o/w/th
					TRYING: w
					RESULT:  ['w']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((w))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((w))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o/ȝ', 'rgx': '((þ))/((_))/((o))/((ȝ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: u
					> version: þ/_/_/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ, ȝ
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, u, w, _, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, u, w, _, ƿ, ȝ, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVCCC : 4___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/_/n
					TRYING: n
					adding blocked set: C = C >> g, n, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n']
				ð/_/e/_/n(CAVAC)
ð/_/e/_/_/n(CAVAAC)
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n']
				version split: ['ð', '_', 'e', '_', '_', 'n']
				{'string': 'ð/_/e/_/_', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'c']
				ð/_/e/_/n/c(CAVACC)
ð/_/e/_/_/n/c(CAVAACC)
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'c']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/_/e/_/_', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: ð/_/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'ch']
				ð/_/e/_/n/c/h(CAVACCC)
ð/_/e/_/n/ch(CAVACC)
ð/_/e/_/_/n/c/h(CAVAACCC)
ð/_/e/_/_/n/ch(CAVAACC)
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/_', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				version split: ['ð', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/_', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				ð/_/e/_/n/k/e(CAVACCV)
ð/_/e/_/_/n/k/e(CAVAACCV)
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/_', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', '_', 'n', 'k']
				ð/h/e/_/n/k(CCVACC)
ð/h/e/_/_/n/k(CCVAACC)
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_/n', 'rgx': '((ð))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', '_', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', '_', 'n', 'k']
				{'string': 'ð/h/e/_/_', 'rgx': '((ð))/((h))/((e))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/_/g
					TRYING: g
					adding blocked set: C = C >> g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', '_', 'g']
				ð/h/o/_/g(CCVAC)
ð/h/o/_/_/g(CCVAAC)
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', '_', 'g']
				version split: ['ð', 'h', 'o', '_', '_', 'g']
				{'string': 'ð/h/o/_/_', 'rgx': '((ð))/((h))/((o))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, _, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/d
					TRYING: d
					adding blocked set: C = C >> g, _, t, d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'd']
				ð/_/o/_/d(CAVAC)
ð/_/o/_/_/d(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/_/g
					TRYING: g
					adding blocked set: C = C >> g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'g']
				ð/_/o/_/g(CAVAC)
ð/_/o/_/_/g(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'g']
				version split: ['ð', '_', 'o', '_', '_', 'g']
				{'string': 'ð/_/o/_/_', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h', '_']
				ð/_/o/h(CAVC)
ð/_/o/h/_(CAVCA)
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o/h', 'rgx': '((ð))/((_))/((o))/((h))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h']
				version split: ['ð', '_', 'o', 'h', '_']
				{'string': 'ð/_/o/h/_', 'rgx': '((ð))/((_))/((o))/((h))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/_/o/ƿ/g
					TRYING: g
					adding blocked set: C = C >> g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', '_', 'g']
				ð/_/o/ƿ/g(CAVCC)
ð/_/o/ƿ/_/g(CAVCAC)
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o/ƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', '_', 'g']
				{'string': 'ð/_/o/ƿ/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/s
					TRYING: s
					adding blocked set: C = C >> g, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', 's']
				_/_/e/_/s(AAVAC)
_/_/e/_/_/s(AAVAAC)
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', 's']
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> g, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				t/h/e/_/n/k/e(CCVACCV)
t/h/e/_/_/n/k/e(CCVAACCV)
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/n', 'rgx': '((t))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'e', '_', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/_', 'rgx': '((t))/((h))/((e))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					> version: t/h/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/_/i/n/k(CCAAAACC)
t/h/_/_/_/i/n/k(CCAAAACC)
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'n', 'k']
				t/h/_/_/n/k(CCAACC)
t/h/_/_/_/n/k(CCAAACC)
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/n', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_']
				t/h/o/_(CCVA)
t/h/o/_/_(CCVAA)
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_']
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> g, _, t
					> version: t/h/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> g, gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'gh']
				t/h/o/_/g/h(CCVACC)
t/h/o/_/gh(CCVAC)
t/h/o/_/_/g/h(CCVAACC)
t/h/o/_/_/gh(CCVAAC)
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_/g', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'g', 'h']
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_/gh', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'gh']
				version split: ['t', 'h', 'o', '_', '_', 'g', 'h']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				version split: ['t', 'h', 'o', '_', '_', 'gh']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', 'h', '_']
				t/h/o/h(CCVC)
t/h/o/h/_(CCVCA)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o/h', 'rgx': '((t))/((h))/((o))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['t', 'h', 'o', 'h', '_']
				{'string': 't/h/o/h/_', 'rgx': '((t))/((h))/((o))/((h))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> g, y, _, t
					> version: t/h/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> g, y, _, t
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/_/y/n/k(CCAAAACC)
t/h/_/_/_/y/n/k(CCAAAACC)
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h', '_']
				t/_/o/h(CAVC)
t/_/o/h/_(CAVCA)
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o/h', 'rgx': '((t))/((_))/((o))/((h))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h']
				version split: ['t', '_', 'o', 'h', '_']
				{'string': 't/_/o/h/_', 'rgx': '((t))/((_))/((o))/((h))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					> version: þ/_/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/_/i/n/k(CAVAAACC)
þ/_/e/_/_/i/n/k(CAVAAACC)
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/_/n
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n']
				þ/_/e/_/n(CAVAC)
þ/_/e/_/_/n(CAVAAC)
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n']
				version split: ['þ', '_', 'e', '_', '_', 'n']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c']
				þ/_/e/_/n/c(CAVACC)
þ/_/e/_/_/n/c(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/e/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				þ/_/e/_/n/c/k/e(CAVACCCV)
þ/_/e/_/n/ck/e(CAVACCV)
þ/_/e/_/_/n/c/k/e(CAVAACCCV)
þ/_/e/_/_/n/ck/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/e/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'ng']
				þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
þ/_/e/_/_/n/g(CAVAACC)
þ/_/e/_/_/ng(CAVAAC)
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'ng']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/e/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> g, ng, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'ng', 'e']
				þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
þ/_/e/_/_/n/g/e(CAVAACCV)
þ/_/e/_/_/ng/e(CAVAACV)
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ch']
				þ/_/e/_/n/c/h(CAVACCC)
þ/_/e/_/n/ch(CAVACC)
þ/_/e/_/_/n/c/h(CAVAACCC)
þ/_/e/_/_/n/ch(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/e/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				þ/_/e/_/n/c/h/e(CAVACCCV)
þ/_/e/_/n/ch/e(CAVACCV)
þ/_/e/_/_/n/c/h/e(CAVAACCCV)
þ/_/e/_/_/n/ch/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'k']
				þ/_/e/_/n/k(CAVACC)
þ/_/e/_/_/n/k(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				þ/_/e/_/n/k/e(CAVACCV)
þ/_/e/_/_/n/k/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'o', 'h']
				þ/_/e/_/o/h(CAVAVC)
þ/_/e/_/_/o/h(CAVAAVC)
				version split: ['þ', '_', 'e', '_', 'o', 'h']
				{'string': 'þ/_/e/_/o', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'o', 'h']
				version split: ['þ', '_', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/n/ch(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> ð, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ð']
				þ/_/o/_/ð(CAVAC)
þ/_/o/_/_/ð(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ð']
				version split: ['þ', '_', 'o', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> g, _, t
					> version: þ/_/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> g, gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'gh']
				þ/_/o/_/g/h(CAVACC)
þ/_/o/_/gh(CAVAC)
þ/_/o/_/_/g/h(CAVAACC)
þ/_/o/_/_/gh(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_/g', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'g', 'h']
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_/gh', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'gh']
				version split: ['þ', '_', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'gh']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', '_']
				þ/_/o/h(CAVC)
þ/_/o/h/_(CAVCA)
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h']
				version split: ['þ', '_', 'o', 'h', '_']
				{'string': 'þ/_/o/h/_', 'rgx': '((þ))/((_))/((o))/((h))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					> version: _/y/o/h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h', '_']
				adding dashed alternative: ['_', 'y', 'o', 'h', '_']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/o/h/_(AAVCA)
_/y/o/h/_(AAVCA)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h', '_']
				{'string': '_/y/o/h/_', 'rgx': '((_))/((y))/((o))/((h))/((_))$'}
				version split: ['_', 'y', 'o', 'h', '_']
				{'string': '_/y/o/h/_', 'rgx': '((_))/((y))/((o))/((h))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', '_', 'h']
				þ/_/o/h/h(CAVCC)
þ/_/o/h/_/h(CAVCAC)
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o/h/h', 'rgx': '((þ))/((_))/((o))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', '_', 'h']
				{'string': 'þ/_/o/h/_', 'rgx': '((þ))/((_))/((o))/((h))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> g, c, _, t
					> version: þ/_/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> g, _, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ch']
				þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
þ/_/o/_/_/c/h(CAVAACC)
þ/_/o/_/_/ch(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_/c', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ch']
				version split: ['þ', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'ch']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/_/o/u
					> version: þ/_/o/u
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/o/u/_(CAVAA)
þ/_/o/u/_(CAVAA)
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> g, c, _, t
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> g, c, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/_/c(CAVAAC)
þ/_/o/u/_/c(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: þ/_/ou/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h', '_']
				þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
þ/_/o/u/_/h(CAVAAC)
þ/_/o/u/_/h(CAVAAC)
þ/_/ou/h/_(CAVCA)
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', '_']
				{'string': 'þ/_/ou/h/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: _/y/ou/h
					> version: _/y/ou/h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h', '_']
				adding dashed alternative: ['_', 'y', 'ou', 'h', '_']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/o/u/_/h(AAVAAC)
_/y/o/u/_/h(AAVAAC)
_/y/ou/h/_(AAVCA)
_/y/ou/h/_(AAVCA)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['_', 'y', 'ou', 'h', '_']
				{'string': '_/y/ou/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['_', 'y', 'ou', 'h', '_']
				{'string': '_/y/ou/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> g, _, t, h
					> version: þ/_/ou/h/t
					TRYING: t
					adding blocked set: C = C >> g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', '_', 't']
				þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
þ/_/o/u/_/h/t(CAVAACC)
þ/_/o/u/_/h/t(CAVAACC)
þ/_/ou/h/_/t(CAVCAC)
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', '_', 't']
				{'string': 'þ/_/ou/h/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> g, _, t, s
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> g, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/_/s(CAVAAC)
þ/_/o/u/_/s(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> g, _, t
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> g, _, t
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> g, _, t, th
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> g, _, t, th
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/th(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> g, _, t, ȝ
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> g, _, t, ȝ
					> version: þ/_/ou/ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ', '_']
				þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
þ/_/o/u/_/ȝ(CAVAAC)
þ/_/o/u/_/ȝ(CAVAAC)
þ/_/ou/ȝ/_(CAVCA)
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ', '_']
				{'string': 'þ/_/ou/ȝ/_', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> g, _, t
					> version: þ/_/o/w/th
					TRYING: th
					adding blocked set: C = C >> g, _, t, th
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', '_', 'th']
				þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/o/w/_/t/h(CAVCACC)
þ/_/o/w/_/th(CAVCAC)
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o/w/t', 'rgx': '((þ))/((_))/((o))/((w))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o/w/th', 'rgx': '((þ))/((_))/((o))/((w))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 'th']
				version split: ['þ', '_', 'o', 'w', '_', 't', 'h']
				{'string': 'þ/_/o/w/_', 'rgx': '((þ))/((_))/((o))/((w))/((_))$'}
				version split: ['þ', '_', 'o', 'w', '_', 'th']
				{'string': 'þ/_/o/w/_', 'rgx': '((þ))/((_))/((o))/((w))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ', '_']
				þ/_/o/ȝ(CAVC)
þ/_/o/ȝ/_(CAVCA)
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o/ȝ', 'rgx': '((þ))/((_))/((o))/((ȝ))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ', '_']
				{'string': 'þ/_/o/ȝ/_', 'rgx': '((þ))/((_))/((o))/((ȝ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/_/u/n
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n']
				þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/_/n(CAAAAC)
þ/_/_/u/_/n(CAAAAC)
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/_/u/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/_/u/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/_/_/u/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/ch(CAAAACC)
þ/_/_/u/_/n/ch(CAAAACC)
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> g, _, t, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVCCC : 5___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', '_', 'n']
				ð/_/e/_/_/n(CAVAAC)
ð/_/e/_/_/_/n(CAVAAAC)
				version split: ['ð', '_', 'e', '_', '_', 'n']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n']
				version split: ['ð', '_', 'e', '_', '_', '_', 'n']
				{'string': 'ð/_/e/_/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', '_', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', '_', 'n', 'c']
				ð/_/e/_/_/n/c(CAVAACC)
ð/_/e/_/_/_/n/c(CAVAAACC)
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/_/e/_/_/n/c', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'c']
				version split: ['ð', '_', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'ð/_/e/_/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, _, h
					> version: ð/_/e/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', '_', 'n', 'ch']
				ð/_/e/_/_/n/c/h(CAVAACCC)
ð/_/e/_/_/n/ch(CAVAACC)
ð/_/e/_/_/_/n/c/h(CAVAAACCC)
ð/_/e/_/_/_/n/ch(CAVAAACC)
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/_/n/c', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/_/n/ch', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', '_', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', '_', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				ð/_/e/_/_/n/k/e(CAVAACCV)
ð/_/e/_/_/_/n/k/e(CAVAAACCV)
				version split: ['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/_/n/k', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', '_', '_', 'n', 'k']
				ð/h/e/_/_/n/k(CCVAACC)
ð/h/e/_/_/_/n/k(CCVAAACC)
				version split: ['ð', 'h', 'e', '_', '_', 'n', 'k']
				{'string': 'ð/h/e/_/_/n/k', 'rgx': '((ð))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', '_', '_', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', '_', '_', 'n', 'k']
				{'string': 'ð/h/e/_/_/_/n', 'rgx': '((ð))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', '_', '_', '_', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/_/_/g
					TRYING: g
					adding blocked set: C = C >> g, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', '_', '_', 'g']
				ð/h/o/_/_/g(CCVAAC)
ð/h/o/_/_/_/g(CCVAAAC)
				version split: ['ð', 'h', 'o', '_', '_', 'g']
				{'string': 'ð/h/o/_/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', '_', '_', 'g']
				version split: ['ð', 'h', 'o', '_', '_', '_', 'g']
				{'string': 'ð/h/o/_/_/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', '_', '_', '_', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, _, h
					> version: ð/i/_/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, _, h
					> version: ð/i/_/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, _, h
					> version: ð/i/_/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', '_', 'ng']
				ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/_/n/g(CAAAAACC)
ð/i/_/_/_/_/n/g(CAAAAACC)
ð/i/_/_/_/_/ng(CAAAAAC)
ð/i/_/_/_/_/ng(CAAAAAC)
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', '_', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/_/d
					TRYING: d
					adding blocked set: C = C >> _, d, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', '_', 'd']
				ð/_/o/_/_/d(CAVAAC)
ð/_/o/_/_/_/d(CAVAAAC)
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/_/_/g
					TRYING: g
					adding blocked set: C = C >> g, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', '_', 'g']
				ð/_/o/_/_/g(CAVAAC)
ð/_/o/_/_/_/g(CAVAAAC)
				version split: ['ð', '_', 'o', '_', '_', 'g']
				{'string': 'ð/_/o/_/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'g']
				version split: ['ð', '_', 'o', '_', '_', '_', 'g']
				{'string': 'ð/_/o/_/_/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', '_', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h', '_', '_']
				ð/_/o/h/_(CAVCA)
ð/_/o/h/_/_(CAVCAA)
				version split: ['ð', '_', 'o', 'h', '_']
				{'string': 'ð/_/o/h/_', 'rgx': '((ð))/((_))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h', '_']
				version split: ['ð', '_', 'o', 'h', '_', '_']
				{'string': 'ð/_/o/h/_/_', 'rgx': '((ð))/((_))/((o))/((h))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/_/o/ƿ/_/g
					TRYING: g
					adding blocked set: C = C >> g, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', '_', '_', 'g']
				ð/_/o/ƿ/_/g(CAVCAC)
ð/_/o/ƿ/_/_/g(CAVCAAC)
				version split: ['ð', '_', 'o', 'ƿ', '_', 'g']
				{'string': 'ð/_/o/ƿ/_/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', '_', 'g']
				version split: ['ð', '_', 'o', 'ƿ', '_', '_', 'g']
				{'string': 'ð/_/o/ƿ/_/_/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', '_', '_', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))/((s))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))/((s))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', '_', '_', 'n', 'k', 'e']
				t/h/e/_/_/n/k/e(CCVAACCV)
t/h/e/_/_/_/n/k/e(CCVAAACCV)
				version split: ['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/_/n/k', 'rgx': '((t))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/_/_/n', 'rgx': '((t))/((h))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: think
					resolving (2)
					> version: t/h/_/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					> version: t/h/_/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				t/h/_/_/_/i/n/k(CCAAAACC)
t/h/_/_/_/i/n/k(CCAAAACC)
t/h/_/_/_/_/i/n/k(CCAAAAACC)
t/h/_/_/_/_/i/n/k(CCAAAAACC)
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/i/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/i/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', '_', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', '_', 'n', 'k']
				t/h/_/_/_/n/k(CCAAACC)
t/h/_/_/_/_/n/k(CCAAAACC)
				version split: ['t', 'h', '_', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/_/n/k', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/_/_/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', '_', 'n', 'k']
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_']
				t/h/o/_/_(CCVAA)
t/h/o/_/_/_(CCVAAA)
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_']
				version split: ['t', 'h', 'o', '_', '_', '_']
				{'string': 't/h/o/_/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> g, _, s, h
					> version: t/h/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_', 'gh']
				t/h/o/_/_/g/h(CCVAACC)
t/h/o/_/_/gh(CCVAAC)
t/h/o/_/_/_/g/h(CCVAAACC)
t/h/o/_/_/_/gh(CCVAAAC)
				version split: ['t', 'h', 'o', '_', '_', 'g', 'h']
				{'string': 't/h/o/_/_/g/h', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'g', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'gh']
				{'string': 't/h/o/_/_/gh', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'gh']
				version split: ['t', 'h', 'o', '_', '_', '_', 'g', 'h']
				{'string': 't/h/o/_/_/_/g', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', '_', 'g', 'h']
				version split: ['t', 'h', 'o', '_', '_', '_', 'gh']
				{'string': 't/h/o/_/_/_/gh', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', '_', 'gh']
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', 'h', '_', '_']
				t/h/o/h/_(CCVCA)
t/h/o/h/_/_(CCVCAA)
				version split: ['t', 'h', 'o', 'h', '_']
				{'string': 't/h/o/h/_', 'rgx': '((t))/((h))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h', '_']
				version split: ['t', 'h', 'o', 'h', '_', '_']
				{'string': 't/h/o/h/_/_', 'rgx': '((t))/((h))/((o))/((h))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, _, s, h
					> version: t/h/_/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				t/h/_/_/_/y/n/k(CCAAAACC)
t/h/_/_/_/y/n/k(CCAAAACC)
t/h/_/_/_/_/y/n/k(CCAAAAACC)
t/h/_/_/_/_/y/n/k(CCAAAAACC)
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/y/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/y/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', '_', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h', '_', '_']
				t/_/o/h/_(CAVCA)
t/_/o/h/_/_(CAVCAA)
				version split: ['t', '_', 'o', 'h', '_']
				{'string': 't/_/o/h/_', 'rgx': '((t))/((_))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h', '_']
				version split: ['t', '_', 'o', 'h', '_', '_']
				{'string': 't/_/o/h/_/_', 'rgx': '((t))/((_))/((o))/((h))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', '_']
				þ/_/_/_/_(CAAAA)
þ/_/_/_/_/_(CAAAAA)
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					> version: þ/_/e/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				þ/_/e/_/_/i/n/k(CAVAAACC)
þ/_/e/_/_/i/n/k(CAVAAACC)
þ/_/e/_/_/_/i/n/k(CAVAAAACC)
þ/_/e/_/_/_/i/n/k(CAVAAAACC)
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/i/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/i/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'i', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n']
				þ/_/e/_/_/n(CAVAAC)
þ/_/e/_/_/_/n(CAVAAAC)
				version split: ['þ', '_', 'e', '_', '_', 'n']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'c']
				þ/_/e/_/_/n/c(CAVAACC)
þ/_/e/_/_/_/n/c(CAVAAACC)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/_/e/_/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/_/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/_/e/_/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'ck', 'e']
				þ/_/e/_/_/n/c/k/e(CAVAACCCV)
þ/_/e/_/_/n/ck/e(CAVAACCV)
þ/_/e/_/_/_/n/c/k/e(CAVAAACCCV)
þ/_/e/_/_/_/n/ck/e(CAVAAACCV)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/_/n/ck', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/_/e/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'ng']
				þ/_/e/_/_/n/g(CAVAACC)
þ/_/e/_/_/ng(CAVAAC)
þ/_/e/_/_/_/n/g(CAVAAACC)
þ/_/e/_/_/_/ng(CAVAAAC)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/_/e/_/_/n/g', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', '_', 'ng']
				{'string': 'þ/_/e/_/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'ng']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'g']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', '_', '_', 'ng']
				{'string': 'þ/_/e/_/_/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/_/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/_/e/_/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> ng, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'ng', 'e']
				þ/_/e/_/_/n/g/e(CAVAACCV)
þ/_/e/_/_/ng/e(CAVAACV)
þ/_/e/_/_/_/n/g/e(CAVAAACCV)
þ/_/e/_/_/_/ng/e(CAVAAACV)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/_/n/g', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/_/ng/e', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/_/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'ng', 'e']
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/_/e/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'ch']
				þ/_/e/_/_/n/c/h(CAVAACCC)
þ/_/e/_/_/n/ch(CAVAACC)
þ/_/e/_/_/_/n/c/h(CAVAAACCC)
þ/_/e/_/_/_/n/ch(CAVAAACC)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/_/n/ch', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'ch']
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/_/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/_/e/_/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'ch', 'e']
				þ/_/e/_/_/n/c/h/e(CAVAACCCV)
þ/_/e/_/_/n/ch/e(CAVAACCV)
þ/_/e/_/_/_/n/c/h/e(CAVAAACCCV)
þ/_/e/_/_/_/n/ch/e(CAVAAACCV)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/_/n/ch', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'k']
				þ/_/e/_/_/n/k(CAVAACC)
þ/_/e/_/_/_/n/k(CAVAAACC)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/_/e/_/_/n/k', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'k']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				þ/_/e/_/_/n/k/e(CAVAACCV)
þ/_/e/_/_/_/n/k/e(CAVAAACCV)
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/_/n/k', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: _/y/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				_/y/e/_/_/n/k/e(AAVAACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
_/y/e/_/_/_/n/k/e(AAVAAACCV)
_/y/e/_/_/_/n/k/e(AAVAAACCV)
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', '_', 'o', 'h']
				þ/_/e/_/_/o/h(CAVAAVC)
þ/_/e/_/_/_/o/h(CAVAAAVC)
				version split: ['þ', '_', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/_/e/_/_/o/h', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'o', 'h']
				version split: ['þ', '_', 'e', '_', '_', '_', 'o', 'h']
				{'string': 'þ/_/e/_/_/_/o', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', '_', 'o', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/_/n/c(CAAAAACC)
þ/i/_/_/_/_/n/c(CAAAAACC)
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/_/i/n/g/e(AAAAAAACCV)
_/y/_/_/_/_/i/n/g/e(AAAAAAACCV)
_/y/_/_/_/_/i/ng/e(AAAAAAACV)
_/y/_/_/_/_/i/ng/e(AAAAAAACV)
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/_/n/c/h(CAAAAACCC)
þ/i/_/_/_/_/n/c/h(CAAAAACCC)
þ/i/_/_/_/_/n/ch(CAAAAACC)
þ/i/_/_/_/_/n/ch(CAAAAACC)
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/_/n/k(CAAAAACC)
þ/i/_/_/_/_/n/k(CAAAAACC)
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					> version: þ/i/_/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/_/n/k/e(CAAAAACCV)
þ/i/_/_/_/_/n/k/e(CAAAAACCV)
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/_/ð
					TRYING: ð
					adding blocked set: C = C >> ð, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'ð']
				þ/_/o/_/_/ð(CAVAAC)
þ/_/o/_/_/_/ð(CAVAAAC)
				version split: ['þ', '_', 'o', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ð']
				version split: ['þ', '_', 'o', '_', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> g, _, s, h
					> version: þ/_/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'gh']
				þ/_/o/_/_/g/h(CAVAACC)
þ/_/o/_/_/gh(CAVAAC)
þ/_/o/_/_/_/g/h(CAVAAACC)
þ/_/o/_/_/_/gh(CAVAAAC)
				version split: ['þ', '_', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/_/o/_/_/g/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'g', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'gh']
				{'string': 'þ/_/o/_/_/gh', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'gh']
				version split: ['þ', '_', 'o', '_', '_', '_', 'g', 'h']
				{'string': 'þ/_/o/_/_/_/g', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'g', 'h']
				version split: ['þ', '_', 'o', '_', '_', '_', 'gh']
				{'string': 'þ/_/o/_/_/_/gh', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', '_', '_']
				þ/_/o/h/_(CAVCA)
þ/_/o/h/_/_(CAVCAA)
				version split: ['þ', '_', 'o', 'h', '_']
				{'string': 'þ/_/o/h/_', 'rgx': '((þ))/((_))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', '_']
				version split: ['þ', '_', 'o', 'h', '_', '_']
				{'string': 'þ/_/o/h/_/_', 'rgx': '((þ))/((_))/((o))/((h))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h/_
					> version: _/y/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h', '_', '_']
				adding dashed alternative: ['_', 'y', 'o', 'h', '_', '_']
				_/y/o/h/_(AAVCA)
_/y/o/h/_(AAVCA)
_/y/o/h/_/_(AAVCAA)
_/y/o/h/_/_(AAVCAA)
				version split: ['_', 'y', 'o', 'h', '_']
				{'string': '_/y/o/h/_', 'rgx': '((_))/((y))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h', '_']
				version split: ['_', 'y', 'o', 'h', '_']
				{'string': '_/y/o/h/_', 'rgx': '((_))/((y))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h', '_']
				version split: ['_', 'y', 'o', 'h', '_', '_']
				{'string': '_/y/o/h/_/_', 'rgx': '((_))/((y))/((o))/((h))/((_))/((_))$'}
				version split: ['_', 'y', 'o', 'h', '_', '_']
				{'string': '_/y/o/h/_/_', 'rgx': '((_))/((y))/((o))/((h))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'h', '_', 'h']
				{'string': 'þ/_/o/h/_/h', 'rgx': '((þ))/((_))/((o))/((h))/((_))/((h))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, s, h
					> version: þ/_/o/_/_/ch
					TRYING: ch
					RESULT:  ['ch']
				version split: ['þ', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/_/o/_/_/c/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((ch))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'ch']
				{'string': 'þ/_/o/_/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((ch))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/_/o/u/_
					> version: þ/_/o/u/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_']
				þ/_/o/u/_(CAVAA)
þ/_/o/u/_(CAVAA)
þ/_/o/u/_/_(CAVAAA)
þ/_/o/u/_/_(CAVAAA)
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_']
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_']
				version split: ['þ', '_', 'o', 'u', '_', '_']
				{'string': 'þ/_/o/u/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', '_']
				{'string': 'þ/_/o/u/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/_/o/u/_/c
					TRYING: c
					adding blocked set: C = C >> h, _, c, s, ch
					> version: þ/_/o/u/_/c
					TRYING: c
					adding blocked set: C = C >> h, _, c, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'c']
				þ/_/o/u/_/c(CAVAAC)
þ/_/o/u/_/c(CAVAAC)
þ/_/o/u/_/_/c(CAVAAAC)
þ/_/o/u/_/_/c(CAVAAAC)
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'c']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'c']
				{'string': 'þ/_/o/u/_/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'c']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'c']
				{'string': 'þ/_/o/u/_/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/_/h
					TRYING: h
					> version: þ/_/o/u/_/h
					TRYING: h
					> version: þ/_/ou/h/_
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				version split: ['þ', '_', 'ou', 'h', '_']
				{'string': 'þ/_/ou/h/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', '_']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/_/h
					TRYING: h
					> version: _/y/o/u/_/h
					TRYING: h
					> version: _/y/ou/h/_
					> version: _/y/ou/h/_
					RESULT:  ['h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				version split: ['_', 'y', 'ou', 'h', '_']
				{'string': '_/y/ou/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['_', 'y', 'ou', 'h', '_']
				version split: ['_', 'y', 'ou', 'h', '_']
				{'string': '_/y/ou/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['_', 'y', 'ou', 'h', '_']
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/_/h/t
					TRYING: h
					> version: þ/_/o/u/_/h/t
					TRYING: h
					> version: þ/_/ou/h/_/t
					TRYING: t
					adding blocked set: C = C >> h, _, s, t, ch
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				version split: ['þ', '_', 'ou', 'h', '_', 't']
				{'string': 'þ/_/ou/h/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u)|(h))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', '_', 't']
				ANALYSING: þous
					resolving (2)
					> version: þ/_/o/u/_/s
					TRYING: s
					> version: þ/_/o/u/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((s))$'}
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((s))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/_/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, _, s, t, ch
					> version: þ/_/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, _, s, t, ch
					> version: þ/_/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> h, th, _, s, ch
					> version: þ/_/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> h, th, _, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'th']
				þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/_/t/h(CAVAAACC)
þ/_/o/u/_/_/t/h(CAVAAACC)
þ/_/o/u/_/_/th(CAVAAAC)
þ/_/o/u/_/_/th(CAVAAAC)
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'th']
				{'string': 'þ/_/o/u/_/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'th']
				{'string': 'þ/_/o/u/_/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/_/ȝ
					TRYING: ȝ
					> version: þ/_/o/u/_/ȝ
					TRYING: ȝ
					> version: þ/_/ou/ȝ/_
					RESULT:  ['ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))/((ȝ))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))/((ȝ))$'}
				version split: ['þ', '_', 'ou', 'ȝ', '_']
				{'string': 'þ/_/ou/ȝ/_', 'rgx': '((þ))/((_))/((o)|(ou))/((ȝ)|(u))/((_))/((ȝ))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ', '_']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, _, ȝ, s, t, ch
					> version: þ/_/o/w/_/th
					TRYING: th
					adding blocked set: C = C >> h, _, th, ȝ, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', '_', '_', 'th']
				þ/_/o/w/_/t/h(CAVCACC)
þ/_/o/w/_/th(CAVCAC)
þ/_/o/w/_/_/t/h(CAVCAACC)
þ/_/o/w/_/_/th(CAVCAAC)
				version split: ['þ', '_', 'o', 'w', '_', 't', 'h']
				{'string': 'þ/_/o/w/_/t/h', 'rgx': '((þ))/((_))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'w', '_', 'th']
				{'string': 'þ/_/o/w/_/th', 'rgx': '((þ))/((_))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', '_', 'th']
				version split: ['þ', '_', 'o', 'w', '_', '_', 't', 'h']
				{'string': 'þ/_/o/w/_/_/t', 'rgx': '((þ))/((_))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', '_', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'w', '_', '_', 'th']
				{'string': 'þ/_/o/w/_/_/th', 'rgx': '((þ))/((_))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', '_', '_', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ', '_', '_']
				þ/_/o/ȝ/_(CAVCA)
þ/_/o/ȝ/_/_(CAVCAA)
				version split: ['þ', '_', 'o', 'ȝ', '_']
				{'string': 'þ/_/o/ȝ/_', 'rgx': '((þ))/((_))/((o))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ', '_']
				version split: ['þ', '_', 'o', 'ȝ', '_', '_']
				{'string': 'þ/_/o/ȝ/_/_', 'rgx': '((þ))/((_))/((o))/((ȝ))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					> version: þ/_/_/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n']
				þ/_/_/u/_/n(CAAAAC)
þ/_/_/u/_/n(CAAAAC)
þ/_/_/u/_/_/n(CAAAAAC)
þ/_/_/u/_/_/n(CAAAAAC)
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n']
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					> version: þ/_/_/u/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					> version: þ/_/_/u/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					> version: þ/_/_/u/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/ch(CAAAACC)
þ/_/_/u/_/n/ch(CAAAACC)
þ/_/_/u/_/_/n/c/h(CAAAAACCC)
þ/_/_/u/_/_/n/c/h(CAAAAACCC)
þ/_/_/u/_/_/n/ch(CAAAAACC)
þ/_/_/u/_/_/n/ch(CAAAAACC)
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/n/c', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/n/c', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', '_', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					> version: þ/y/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, ȝ, s, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/_/n/k(CAAAAACC)
þ/y/_/_/_/_/n/k(CAAAAACC)
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', '_', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, _, ȝ, s, z, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
_/_/_/_/_/_/z/e/n/k/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ð', '_', 'o', 'h', '_', '_']
		FAIL: 
		only one version left: ['_', '_', 'e', '_', '_', 's']
		only one version left: ['_', '_', '_', '_', '_', 's']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'h', 'o', '_', '_', '_']
		FAIL: 
		only one version left: ['t', 'h', 'o', 'h', '_', '_']
		FAIL: 
		only one version left: ['t', '_', 'o', 'h', '_', '_']
		only one version left: ['þ', '_', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', 'o', 'h', '_', '_']
		only one version left: ['_', 'y', 'o', 'h', '_', '_']
		only one version left: ['þ', '_', 'o', 'h', '_', 'h']
		only one version left: ['þ', '_', 'o', '_', '_', 'ch']
		only one version left: ['þ', '_', 'o', 'u', '_', '_']
		FAIL: 
		only one version left: ['þ', '_', 'o', 'u', '_', 'h']
		only one version left: ['_', 'y', 'o', 'u', '_', 'h']
		FAIL: 
		only one version left: ['þ', '_', 'o', 'u', '_', 's']
		FAIL: 
		only one version left: ['þ', '_', 'o', 'u', '_', 'ȝ']
		FAIL: 
		only one version left: ['þ', '_', 'o', 'ȝ', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'h', 'o', 'u', 'g', 'h']
		SPLIT: ['t', 'h', 'o', 'w', 't', 'h']
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['h']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['ð', '_', 'o', 'h', '_', '_']
		['ð', '_', 'o', 'h', '_', '_']
		SPLIT: ["['ð']", "['_']", "['oƿ', 'o']", "['ƿ']", "['_']", "['_']"]
		SPLIT: ['_', '_', 'e', '_', '_', 's']
		['_', '_', 'e', '_', '_', 's']
		SPLIT: ['_', '_', '_', '_', '_', 's']
		['_', '_', '_', '_', '_', 's']
		SPLIT: ["['t']", "['h']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['t', 'h', 'o', '_', '_', '_']
		['t', 'h', 'o', '_', '_', '_']
		SPLIT: ["['t']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['t', 'h', 'o', 'h', '_', '_']
		['t', 'h', 'o', 'h', '_', '_']
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['t', '_', 'o', 'h', '_', '_']
		['t', '_', 'o', 'h', '_', '_']
		SPLIT: ['þ', '_', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', 'h', '_', '_']
		['þ', '_', 'o', 'h', '_', '_']
		SPLIT: ['_', 'y', 'o', 'h', '_', '_']
		['_', 'y', 'o', 'h', '_', '_']
		['_', 'y', 'o', 'h', '_', '_']
		SPLIT: ['þ', '_', 'o', 'h', '_', 'h']
		['þ', '_', 'o', 'h', '_', 'h']
		SPLIT: ['þ', '_', 'o', '_', '_', 'ch']
		['þ', '_', 'o', '_', '_', 'ch']
		SPLIT: ['þ', '_', 'o', 'u', '_', '_']
		['þ', '_', 'o', 'u', '_', '_']
		['þ', '_', 'o', 'u', '_', '_']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', 'u', '_', 'h']
		['þ', '_', 'o', 'u', '_', 'h']
		['þ', '_', 'o', 'u', '_', 'h']
		SPLIT: ['_', 'y', 'o', 'u', '_', 'h']
		['_', 'y', 'o', 'u', '_', 'h']
		['_', 'y', 'o', 'u', '_', 'h']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u', 'h']", "['_']", "['h']"]
		SPLIT: ['þ', '_', 'o', 'u', '_', 's']
		['þ', '_', 'o', 'u', '_', 's']
		['þ', '_', 'o', 'u', '_', 's']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', 'u', '_', 'ȝ']
		['þ', '_', 'o', 'u', '_', 'ȝ']
		['þ', '_', 'o', 'u', '_', 'ȝ']
		SPLIT: ["['þ']", "['_']", "['o']", "['w']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', 'ȝ', '_', '_']
		['þ', '_', 'o', 'ȝ', '_', '_']
		SPLIT: ["['þ']", "['_']", "['_']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['y']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCCC is INVALID
		[{'g', '_', 't'}]
		42
		OVERVIEW: version for pattern CCVCCC
{'g', '_', 't'}
faulty splits: 42
['ð']['']['e'][''][''][''] <-! ðen
['ð']['']['e'][''][''][''] <-! ðenc
['ð']['']['e'][''][''][''] <-! ðench
['ð']['']['e'][''][''][''] <-! ðenke
['ð']['h']['e'][''][''][''] <-! ðhenk
['ð']['h']['o'][''][''][''] <-! ðhog
['ð']['i'][''][''][''][''] <-! ðing
['ð']['']['o'][''][''][''] <-! ðod
['ð']['']['o'][''][''][''] <-! ðog
['ð']['']['oƿ', 'o']['ƿ'][''][''] <-! ðoƿg
['t']['h']['e'][''][''][''] <-! thenke
['t']['h'][''][''][''][''] <-! think
['t']['h'][''][''][''][''] <-! thnk
['t']['h']['o'][''][''][''] <-! thogh
['t']['h'][''][''][''][''] <-! thynk
['þ']['']['e'][''][''][''] <-! þeink
['þ']['']['e'][''][''][''] <-! þen
['þ']['']['e'][''][''][''] <-! þenc
['þ']['']['e'][''][''][''] <-! þencke
['þ']['']['e'][''][''][''] <-! þeng
['þ']['']['e'][''][''][''] <-! þenge
['þ']['']['e'][''][''][''] <-! þench
['þ']['']['e'][''][''][''] <-! þenche
['þ']['']['e'][''][''][''] <-! þenk
['þ']['']['e'][''][''][''] <-! þenke
['']['y']['e'][''][''][''] <-! yenke
['þ']['']['e'][''][''][''] <-! þeoh
['þ']['i'][''][''][''][''] <-! þinc
['']['y'][''][''][''][''] <-! yinge
['þ']['i'][''][''][''][''] <-! þinch
['þ']['i'][''][''][''][''] <-! þink
['þ']['i'][''][''][''][''] <-! þinke
['þ']['']['o'][''][''][''] <-! þoð
['þ']['']['o'][''][''][''] <-! þogh
['þ']['']['o', 'ou']['u'][''][''] <-! þouc
['þ']['']['o', 'ou']['u', 'h']['']['h'] <-! þouht
['þ']['']['o', 'ou']['u'][''][''] <-! þouth
['þ']['']['o']['w'][''][''] <-! þowth
['þ']['']['']['u'][''][''] <-! þun
['þ']['']['']['u'][''][''] <-! þunch
['þ']['y'][''][''][''][''] <-! þynk
[''][''][''][''][''][''] <-! zenke
t | h | o | u | g | h
t | h | o | w | t | h
['ð'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['h'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
ð | _ | o | h | _ | _
['ð'] | ['_'] | ['oƿ', 'o'] | ['ƿ'] | ['_'] | ['_']
_ | _ | e | _ | _ | s
_ | _ | _ | _ | _ | s
['t'] | ['h'] | ['e'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
t | h | o | _ | _ | _
['t'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
t | h | o | h | _ | _
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
t | _ | o | h | _ | _
þ | _ | _ | _ | _ | _
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
þ | _ | o | h | _ | _
_ | y | o | h | _ | _
þ | _ | o | h | _ | h
þ | _ | o | _ | _ | ch
þ | _ | o | u | _ | _
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['_']
þ | _ | o | u | _ | h
_ | y | o | u | _ | h
['þ'] | ['_'] | ['o', 'ou'] | ['u', 'h'] | ['_'] | ['h']
þ | _ | o | u | _ | s
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['_']
þ | _ | o | u | _ | ȝ
['þ'] | ['_'] | ['o'] | ['w'] | ['_'] | ['_']
þ | _ | o | ȝ | _ | _
['þ'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['u'] | ['_'] | ['_']
['þ'] | ['y'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', '_', 's', 'h'}
2 : {'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'y', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'}
3 : {'n', 'u', 'w', '_'},{'h', 'ð', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'g', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'g', 'u', 'w', '_', 'ƿ'},{'gh', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 'ch'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 'ng'},{'h', 'u', 'w', '_', 'ƿ', 's'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'u', 'w', 'd', '_'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'y', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'g', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 'ȝ', 'z'},{'y', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 'ng'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 'c'},{'n', 'h', 'u', 'w', '_', 'ƿ', 'ȝ'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w'},{'gh', 'h', 'u', 'w', '_', 'ƿ'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'i', 'h', 'u', 'w', '_', 'ƿ'},{'h', 'u', 'w', '_', 'ƿ', 's'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'h', 'u', 'w', '_', 'ƿ', 'ȝ'},{'g', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'ng', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'ng', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'},{'n', 'u', 'w', '_'},{'n', 'h', 'u', 'w', '_', 'ƿ'}
4 : {'i', 'g', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't'},{'i', 'g', '_', 't'},{'g', '_', 't'},{'g', 'ng', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'ng', '_', 't'},{'i', 'g', '_', 't'},{'g', 'n', '_', 't'},{'i', 'g', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't', 'h'},{'g', '_', 't'},{'g', '_', 't', 'h'},{'g', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'c', '_', 't'},{'g', 'gh', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'y', '_', 't'},{'g', 'n', '_', 't'},{'g', 'ng', '_', 't'},{'g', 'ng', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'y', '_', 't'},{'g', '_', 't', 'ȝ'},{'g', 'n', '_', 't'},{'ð', 'g', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't'},{'g', '_', 't', 'z'},{'g', 'n', '_', 't'},{'g', '_', 't', 'h'},{'g', '_', 't', 'd'},{'g', '_', 't', 'ȝ'},{'i', 'g', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'c', '_', 't'},{'g', '_', 't', 'h'},{'g', '_', 't'},{'g', '_', 't', 'ch'},{'i', 'g', '_', 't'},{'g', '_', 't', 'h'},{'i', 'g', '_', 't'},{'g', '_', 't', 's'},{'g', 'n', '_', 't'},{'i', 'g', '_', 't'},{'g', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't', 's'},{'g', 'gh', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't', 'th'},{'g', '_', 't', 'h'},{'g', 'c', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't', 'th'},{'g', '_', 't', 'th'},{'g', '_', 't', 'h'},{'g', 'n', '_', 't'},{'g', 'n', 't'},{'g', '_', 't', 's'},{'g', 'n', '_', 't'},{'g', '_', 't'},{'g', '_', 't'},{'g', 'n', '_', 't'},{'g', '_', 't', 's'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'},{'g', 'n', '_', 't'}
5 : {'ng', '_', 's', 'h'},{'n', '_', 'h'},{'n', '_', 'h'},{'n', '_', 's', 'h'},{'h', '_', 'c', 's', 'ch'},{'ng', '_', 'h'},{'n', 'h'},{'ng', '_', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'y', '_', 's', 'h'},{'h', '_', 's', 't', 'ch'},{'ng', '_', 's', 'h'},{'h', 'th', '_', 's', 'ch'},{'n', '_', 'h'},{'n', '_', 's', 'h'},{'h', 'th', '_', 's', 'ch'},{'g', '_', 'h'},{'h', '_', 'ȝ', 's', 't', 'ch'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'g', '_', 'h'},{'n', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'i', '_', 's', 'h'},{'h', '_', 's', 't', 'ch'},{'i', '_', 's', 'h'},{'i', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'h', '_', 'ȝ', 's', 'z', 'ch'},{'n', '_', 's', 'h'},{'g', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'ð', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'h', '_', 'th', 'ȝ', 's', 'ch'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'n', '_', 's', 'h'},{'g', '_', 's', 'h'},{'gh', '_', 's', 'h'},{'_', 'd', 'h'},{'n', '_', 's', 'h'},{'n', '_', 'h'},{'n', '_', 's', 'h'},{'n', '_', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'i', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'y', '_', 's', 'h'},{'i', '_', 's', 'h'},{'h', '_', 'c', 's', 'ch'},{'gh', '_', 's', 'h'},{'i', '_', 's', 'h'},{'n', '_', 'h'},{'g', '_', 'h'},{'i', '_', 's', 'h'},{'n', '_', 's', 'h'},{'n', '_', 's', 'h'},{'i', '_', 's', 'h'},{'n', 'h', '_', 'ȝ', 's', 'ch'},{'n', '_', 'h'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CVVCC
	Selection for pattern: CVVCC completed
	Making a version for pattern: CVVCC
			___CVVCC : 0___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> þ, ð, th, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/e/n/k/e
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/i/n/k
					TRYING: th
					> version: th/i/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o/g/h
					TRYING: th
					> version: th/o/gh
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o/h
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o/w/t/h
					TRYING: th
					> version: t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/ow/t/h
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/y/n/k
					TRYING: th
					> version: th/y/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'o', 'h']
				t/o/h(CVC)
_/t/o/h(ACVC)
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['_', 't', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVVCC : 1___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'e', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/_/h/e/n/k(CACVCC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'o', 'g']
				ð/h/o/g(CCVC)
ð/_/h/o/g(CACVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['o']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((o))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th/e', 'rgx': '((th))/((e))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/n/k
					TRYING: i
					> version: th/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i', 'rgx': '((th))/((i))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i', 'rgx': '((th))/((i))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', 'n', 'k']
				th/n/k(CCC)
th/_/n/k(CACC)
				version split: ['th', 'n', 'k']
				{'string': 'th/n', 'rgx': '((th))/((_))$'}
				_____REMOVING________['th', 'n', 'k']
				version split: ['th', '_', 'n', 'k']
				{'string': 'th/_', 'rgx': '((th))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/g/h
					TRYING: o
					> version: th/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				version split: ['th', 'o', 'gh']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o', 'h']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thowth
					resolving (2)
					> version: th/o/w/t/h
					TRYING: o
					> version: th/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> i, ow, e, _, o
					RESULT:  ['o']
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th/ow', 'rgx': '((th))/((o))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: th/y/n/k
					TRYING: y
					> version: th/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y', 'rgx': '((th))/((y))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y', 'rgx': '((th))/((y))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'o', 'h']
				_/t/o/h(ACVC)
_/_/t/o/h(AACVC)
				version split: ['_', 't', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'o', 'h']
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					adding blocked set: V = V >> i, y, e, _, ye, o
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((eo)|(e))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((eo)|(e))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 's']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					adding blocked set: V = V >> i, y, e, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, eo, o
					> version: þ/ow/th
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					> version: þ/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					> version: þ/u/n/c/h
					TRYING: u
					> version: þ/u/n/ch
					TRYING: u
					> version: þ/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVCC : 2___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n']
				ð/e/n(CVC)
ð/e/_/n(CVAC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', 'e', '_', 'n']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'c']
				ð/e/n/c(CVCC)
ð/e/_/n/c(CVACC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', 'e', '_', 'n', 'c']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: n
					> version: ð/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/e/_/n/c/h(CVACCC)
ð/e/_/n/ch(CVACC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				version split: ['ð', 'e', '_', 'n', 'ch']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/e/_/n/k/e(CVACCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/h/e/n/k
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/h/e/n/k(CACVCC)
ð/_/_/h/e/n/k(CAACVCC)
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/h/o/g
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'o', 'g']
				ð/_/h/o/g(CACVC)
ð/_/_/h/o/g(CAACVC)
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'd']
				ð/o/d(CVC)
ð/o/_/d(CVAC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o/d', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'g']
				ð/o/g(CVC)
ð/o/_/g(CVAC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o/g', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', 'o', '_', 'g']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'h']
				ð/o/h(CVC)
ð/o/_/h(CVAC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o/h', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/ƿ/g
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'ƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/o/_/ƿ/g(CVACC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o/ƿ', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 's']
				_/e/s(AVC)
_/e/_/s(AVAC)
				version split: ['_', 'e', 's']
				{'string': '_/e/s', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', 'n', 'k', 'e']
				th/e/n/k/e(CVCCV)
th/e/_/n/k/e(CVACCV)
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th/e/n', 'rgx': '((th))/((e))/((_))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', '_', 'n', 'k', 'e']
				{'string': 'th/e/_', 'rgx': '((th))/((e))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/n/k
					TRYING: n
					> version: th/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', 'n', 'k']
				th/i/n/k(CCCC)
th/i/n/k(CVCC)
th/i/_/n/k(CAACC)
th/i/_/n/k(CAACC)
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i/n', 'rgx': '((th))/((i))/((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i/n', 'rgx': '((th))/((i))/((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_', 'rgx': '((th))/((i))/((_))$'}
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_', 'rgx': '((th))/((i))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', 'n', 'k']
				th/_/n/k(CACC)
th/_/_/n/k(CAACC)
				version split: ['th', '_', 'n', 'k']
				{'string': 'th/_/n', 'rgx': '((th))/((_))/((_))$'}
				_____REMOVING________['th', '_', 'n', 'k']
				version split: ['th', '_', '_', 'n', 'k']
				{'string': 'th/_/_', 'rgx': '((th))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_']
				th/o(CV)
th/o/_(CVA)
				version split: ['th', 'o']
				{'string': 'th/o', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o']
				version split: ['th', 'o', '_']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/g/h
					TRYING: g
					> version: th/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', 'gh']
				th/o/g/h(CVCC)
th/o/gh(CVC)
th/o/_/g/h(CVACC)
th/o/_/gh(CVAC)
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th/o/g', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th/o/gh', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'gh']
				version split: ['th', 'o', '_', 'g', 'h']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				version split: ['th', 'o', '_', 'gh']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', 'h']
				th/o/h(CVC)
th/o/_/h(CVAC)
				version split: ['th', 'o', 'h']
				{'string': 'th/o/h', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'h']
				version split: ['th', 'o', '_', 'h']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: th/o/w/t/h
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', 'w', 't', 'h']
				th/o/w/t/h(CVCCC)
th/o/_/w/t/h(CVACCC)
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th/o/w', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['th', 'o', '_', 'w', 't', 'h']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: th/y/n/k
					TRYING: n
					> version: th/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', 'n', 'k']
				th/y/n/k(CCCC)
th/y/n/k(CVCC)
th/y/_/n/k(CAACC)
th/y/_/n/k(CAACC)
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y/n', 'rgx': '((th))/((y))/((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y/n', 'rgx': '((th))/((y))/((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_', 'rgx': '((th))/((y))/((_))$'}
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_', 'rgx': '((th))/((y))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'o', 'h']
				_/_/t/o/h(AACVC)
_/_/_/t/o/h(AAACVC)
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n']
				þ/e/n(CVC)
þ/e/_/n(CVAC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', 'e', '_', 'n']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c']
				þ/e/n/c(CVCC)
þ/e/_/n/c(CVACC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', 'e', '_', 'n', 'c']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: n
					> version: þ/e/n/ck/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/e/_/n/c/k/e(CVACCCV)
þ/e/_/n/ck/e(CVACCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: n
					> version: þ/e/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/e/_/n/g(CVACC)
þ/e/_/ng(CVAC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', 'e', '_', 'n', 'g']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'ng']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: n
					> version: þ/e/ng/e
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/e/_/n/g/e(CVACCV)
þ/e/_/ng/e(CVACV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'ng', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: n
					> version: þ/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/e/_/n/c/h(CVACCC)
þ/e/_/n/ch(CVACC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'n', 'ch']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: n
					> version: þ/e/n/ch/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/e/_/n/c/h/e(CVACCCV)
þ/e/_/n/ch/e(CVACCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'k']
				þ/e/n/k(CVCC)
þ/e/_/n/k(CVACC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', 'e', '_', 'n', 'k']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/e/_/n/k/e(CVACCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: o
					> version: þ/eo/h
					TRYING: h
					RESULT:  ['o']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e/o', 'rgx': '((þ))/((eo)|(e))/((o))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo/h', 'rgx': '((þ))/((eo)|(e))/((o))$'}
				_____REMOVING________['þ', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					> version: _/y/i/n/g/e
					TRYING: i
					> version: _/y/i/ng/e
					TRYING: i
					> version: _/y/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((i))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((i))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((i))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((i))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ð']
				þ/o/ð(CVC)
þ/o/_/ð(CVAC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o/ð', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: g
					> version: þ/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/o/_/g/h(CVACC)
þ/o/_/gh(CVAC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o/g', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o/gh', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', 'o', '_', 'g', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'gh']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h']
				þ/o/h(CVC)
þ/o/_/h(CVAC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', 'h']
				þ/o/h/h(CVCC)
þ/o/_/h/h(CVACC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: c
					> version: þ/o/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/o/_/c/h(CVACC)
þ/o/_/ch(CVAC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o/c', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o/ch', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/u
					TRYING: u
					> version: þ/o/u
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/u/c
					TRYING: u
					> version: þ/o/u/c
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/u/h
					TRYING: u
					> version: þ/o/u/h
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, u, _, ou, o
					> version: _/y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, u, _, ou, o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				ANALYSING: þous
					resolving (2)
					> version: þ/o/u/s
					TRYING: u
					> version: þ/o/u/s
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/u/ȝ
					TRYING: u
					> version: þ/o/u/ȝ
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/w/t/h
					TRYING: w
					> version: þ/o/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'w', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/o/_/w/t/h(CVACCC)
þ/o/_/w/th(CVACC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o/w', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o/w', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'w', 'th']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ȝ']
				þ/o/ȝ(CVC)
þ/o/_/ȝ(CVAC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o/ȝ', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: n
					> version: þ/u/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/u/_/n(CAAC)
þ/u/_/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: n
					> version: þ/u/n/c/h
					TRYING: n
					> version: þ/u/n/ch
					TRYING: n
					> version: þ/u/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'u', '_', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/u/_/n/c/h(CAACCC)
þ/u/_/n/c/h(CAACCC)
þ/u/_/n/ch(CAACC)
þ/u/_/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				version split: ['þ', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				version split: ['þ', 'u', '_', 'n', 'ch']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				version split: ['þ', 'u', '_', 'n', 'ch']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVCC : 3___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/_/n
					TRYING: n
					adding blocked set: C = C >> g, n, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n']
				ð/e/_/n(CVAC)
ð/e/_/_/n(CVAAC)
				version split: ['ð', 'e', '_', 'n']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n']
				version split: ['ð', 'e', '_', '_', 'n']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'c']
				ð/e/_/n/c(CVACC)
ð/e/_/_/n/c(CVAACC)
				version split: ['ð', 'e', '_', 'n', 'c']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'c']
				version split: ['ð', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: ð/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'ch']
				ð/e/_/n/c/h(CVACCC)
ð/e/_/n/ch(CVACC)
ð/e/_/_/n/c/h(CVAACCC)
ð/e/_/_/n/ch(CVAACC)
				version split: ['ð', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'c', 'h']
				version split: ['ð', 'e', '_', 'n', 'ch']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'ch']
				version split: ['ð', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				version split: ['ð', 'e', '_', '_', 'n', 'ch']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				ð/e/_/n/k/e(CVACCV)
ð/e/_/_/n/k/e(CVAACCV)
				version split: ['ð', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/_/h/e/n/k(CAACVCC)
ð/_/_/_/h/e/n/k(CAAACVCC)
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'h', 'o', 'g']
				ð/_/_/h/o/g(CAACVC)
ð/_/_/_/h/o/g(CAAACVC)
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/d
					TRYING: d
					adding blocked set: C = C >> n, h, g, _, d, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'd']
				ð/o/_/d(CVAC)
ð/o/_/_/d(CVAAC)
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_/d', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'd']
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/_/g
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'g']
				ð/o/_/g(CVAC)
ð/o/_/_/g(CVAAC)
				version split: ['ð', 'o', '_', 'g']
				{'string': 'ð/o/_/g', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'g']
				version split: ['ð', 'o', '_', '_', 'g']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'h']
				ð/o/_/h(CVAC)
ð/o/_/_/h(CVAAC)
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_/h', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'h']
				version split: ['ð', 'o', '_', '_', 'h']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> n, h, g, _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'ƿ', 'g']
				ð/o/_/ƿ/g(CVACC)
ð/o/_/_/ƿ/g(CVAACC)
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/_/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', 's']
				_/e/_/s(AVAC)
_/e/_/_/s(AVAAC)
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_/s', 'rgx': '((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', 's']
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_', 'rgx': '((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', '_', 'n', 'k', 'e']
				th/e/_/n/k/e(CVACCV)
th/e/_/_/n/k/e(CVAACCV)
				version split: ['th', 'e', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/n', 'rgx': '((th))/((e))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', 'n', 'k', 'e']
				version split: ['th', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_', 'rgx': '((th))/((e))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: th/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', '_', 'n', 'k']
				th/i/_/n/k(CAACC)
th/i/_/n/k(CAACC)
th/i/_/_/n/k(CAAACC)
th/i/_/_/n/k(CAAACC)
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_/n', 'rgx': '((th))/((i))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', 'n', 'k']
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_/n', 'rgx': '((th))/((i))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_', 'rgx': '((th))/((i))/((_))/((_))$'}
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_', 'rgx': '((th))/((i))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', '_', 'n', 'k']
				th/_/_/n/k(CAACC)
th/_/_/_/n/k(CAAACC)
				version split: ['th', '_', '_', 'n', 'k']
				{'string': 'th/_/_/n', 'rgx': '((th))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', 'n', 'k']
				version split: ['th', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_', 'rgx': '((th))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o/_
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_']
				th/o/_(CVA)
th/o/_/_(CVAA)
				version split: ['th', 'o', '_']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_']
				version split: ['th', 'o', '_', '_']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, t
					> version: th/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', '_', 'gh']
				th/o/_/g/h(CVACC)
th/o/_/gh(CVAC)
th/o/_/_/g/h(CVAACC)
th/o/_/_/gh(CVAAC)
				version split: ['th', 'o', '_', 'g', 'h']
				{'string': 'th/o/_/g', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'g', 'h']
				version split: ['th', 'o', '_', 'gh']
				{'string': 'th/o/_/gh', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'gh']
				version split: ['th', 'o', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				version split: ['th', 'o', '_', '_', 'gh']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', 'h']
				th/o/_/h(CVAC)
th/o/_/_/h(CVAAC)
				version split: ['th', 'o', '_', 'h']
				{'string': 'th/o/_/h', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'h']
				version split: ['th', 'o', '_', '_', 'h']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: th/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, h, g, _, w, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', 'w', 't', 'h']
				th/o/_/w/t/h(CVACCC)
th/o/_/_/w/t/h(CVAACCC)
				version split: ['th', 'o', '_', 'w', 't', 'h']
				{'string': 'th/o/_/w', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'w', 't', 'h']
				version split: ['th', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: th/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: th/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', '_', 'n', 'k']
				th/y/_/n/k(CAACC)
th/y/_/n/k(CAACC)
th/y/_/_/n/k(CAAACC)
th/y/_/_/n/k(CAAACC)
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_/n', 'rgx': '((th))/((y))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', 'n', 'k']
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_/n', 'rgx': '((th))/((y))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_', 'rgx': '((th))/((y))/((_))/((_))$'}
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_', 'rgx': '((th))/((y))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/t/o/h(AAACVC)
_/_/_/_/t/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n']
				þ/e/_/n(CVAC)
þ/e/_/_/n(CVAAC)
				version split: ['þ', 'e', '_', 'n']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n']
				version split: ['þ', 'e', '_', '_', 'n']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c']
				þ/e/_/n/c(CVACC)
þ/e/_/_/n/c(CVAACC)
				version split: ['þ', 'e', '_', 'n', 'c']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c']
				version split: ['þ', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/e/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				þ/e/_/n/c/k/e(CVACCCV)
þ/e/_/n/ck/e(CVACCV)
þ/e/_/_/n/c/k/e(CVAACCCV)
þ/e/_/_/n/ck/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/e/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', '_', 'ng']
				þ/e/_/n/g(CVACC)
þ/e/_/ng(CVAC)
þ/e/_/_/n/g(CVAACC)
þ/e/_/_/ng(CVAAC)
				version split: ['þ', 'e', '_', 'n', 'g']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'g']
				version split: ['þ', 'e', '_', 'ng']
				{'string': 'þ/e/_/ng', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'ng']
				version split: ['þ', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'ng']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/e/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'ng', 'e']
				þ/e/_/n/g/e(CVACCV)
þ/e/_/ng/e(CVACV)
þ/e/_/_/n/g/e(CVAACCV)
þ/e/_/_/ng/e(CVAACV)
				version split: ['þ', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', 'ng', 'e']
				{'string': 'þ/e/_/ng', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'ng', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'ch']
				þ/e/_/n/c/h(CVACCC)
þ/e/_/n/ch(CVACC)
þ/e/_/_/n/c/h(CVAACCC)
þ/e/_/_/n/ch(CVAACC)
				version split: ['þ', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c', 'h']
				version split: ['þ', 'e', '_', 'n', 'ch']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'ch']
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'n', 'ch']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/e/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				þ/e/_/n/c/h/e(CVACCCV)
þ/e/_/n/ch/e(CVACCV)
þ/e/_/_/n/c/h/e(CVAACCCV)
þ/e/_/_/n/ch/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'k']
				þ/e/_/n/k(CVACC)
þ/e/_/_/n/k(CVAACC)
				version split: ['þ', 'e', '_', 'n', 'k']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'k']
				version split: ['þ', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				þ/e/_/n/k/e(CVACCV)
þ/e/_/_/n/k/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: _/y/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/e/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'o', '_', 'h']
				þ/e/o/h(CVVC)
þ/e/o/_/h(CVVAC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e/o/h', 'rgx': '((þ))/((eo)|(e))/((o))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'e', 'o', '_', 'h']
				{'string': 'þ/e/o/_', 'rgx': '((þ))/((eo)|(e))/((o))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: _/y/i/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: _/y/i/ng/e
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					> version: _/y/i/ng/e
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/i/_/n/g/e(AAAACCV)
_/y/i/_/n/g/e(AAAACCV)
_/y/i/_/ng/e(AAAACV)
_/y/i/_/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i/n', 'rgx': '((_))/((y))/((i))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i/n', 'rgx': '((_))/((y))/((i))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i/ng', 'rgx': '((_))/((y))/((i))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i/ng', 'rgx': '((_))/((y))/((i))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_', 'rgx': '((_))/((y))/((i))/((_))$'}
				version split: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_', 'rgx': '((_))/((y))/((i))/((_))$'}
				version split: ['_', 'y', 'i', '_', 'ng', 'e']
				{'string': '_/y/i/_', 'rgx': '((_))/((y))/((i))/((_))$'}
				version split: ['_', 'y', 'i', '_', 'ng', 'e']
				{'string': '_/y/i/_', 'rgx': '((_))/((y))/((i))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> n, h, ð, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ð']
				þ/o/_/ð(CVAC)
þ/o/_/_/ð(CVAAC)
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_/ð', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ð']
				version split: ['þ', 'o', '_', '_', 'ð']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'gh']
				þ/o/_/g/h(CVACC)
þ/o/_/gh(CVAC)
þ/o/_/_/g/h(CVAACC)
þ/o/_/_/gh(CVAAC)
				version split: ['þ', 'o', '_', 'g', 'h']
				{'string': 'þ/o/_/g', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'g', 'h']
				version split: ['þ', 'o', '_', 'gh']
				{'string': 'þ/o/_/gh', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'gh']
				version split: ['þ', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'gh']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'h']
				þ/o/_/h(CVAC)
þ/o/_/_/h(CVAAC)
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h']
				version split: ['þ', 'o', '_', '_', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					> version: _/y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/h/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'h', 'h']
				þ/o/_/h/h(CVACC)
þ/o/_/_/h/h(CVAACC)
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h', 'h']
				version split: ['þ', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> n, h, g, _, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ch']
				þ/o/_/c/h(CVACC)
þ/o/_/ch(CVAC)
þ/o/_/_/c/h(CVAACC)
þ/o/_/_/ch(CVAAC)
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_/c', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'c', 'h']
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_/ch', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ch']
				version split: ['þ', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'ch']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/u
					> version: þ/o/u
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_']
				adding dashed alternative: ['þ', 'o', 'u', '_']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/o/u/_(CVAA)
þ/o/u/_(CVAA)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u', '_']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				version split: ['þ', 'o', 'u', '_']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/u/c
					TRYING: c
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/o/u/c
					TRYING: c
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'c']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/o/u/_/c(CVAAC)
þ/o/u/_/c(CVAAC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u/c', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u/c', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', '_', 'c']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				version split: ['þ', 'o', 'u', '_', 'c']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'h']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/o/u/_/h(CVAAC)
þ/o/u/_/h(CVAAC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u/h', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u/h', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', '_', 'h']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				version split: ['þ', 'o', 'u', '_', 'h']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				ANALYSING: youh
					resolving (2)
					> version: _/y/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, t
					> version: _/y/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'u', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/o/_/u/h(AAVAAC)
_/y/o/_/u/h(AAVAAC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/u/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, s, t
					> version: þ/o/u/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', 's']
				adding dashed alternative: ['þ', 'o', 'u', '_', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/o/u/_/s(CVAAC)
þ/o/u/_/s(CVAAC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u/s', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u/s', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', '_', 's']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				version split: ['þ', 'o', 'u', '_', 's']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, h, g, _, ȝ, t
					> version: þ/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, h, g, _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['þ', 'o', 'u', '_', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/o/u/_/ȝ(CVAAC)
þ/o/u/_/ȝ(CVAAC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u/ȝ', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u/ȝ', 'rgx': '((þ))/((o))/((u))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				version split: ['þ', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, h, g, _, w, t
					> version: þ/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> n, h, g, _, w, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'w', 'th']
				þ/o/_/w/t/h(CVACCC)
þ/o/_/w/th(CVACC)
þ/o/_/_/w/t/h(CVAACCC)
þ/o/_/_/w/th(CVAACC)
				version split: ['þ', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/w', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', 'w', 'th']
				{'string': 'þ/o/_/w', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'w', 'th']
				version split: ['þ', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, h, g, _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ȝ']
				þ/o/_/ȝ(CVAC)
þ/o/_/_/ȝ(CVAAC)
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n']
				þ/u/_/n(CAAC)
þ/u/_/n(CAAC)
þ/u/_/_/n(CAAAC)
þ/u/_/_/n(CAAAC)
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n']
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n']
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/u/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/u/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/u/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n', 'ch']
				þ/u/_/n/c/h(CAACCC)
þ/u/_/n/c/h(CAACCC)
þ/u/_/n/ch(CAACC)
þ/u/_/n/ch(CAACC)
þ/u/_/_/n/c/h(CAAACCC)
þ/u/_/_/n/c/h(CAAACCC)
þ/u/_/_/n/ch(CAAACC)
þ/u/_/_/n/ch(CAAACC)
				version split: ['þ', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', 'n', 'ch']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n', 'ch']
				version split: ['þ', 'u', '_', 'n', 'ch']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n', 'ch']
				version split: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				version split: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				version split: ['þ', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				version split: ['þ', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, h, g, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVVCC : 4___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> k, n, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n']
				ð/e/_/_/n(CVAAC)
ð/e/_/_/_/n(CVAAAC)
				version split: ['ð', 'e', '_', '_', 'n']
				{'string': 'ð/e/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n']
				version split: ['ð', 'e', '_', '_', '_', 'n']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'c']
				ð/e/_/_/n/c(CVAACC)
ð/e/_/_/_/n/c(CVAAACC)
				version split: ['ð', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_/n/c', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'c']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: ð/e/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'ch']
				ð/e/_/_/n/c/h(CVAACCC)
ð/e/_/_/n/ch(CVAACC)
ð/e/_/_/_/n/c/h(CVAAACCC)
ð/e/_/_/_/n/ch(CVAAACC)
				version split: ['ð', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/e/_/_/n/c', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['ð', 'e', '_', '_', 'n', 'ch']
				{'string': 'ð/e/_/_/n/ch', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'ch']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'c', 'h']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'ch']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				ð/e/_/_/n/k/e(CVAACCV)
ð/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_/n/k', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/_/_/h/e/n/k(CAAACVCC)
ð/_/_/_/_/h/e/n/k(CAAAACVCC)
				version split: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_/h/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				ð/_/_/_/h/o/g(CAAACVC)
ð/_/_/_/_/h/o/g(CAAAACVC)
				version split: ['ð', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_/h/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/_/d
					TRYING: d
					adding blocked set: C = C >> h, _, d, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'd']
				ð/o/_/_/d(CVAAC)
ð/o/_/_/_/d(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'd']
				version split: ['ð', 'o', '_', '_', '_', 'd']
				{'string': 'ð/o/_/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/_/_/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'g']
				ð/o/_/_/g(CVAAC)
ð/o/_/_/_/g(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'g']
				{'string': 'ð/o/_/_/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'g']
				version split: ['ð', 'o', '_', '_', '_', 'g']
				{'string': 'ð/o/_/_/_/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'h']
				ð/o/_/_/h(CVAAC)
ð/o/_/_/_/h(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'h']
				{'string': 'ð/o/_/_/h', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'h']
				version split: ['ð', 'o', '_', '_', '_', 'h']
				{'string': 'ð/o/_/_/_/h', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'h']
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				ð/o/_/_/ƿ/g(CVAACC)
ð/o/_/_/_/ƿ/g(CVAAACC)
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/ƿ/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', '_', 's']
				_/e/_/_/s(AVAAC)
_/e/_/_/_/s(AVAAAC)
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', 's']
				version split: ['_', 'e', '_', '_', '_', 's']
				{'string': '_/e/_/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				ANALYSING: thenke
					resolving (1)
					> version: th/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				th/e/_/_/n/k/e(CVAACCV)
th/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['th', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_/n/k', 'rgx': '((th))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_/_/n', 'rgx': '((th))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: think
					resolving (2)
					> version: th/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: th/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', '_', '_', 'n', 'k']
				th/i/_/_/n/k(CAAACC)
th/i/_/_/n/k(CAAACC)
th/i/_/_/_/n/k(CAAAACC)
th/i/_/_/_/n/k(CAAAACC)
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/n/k', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/n/k', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/_/n', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/_/n', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: thnk
					resolving (1)
					> version: th/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', '_', '_', 'n', 'k']
				th/_/_/_/n/k(CAAACC)
th/_/_/_/_/n/k(CAAAACC)
				version split: ['th', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_/n/k', 'rgx': '((th))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', '_', 'n', 'k']
				version split: ['th', '_', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_/_/n', 'rgx': '((th))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', '_', '_', 'n', 'k']
				ANALYSING: tho
					resolving (1)
					> version: th/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_']
				th/o/_/_(CVAA)
th/o/_/_/_(CVAAA)
				version split: ['th', 'o', '_', '_']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_']
				version split: ['th', 'o', '_', '_', '_']
				{'string': 'th/o/_/_/_', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					> version: th/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'gh']
				th/o/_/_/g/h(CVAACC)
th/o/_/_/gh(CVAAC)
th/o/_/_/_/g/h(CVAAACC)
th/o/_/_/_/gh(CVAAAC)
				version split: ['th', 'o', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_/g/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'g', 'h']
				version split: ['th', 'o', '_', '_', 'gh']
				{'string': 'th/o/_/_/gh', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'gh']
				version split: ['th', 'o', '_', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_/_/g', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'g', 'h']
				version split: ['th', 'o', '_', '_', '_', 'gh']
				{'string': 'th/o/_/_/_/gh', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'gh']
				ANALYSING: thoh
					resolving (1)
					> version: th/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'h']
				th/o/_/_/h(CVAAC)
th/o/_/_/_/h(CVAAAC)
				version split: ['th', 'o', '_', '_', 'h']
				{'string': 'th/o/_/_/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'h']
				version split: ['th', 'o', '_', '_', '_', 'h']
				{'string': 'th/o/_/_/_/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'h']
				ANALYSING: thowth
					resolving (1)
					> version: th/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'w', 't', 'h']
				th/o/_/_/w/t/h(CVAACCC)
th/o/_/_/_/w/t/h(CVAAACCC)
				version split: ['th', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'th/o/_/_/w/t', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'w', 't', 'h']
				version split: ['th', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'th/o/_/_/_/w', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'w', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: th/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: th/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', '_', '_', 'n', 'k']
				th/y/_/_/n/k(CAAACC)
th/y/_/_/n/k(CAAACC)
th/y/_/_/_/n/k(CAAAACC)
th/y/_/_/_/n/k(CAAAACC)
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/n/k', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/n/k', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/_/n', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/_/n', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/t/o/h(AAAACVC)
_/_/_/_/_/t/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/t/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n']
				þ/e/_/_/n(CVAAC)
þ/e/_/_/_/n(CVAAAC)
				version split: ['þ', 'e', '_', '_', 'n']
				{'string': 'þ/e/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n']
				version split: ['þ', 'e', '_', '_', '_', 'n']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c']
				þ/e/_/_/n/c(CVAACC)
þ/e/_/_/_/n/c(CVAAACC)
				version split: ['þ', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/_/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				þ/e/_/_/n/c/k/e(CVAACCCV)
þ/e/_/_/n/ck/e(CVAACCV)
þ/e/_/_/_/n/c/k/e(CVAAACCCV)
þ/e/_/_/_/n/ck/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_/n/ck', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'ng']
				þ/e/_/_/n/g(CVAACC)
þ/e/_/_/ng(CVAAC)
þ/e/_/_/_/n/g(CVAAACC)
þ/e/_/_/_/ng(CVAAAC)
				version split: ['þ', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_/n/g', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'g']
				version split: ['þ', 'e', '_', '_', 'ng']
				{'string': 'þ/e/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'ng']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'g']
				version split: ['þ', 'e', '_', '_', '_', 'ng']
				{'string': 'þ/e/_/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/_/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'ng', 'e']
				þ/e/_/_/n/g/e(CVAACCV)
þ/e/_/_/ng/e(CVAACV)
þ/e/_/_/_/n/g/e(CVAAACCV)
þ/e/_/_/_/ng/e(CVAAACV)
				version split: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_/n/g', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_/ng/e', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'ng', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'ng', 'e']
				ANALYSING: þench
					resolving (2)
					> version: þ/e/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'ch']
				þ/e/_/_/n/c/h(CVAACCC)
þ/e/_/_/n/ch(CVAACC)
þ/e/_/_/_/n/c/h(CVAAACCC)
þ/e/_/_/_/n/ch(CVAAACC)
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'e', '_', '_', 'n', 'ch']
				{'string': 'þ/e/_/_/n/ch', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'ch']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'ch']
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/_/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				þ/e/_/_/n/c/h/e(CVAACCCV)
þ/e/_/_/n/ch/e(CVAACCV)
þ/e/_/_/_/n/c/h/e(CVAAACCCV)
þ/e/_/_/_/n/ch/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_/n/ch', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'k']
				þ/e/_/_/n/k(CVAACC)
þ/e/_/_/_/n/k(CVAAACC)
				version split: ['þ', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_/n/k', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'k']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				þ/e/_/_/n/k/e(CVAACCV)
þ/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_/n/k', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (1)
					> version: þ/e/o/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', 'o', '_', '_', 'h']
				þ/e/o/_/h(CVVAC)
þ/e/o/_/_/h(CVVAAC)
				version split: ['þ', 'e', 'o', '_', 'h']
				{'string': 'þ/e/o/_/h', 'rgx': '((þ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', '_', 'h']
				version split: ['þ', 'e', 'o', '_', '_', 'h']
				{'string': 'þ/e/o/_/_/h', 'rgx': '((þ))/((eo)|(e))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', '_', '_', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: _/y/i/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: _/y/i/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					> version: _/y/i/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', '_', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', '_', '_', 'ng', 'e']
				_/y/i/_/n/g/e(AAAACCV)
_/y/i/_/n/g/e(AAAACCV)
_/y/i/_/ng/e(AAAACV)
_/y/i/_/ng/e(AAAACV)
_/y/i/_/_/n/g/e(AAAAACCV)
_/y/i/_/_/n/g/e(AAAAACCV)
_/y/i/_/_/ng/e(AAAAACV)
_/y/i/_/_/ng/e(AAAAACV)
				version split: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_/n/g', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_/n/g', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', '_', 'ng', 'e']
				{'string': '_/y/i/_/ng/e', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', 'ng', 'e']
				version split: ['_', 'y', 'i', '_', 'ng', 'e']
				{'string': '_/y/i/_/ng/e', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', 'ng', 'e']
				version split: ['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_/_/n', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				{'string': '_/y/i/_/_/n', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', '_', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', '_', '_', 'ng', 'e']
				{'string': '_/y/i/_/_/ng', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', '_', 'ng', 'e']
				version split: ['_', 'y', 'i', '_', '_', 'ng', 'e']
				{'string': '_/y/i/_/_/ng', 'rgx': '((_))/((y))/((i))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'i', '_', '_', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/n/ch(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/_/ð
					TRYING: ð
					adding blocked set: C = C >> h, ð, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ð']
				þ/o/_/_/ð(CVAAC)
þ/o/_/_/_/ð(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'ð']
				{'string': 'þ/o/_/_/ð', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ð']
				version split: ['þ', 'o', '_', '_', '_', 'ð']
				{'string': 'þ/o/_/_/_/ð', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					> version: þ/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'gh']
				þ/o/_/_/g/h(CVAACC)
þ/o/_/_/gh(CVAAC)
þ/o/_/_/_/g/h(CVAAACC)
þ/o/_/_/_/gh(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_/g/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'g', 'h']
				version split: ['þ', 'o', '_', '_', 'gh']
				{'string': 'þ/o/_/_/gh', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'gh']
				version split: ['þ', 'o', '_', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_/_/g', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'g', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'gh']
				{'string': 'þ/o/_/_/_/gh', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'h']
				þ/o/_/_/h(CVAAC)
þ/o/_/_/_/h(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'h']
				{'string': 'þ/o/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'h']
				{'string': 'þ/o/_/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
_/y/o/_/_/h(AAVAAC)
_/y/o/_/_/h(AAVAAC)
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/_/h/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'h', 'h']
				þ/o/_/_/h/h(CVAACC)
þ/o/_/_/_/h/h(CVAAACC)
				version split: ['þ', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_/h/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'h', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/_/c/h
					TRYING: c
					adding blocked set: C = C >> h, _, c, k, t
					> version: þ/o/_/_/ch
					TRYING: ch
					adding blocked set: C = C >> h, _, k, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ch']
				þ/o/_/_/c/h(CVAACC)
þ/o/_/_/ch(CVAAC)
þ/o/_/_/_/c/h(CVAAACC)
þ/o/_/_/_/ch(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_/c/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'c', 'h']
				version split: ['þ', 'o', '_', '_', 'ch']
				{'string': 'þ/o/_/_/ch', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ch']
				version split: ['þ', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_/_/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'c', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'ch']
				{'string': 'þ/o/_/_/_/ch', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ch']
				ANALYSING: þou
					resolving (2)
					> version: þ/o/u/_
					> version: þ/o/u/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_']
				þ/o/u/_(CVAA)
þ/o/u/_(CVAA)
þ/o/u/_/_(CVAAA)
þ/o/u/_/_(CVAAA)
				version split: ['þ', 'o', 'u', '_']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_']
				version split: ['þ', 'o', 'u', '_']
				{'string': 'þ/o/u/_', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_']
				version split: ['þ', 'o', 'u', '_', '_']
				{'string': 'þ/o/u/_/_', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				version split: ['þ', 'o', 'u', '_', '_']
				{'string': 'þ/o/u/_/_', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/u/_/c
					TRYING: c
					adding blocked set: C = C >> h, _, c, k, t
					> version: þ/o/u/_/c
					TRYING: c
					adding blocked set: C = C >> h, _, c, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'c']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'c']
				þ/o/u/_/c(CVAAC)
þ/o/u/_/c(CVAAC)
þ/o/u/_/_/c(CVAAAC)
þ/o/u/_/_/c(CVAAAC)
				version split: ['þ', 'o', 'u', '_', 'c']
				{'string': 'þ/o/u/_/c', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'c']
				version split: ['þ', 'o', 'u', '_', 'c']
				{'string': 'þ/o/u/_/c', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'c']
				version split: ['þ', 'o', 'u', '_', '_', 'c']
				{'string': 'þ/o/u/_/_/c', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'c']
				version split: ['þ', 'o', 'u', '_', '_', 'c']
				{'string': 'þ/o/u/_/_/c', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'c']
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/u/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					> version: þ/o/u/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'h']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'h']
				þ/o/u/_/h(CVAAC)
þ/o/u/_/h(CVAAC)
þ/o/u/_/_/h(CVAAAC)
þ/o/u/_/_/h(CVAAAC)
				version split: ['þ', 'o', 'u', '_', 'h']
				{'string': 'þ/o/u/_/h', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'h']
				version split: ['þ', 'o', 'u', '_', 'h']
				{'string': 'þ/o/u/_/h', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'h']
				version split: ['þ', 'o', 'u', '_', '_', 'h']
				{'string': 'þ/o/u/_/_/h', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'h']
				version split: ['þ', 'o', 'u', '_', '_', 'h']
				{'string': 'þ/o/u/_/_/h', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'h']
				ANALYSING: youh
					resolving (2)
					> version: _/y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: _/y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'u', 'h']
				_/y/o/_/u/h(AAVAAC)
_/y/o/_/u/h(AAVAAC)
_/y/o/_/_/u/h(AAVAAAC)
_/y/o/_/_/u/h(AAVAAAC)
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_/u/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'u', 'h']
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_/u/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'u', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'u', 'h']
				{'string': '_/y/o/_/_/u', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'u', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'u', 'h']
				{'string': '_/y/o/_/_/u', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'u', 'h']
				ANALYSING: þous
					resolving (2)
					> version: þ/o/u/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					> version: þ/o/u/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 's']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 's']
				þ/o/u/_/s(CVAAC)
þ/o/u/_/s(CVAAC)
þ/o/u/_/_/s(CVAAAC)
þ/o/u/_/_/s(CVAAAC)
				version split: ['þ', 'o', 'u', '_', 's']
				{'string': 'þ/o/u/_/s', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 's']
				version split: ['þ', 'o', 'u', '_', 's']
				{'string': 'þ/o/u/_/s', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 's']
				version split: ['þ', 'o', 'u', '_', '_', 's']
				{'string': 'þ/o/u/_/_/s', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 's']
				version split: ['þ', 'o', 'u', '_', '_', 's']
				{'string': 'þ/o/u/_/_/s', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 's']
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, _, ȝ, k, t
					> version: þ/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, _, ȝ, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'ȝ']
				adding dashed alternative: ['þ', 'o', 'u', '_', '_', 'ȝ']
				þ/o/u/_/ȝ(CVAAC)
þ/o/u/_/ȝ(CVAAC)
þ/o/u/_/_/ȝ(CVAAAC)
þ/o/u/_/_/ȝ(CVAAAC)
				version split: ['þ', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/o/u/_/ȝ', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'ȝ']
				version split: ['þ', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/o/u/_/ȝ', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', 'ȝ']
				version split: ['þ', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'þ/o/u/_/_/ȝ', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'ȝ']
				version split: ['þ', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'þ/o/u/_/_/ȝ', 'rgx': '((þ))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', '_', '_', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, k, t
					> version: þ/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> h, w, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'w', 'th']
				þ/o/_/_/w/t/h(CVAACCC)
þ/o/_/_/w/th(CVAACC)
þ/o/_/_/_/w/t/h(CVAAACCC)
þ/o/_/_/_/w/th(CVAAACC)
				version split: ['þ', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/w/t', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/w/th', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'w', 'th']
				version split: ['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/o/_/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'þ/o/_/_/_/w', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, _, ȝ, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ȝ']
				þ/o/_/_/ȝ(CVAAC)
þ/o/_/_/_/ȝ(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/u/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/u/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n']
				þ/u/_/_/n(CAAAC)
þ/u/_/_/n(CAAAC)
þ/u/_/_/_/n(CAAAAC)
þ/u/_/_/_/n(CAAAAC)
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', '_', 'n']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', '_', 'n']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/u/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/u/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/u/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n', 'ch']
				þ/u/_/_/n/c/h(CAAACCC)
þ/u/_/_/n/c/h(CAAACCC)
þ/u/_/_/n/ch(CAAACC)
þ/u/_/_/n/ch(CAAACC)
þ/u/_/_/_/n/c/h(CAAAACCC)
þ/u/_/_/_/n/c/h(CAAAACCC)
þ/u/_/_/_/n/ch(CAAAACC)
þ/u/_/_/_/n/ch(CAAAACC)
				version split: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_/n/c', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_/n/c', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_/n/ch', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n', 'ch']
				version split: ['þ', 'u', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_/n/ch', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n', 'ch']
				version split: ['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'u', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'u', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, _, z, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['th', 'o', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', 'o', 'u', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['th', 'o', 'u', 'g', 'h']
		SPLIT: ['þ', 'e', 'i', 'n', 'k']
		SPLIT: ['þ', 'o', 'u', 'h', 't']
		SPLIT: ['þ', 'o', 'u', 't', 'h']
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['th', 'o', '_', '_', '_']
		['th', 'o', '_', '_', '_']
		SPLIT: ["['th']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['eo', 'e']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['i']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', 'o', 'u', '_', '_']
		['þ', 'o', 'u', '_', '_']
		['þ', 'o', 'u', '_', '_']
		SPLIT: ["['þ']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCC is INVALID
		[{'n', 'h', 'g', '_', 't'}, {'k', '_', 't', 'h'}]
		54
		OVERVIEW: version for pattern CVVCC
{'n', 'h', 'g', '_', 't'}, {'k', '_', 't', 'h'}
faulty splits: 54
['ð']['e'][''][''][''] <-! ðen
['ð']['e'][''][''][''] <-! ðenc
['ð']['e'][''][''][''] <-! ðench
['ð']['e'][''][''][''] <-! ðenke
['ð'][''][''][''][''] <-! ðhenk
['ð'][''][''][''][''] <-! ðhog
['ð']['i'][''][''][''] <-! ðing
['ð']['o'][''][''][''] <-! ðod
['ð']['o'][''][''][''] <-! ðog
['ð']['o'][''][''][''] <-! ðoh
['ð']['o'][''][''][''] <-! ðoƿg
['']['e'][''][''][''] <-! es
[''][''][''][''][''] <-! s
['th']['e'][''][''][''] <-! thenke
['th']['i'][''][''][''] <-! think
['th'][''][''][''][''] <-! thnk
['th']['o'][''][''][''] <-! thogh
['th']['o'][''][''][''] <-! thoh
['th']['o'][''][''][''] <-! thowth
['th']['y'][''][''][''] <-! thynk
[''][''][''][''][''] <-! toh
['þ']['e'][''][''][''] <-! þen
['þ']['e'][''][''][''] <-! þenc
['þ']['e'][''][''][''] <-! þencke
['þ']['e'][''][''][''] <-! þeng
['þ']['e'][''][''][''] <-! þenge
['þ']['e'][''][''][''] <-! þench
['þ']['e'][''][''][''] <-! þenche
['þ']['e'][''][''][''] <-! þenk
['þ']['e'][''][''][''] <-! þenke
['']['y']['e'][''][''] <-! yenke
['þ']['eo', 'e']['o'][''][''] <-! þeoh
['þ']['i'][''][''][''] <-! þinc
['']['y']['i'][''][''] <-! yinge
['þ']['i'][''][''][''] <-! þinch
['þ']['i'][''][''][''] <-! þink
['þ']['i'][''][''][''] <-! þinke
['þ']['o'][''][''][''] <-! þoð
['þ']['o'][''][''][''] <-! þogh
['þ']['o'][''][''][''] <-! þoh
['']['y']['o'][''][''] <-! yoh
['þ']['o'][''][''][''] <-! þohh
['þ']['o'][''][''][''] <-! þoch
['þ']['o']['u'][''][''] <-! þouc
['þ']['o']['u'][''][''] <-! þouh
['']['y']['o'][''][''] <-! youh
['þ']['o']['u'][''][''] <-! þous
['þ']['o']['u'][''][''] <-! þouȝ
['þ']['o'][''][''][''] <-! þowth
['þ']['o'][''][''][''] <-! þoȝ
['þ']['u'][''][''][''] <-! þun
['þ']['u'][''][''][''] <-! þunch
['þ']['y'][''][''][''] <-! þynk
[''][''][''][''][''] <-! zenke
th | o | u | g | h
þ | e | i | n | k
þ | o | u | h | t
þ | o | u | t | h
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['i'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['th'] | ['e'] | ['_'] | ['_'] | ['_']
['th'] | ['i'] | ['_'] | ['_'] | ['_']
['th'] | ['_'] | ['_'] | ['_'] | ['_']
th | o | _ | _ | _
['th'] | ['o'] | ['_'] | ['_'] | ['_']
['th'] | ['o'] | ['_'] | ['_'] | ['_']
['th'] | ['o'] | ['_'] | ['_'] | ['_']
['th'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
þ | _ | _ | _ | _
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['e'] | ['_'] | ['_']
['þ'] | ['eo', 'e'] | ['o'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['i'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['o'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
þ | o | u | _ | _
['þ'] | ['o'] | ['u'] | ['_'] | ['_']
['þ'] | ['o'] | ['u'] | ['_'] | ['_']
['_'] | ['y'] | ['o'] | ['_'] | ['_']
['þ'] | ['o'] | ['u'] | ['_'] | ['_']
['þ'] | ['o'] | ['u'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['u'] | ['_'] | ['_'] | ['_']
['þ'] | ['u'] | ['_'] | ['_'] | ['_']
['þ'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'þ', 'ð', 'th', '_', 't'},{'y', 'þ', 'ð', 'th', '_'},{'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'þ', 'ð', 'th', '_', 's'},{'y', 'þ', 'ð', 'th', '_'}
3 : {'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 's', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', 'u', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'd', 't'},{'n', 'h', 'g', '_', 's', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'z', 't'},{'n', 'h', 'g', '_', 's', 't'},{'n', 'h', 'g', '_', 'ƿ', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', 'u', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't', 'ch'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'g', 'n', 't', 'h'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ȝ', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ȝ', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 's', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'w', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ȝ', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'w', 't'},{'gh', 'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'w', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'},{'gh', 'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'ð', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 't'},{'n', 'h', 'g', '_', 'ng', 't'}
4 : {'n', 'h', '_', 'k', 't'},{'gh', 'h', '_', 'k', 't'},{'h', '_', 'c', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'c', 'k', 't'},{'h', '_', 's', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'h', '_', 'ƿ', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 's', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'd', 'k', 't'},{'h', '_', 'z', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ȝ', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ȝ', 'k', 't'},{'h', 'w', '_', 'k', 't'},{'k', '_', 't', 'h'},{'h', '_', 'k', 't', 'ch'},{'n', 'h', '_', 'k', 't'},{'gh', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', 'w', '_', 'k', 't'},{'h', 'w', '_', 'k', 't'},{'h', '_', 's', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'h', '_', 'ȝ', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 's', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', 'n', 't', 'h'},{'h', 'u', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'h', 'ð', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'c', 'k', 't'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: VVCCV
	Selection for pattern: VVCCV completed
	Making a version for pattern: VVCCV
			___VVCCV : 0___
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: yinge
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n']
				ð/e/n(CVC)
_/ð/e/n(ACVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['_', 'ð', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
_/ð/e/n/c(ACVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['_', 'ð', 'e', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
_/ð/e/n/c/h(ACVCCC)
_/ð/e/n/ch(ACVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'e', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
_/ð/e/n/k/e(ACVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'h', 'e', 'n', 'k']
				ð/h/e/n/k(CCVCC)
_/ð/h/e/n/k(ACCVCC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'h', 'o', 'g']
				ð/h/o/g(CCVC)
_/ð/h/o/g(ACCVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['_', 'ð', 'h', 'o', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', 'ð', 'i', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
_/ð/i/n/g(ACACC)
_/ð/i/n/g(ACACC)
_/ð/i/ng(ACAC)
_/ð/i/ng(ACAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'd']
				ð/o/d(CVC)
_/ð/o/d(ACVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['_', 'ð', 'o', 'd']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'g']
				ð/o/g(CVC)
_/ð/o/g(ACVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['_', 'ð', 'o', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'h']
				ð/o/h(CVC)
_/ð/o/h(ACVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['_', 'ð', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', 'ð', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
_/ð/o/ƿ/g(ACVCC)
_/ð/oƿ/g(ACVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ð', 'oƿ', 'g']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((e))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					> version: th/e/n/k/e
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'th', 'e', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
th/e/n/k/e(CVCCV)
_/t/h/e/n/k/e(ACCVCCV)
_/th/e/n/k/e(ACVCCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				version split: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					> version: t/h/i/n/k
					TRYING: t
					> version: th/i/n/k
					TRYING: th
					> version: th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
th/i/n/k(CCCC)
th/i/n/k(CVCC)
_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'n', 'k']
				t/h/n/k(CCCC)
th/n/k(CCC)
_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'n', 'k']
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o']
				adding dashed alternative: ['_', 'th', 'o']
				t/h/o(CCV)
th/o(CV)
_/t/h/o(ACCV)
_/th/o(ACV)
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o']
				version split: ['_', 't', 'h', 'o']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					> version: t/h/o/gh
					TRYING: t
					> version: th/o/g/h
					TRYING: th
					> version: th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
th/o/g/h(CVCC)
th/o/gh(CVC)
_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'gh']
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'h']
				t/h/o/h(CCVC)
th/o/h(CVC)
_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'h']
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: though
					resolving (12)
					> version: t/h/o/u/g/h
					TRYING: t
					> version: t/h/o/u/g/h
					TRYING: t
					> version: t/h/o/u/gh
					TRYING: t
					> version: t/h/o/u/gh
					TRYING: t
					> version: th/o/u/g/h
					TRYING: th
					> version: th/o/u/g/h
					TRYING: th
					> version: t/h/ou/g/h
					TRYING: t
					> version: th/o/u/gh
					TRYING: th
					> version: th/o/u/gh
					TRYING: th
					> version: t/h/ou/gh
					TRYING: t
					> version: th/ou/g/h
					TRYING: th
					> version: th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', 'th', 'ou', 'gh']
				t/h/o/u/g/h(CCVCCC)
t/h/o/u/g/h(CCVVCC)
t/h/o/u/gh(CCVCC)
t/h/o/u/gh(CCVVC)
th/o/u/g/h(CVCCC)
th/o/u/g/h(CVVCC)
t/h/ou/g/h(CCVCC)
th/o/u/gh(CVCC)
th/o/u/gh(CVVC)
t/h/ou/gh(CCVC)
th/ou/g/h(CVCC)
th/ou/gh(CVC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'g', 'h']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'gh']
				version split: ['th', 'ou', 'g', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'g', 'h']
				version split: ['th', 'ou', 'gh']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ou', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					> version: th/o/w/t/h
					TRYING: th
					> version: t/h/ow/t/h
					TRYING: t
					> version: th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', 'th', 'ow', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
th/o/w/t/h(CVCCC)
t/h/ow/t/h(CCVCC)
th/ow/t/h(CVCC)
_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					> version: t/h/y/n/k
					TRYING: t
					> version: th/y/n/k
					TRYING: th
					> version: th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'th', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
th/y/n/k(CCCC)
th/y/n/k(CVCC)
_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'o', 'h']
				t/o/h(CVC)
_/t/o/h(ACVC)
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['_', 't', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ']
				þ(C)
_/þ(AC)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ']
				version split: ['_', 'þ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
_/þ/e/i/n/k(ACVACC)
_/þ/e/i/n/k(ACVACC)
_/þ/ei/n/k(ACVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ei', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n']
				þ/e/n(CVC)
_/þ/e/n(ACVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['_', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
_/þ/e/n/c(ACVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['_', 'þ', 'e', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
_/þ/e/n/c/k/e(ACVCCCV)
_/þ/e/n/ck/e(ACVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', 'þ', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
_/þ/e/n/g(ACVCC)
_/þ/e/ng(ACVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['_', 'þ', 'e', 'n', 'g']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'ng']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'þ', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
_/þ/e/n/g/e(ACVCCV)
_/þ/e/ng/e(ACVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
_/þ/e/n/c/h(ACVCCC)
_/þ/e/n/ch(ACVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
_/þ/e/n/c/h/e(ACVCCCV)
_/þ/e/n/ch/e(ACVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
_/þ/e/n/k(ACVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['_', 'þ', 'e', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
_/þ/e/n/k/e(ACVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', 'þ', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
_/þ/e/o/h(ACVVC)
_/þ/eo/h(ACVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['_', 'þ', 'e', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'eo', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
_/þ/i/n/c(ACACC)
_/þ/i/n/c(ACACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/ch(ACACC)
_/þ/i/n/ch(ACACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
_/þ/i/n/k(ACACC)
_/þ/i/n/k(ACACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'þ', 'i', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
_/þ/i/n/k/e(ACACCV)
_/þ/i/n/k/e(ACACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'ð']
				þ/o/ð(CVC)
_/þ/o/ð(ACVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['_', 'þ', 'o', 'ð']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
_/þ/o/g/h(ACVCC)
_/þ/o/gh(ACVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['_', 'þ', 'o', 'g', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'gh']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'h']
				þ/o/h(CVC)
_/þ/o/h(ACVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['_', 'þ', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					> version: y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
_/þ/o/h/h(ACVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['_', 'þ', 'o', 'h', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
_/þ/o/c/h(ACVCC)
_/þ/o/ch(ACVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['_', 'þ', 'o', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', 'þ', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
_/þ/o/u(ACVA)
_/þ/o/u(ACVA)
_/þ/ou(ACV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', 'þ', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
_/þ/o/u/c(ACVAC)
_/þ/o/u/c(ACVAC)
_/þ/ou/c(ACVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'c']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'þ', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
_/þ/o/u/h(ACVAC)
_/þ/o/u/h(ACVAC)
_/þ/ou/h(ACVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					> version: y/o/u/h
					TRYING: y
					> version: y/ou/h
					TRYING: y
					> version: y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', 'þ', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
_/þ/o/u/h/t(ACVACC)
_/þ/o/u/h/t(ACVACC)
_/þ/ou/h/t(ACVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'h', 't']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', 'þ', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
_/þ/o/u/s(ACVAC)
_/þ/o/u/s(ACVAC)
_/þ/ou/s(ACVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/th(ACVAC)
_/þ/o/u/th(ACVAC)
_/þ/ou/t/h(ACVCC)
_/þ/ou/th(ACVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'th']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', 'þ', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
_/þ/o/u/ȝ(ACVAC)
_/þ/o/u/ȝ(ACVAC)
_/þ/ou/ȝ(ACVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ou', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', 'þ', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
_/þ/o/w/t/h(ACVCCC)
_/þ/o/w/th(ACVCC)
_/þ/ow/t/h(ACVCC)
_/þ/ow/th(ACVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'o', 'w', 'th']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ow', 't', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'ow', 'th']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'o', 'ȝ']
				þ/o/ȝ(CVC)
_/þ/o/ȝ(ACVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['_', 'þ', 'o', 'ȝ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', 'þ', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
_/þ/u/n(ACAC)
_/þ/u/n(ACAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', 'þ', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/ch(ACACC)
_/þ/u/n/ch(ACACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', 'þ', 'y', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
_/þ/y/n/k(ACACC)
_/þ/y/n/k(ACACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___VVCCV : 1___
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: yinge
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/ð/e/n
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n']
				_/ð/e/n(ACVC)
_/_/ð/e/n(AACVC)
				version split: ['_', 'ð', 'e', 'n']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n']
				version split: ['_', '_', 'ð', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/ð/e/n/c
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'c']
				_/ð/e/n/c(ACVCC)
_/_/ð/e/n/c(AACVCC)
				version split: ['_', 'ð', 'e', 'n', 'c']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/ð/e/n/c/h
					TRYING: ð
					> version: _/ð/e/n/ch
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'ch']
				_/ð/e/n/c/h(ACVCCC)
_/ð/e/n/ch(ACVCC)
_/_/ð/e/n/c/h(AACVCCC)
_/_/ð/e/n/ch(AACVCC)
				version split: ['_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', 'ð', 'e', 'n', 'ch']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: _/ð/e/n/k/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'e', 'n', 'k', 'e']
				_/ð/e/n/k/e(ACVCCV)
_/_/ð/e/n/k/e(AACVCCV)
				version split: ['_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/ð/h/e/n/k
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/ð/h/e/n/k(ACCVCC)
_/_/ð/h/e/n/k(AACCVCC)
				version split: ['_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/ð/h/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'h', 'o', 'g']
				_/ð/h/o/g(ACCVC)
_/_/ð/h/o/g(AACCVC)
				version split: ['_', 'ð', 'h', 'o', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/ð/i/n/g
					TRYING: ð
					> version: _/ð/i/n/g
					TRYING: ð
					> version: _/ð/i/ng
					TRYING: ð
					> version: _/ð/i/ng
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', 'ð', 'i', 'ng']
				_/ð/i/n/g(ACACC)
_/ð/i/n/g(ACACC)
_/ð/i/ng(ACAC)
_/ð/i/ng(ACAC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/ng(AACAC)
_/_/ð/i/ng(AACAC)
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'n', 'g']
				version split: ['_', 'ð', 'i', 'n', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'n', 'g']
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'ng']
				version split: ['_', 'ð', 'i', 'ng']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'i', 'ng']
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/ð/o/d
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'd']
				_/ð/o/d(ACVC)
_/_/ð/o/d(AACVC)
				version split: ['_', 'ð', 'o', 'd']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'd']
				version split: ['_', '_', 'ð', 'o', 'd']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/ð/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'g']
				_/ð/o/g(ACVC)
_/_/ð/o/g(AACVC)
				version split: ['_', 'ð', 'o', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'g']
				version split: ['_', '_', 'ð', 'o', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/ð/o/h
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'h']
				_/ð/o/h(ACVC)
_/_/ð/o/h(AACVC)
				version split: ['_', 'ð', 'o', 'h']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'h']
				version split: ['_', '_', 'ð', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/ð/o/ƿ/g
					TRYING: ð
					> version: _/ð/oƿ/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', 'ð', 'oƿ', 'g']
				_/ð/o/ƿ/g(ACVCC)
_/ð/oƿ/g(ACVC)
_/_/ð/o/ƿ/g(AACVCC)
_/_/ð/oƿ/g(AACVC)
				version split: ['_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', 'ð', 'oƿ', 'g']
				{'string': '_/ð', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 's']
				e/s(VC)
e/_/s(VAC)
				version split: ['e', 's']
				{'string': 'e/s', 'rgx': '((e))/((_))$'}
				_____REMOVING________['e', 's']
				version split: ['e', '_', 's']
				{'string': 'e/_', 'rgx': '((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/t/h/e/n/k/e
					TRYING: t
					> version: _/th/e/n/k/e
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				_/t/h/e/n/k/e(ACCVCCV)
_/th/e/n/k/e(ACVCCV)
_/_/t/h/e/n/k/e(AACCVCCV)
_/_/th/e/n/k/e(AACVCCV)
				version split: ['_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/t/h/i/n/k
					TRYING: t
					> version: _/th/i/n/k
					TRYING: th
					> version: _/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'i', 'n', 'k']
				_/t/h/i/n/k(ACCACC)
_/t/h/i/n/k(ACCACC)
_/th/i/n/k(ACACC)
_/th/i/n/k(ACACC)
_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', 'th', 'i', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/t/h/n/k
					TRYING: t
					> version: _/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'n', 'k']
				_/t/h/n/k(ACCCC)
_/th/n/k(ACCC)
_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
				version split: ['_', 't', 'h', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'n', 'k']
				version split: ['_', 'th', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/t/h/o
					TRYING: t
					> version: _/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', 'th', 'o']
				_/t/h/o(ACCV)
_/th/o(ACV)
_/_/t/h/o(AACCV)
_/_/th/o(AACV)
				version split: ['_', 't', 'h', 'o']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o']
				version split: ['_', 'th', 'o']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o']
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/t/h/o/g/h
					TRYING: t
					> version: _/t/h/o/gh
					TRYING: t
					> version: _/th/o/g/h
					TRYING: th
					> version: _/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'gh']
				_/t/h/o/g/h(ACCVCC)
_/t/h/o/gh(ACCVC)
_/th/o/g/h(ACVCC)
_/th/o/gh(ACVC)
_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'gh']
				version split: ['_', 'th', 'o', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'g', 'h']
				version split: ['_', 'th', 'o', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/t/h/o/h
					TRYING: t
					> version: _/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'h']
				_/t/h/o/h(ACCVC)
_/th/o/h(ACVC)
_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
				version split: ['_', 't', 'h', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'h']
				version split: ['_', 'th', 'o', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/g/h
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/t/h/o/u/gh
					TRYING: t
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/th/o/u/g/h
					TRYING: th
					> version: _/t/h/ou/g/h
					TRYING: t
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/th/o/u/gh
					TRYING: th
					> version: _/t/h/ou/gh
					TRYING: t
					> version: _/th/ou/g/h
					TRYING: th
					> version: _/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ou', 'gh']
				_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/g/h(ACCVACC)
_/t/h/o/u/gh(ACCVAC)
_/t/h/o/u/gh(ACCVAC)
_/th/o/u/g/h(ACVACC)
_/th/o/u/g/h(ACVACC)
_/t/h/ou/g/h(ACCVCC)
_/th/o/u/gh(ACVAC)
_/th/o/u/gh(ACVAC)
_/t/h/ou/gh(ACCVC)
_/th/ou/g/h(ACVCC)
_/th/ou/gh(ACVC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 'th', 'o', 'u', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'u', 'gh']
				version split: ['_', 't', 'h', 'ou', 'gh']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ou', 'gh']
				version split: ['_', 'th', 'ou', 'g', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'g', 'h']
				version split: ['_', 'th', 'ou', 'gh']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ou', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/t/h/o/w/t/h
					TRYING: t
					> version: _/th/o/w/t/h
					TRYING: th
					> version: _/t/h/ow/t/h
					TRYING: t
					> version: _/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', 'th', 'ow', 't', 'h']
				_/t/h/o/w/t/h(ACCVCCC)
_/th/o/w/t/h(ACVCCC)
_/t/h/ow/t/h(ACCVCC)
_/th/ow/t/h(ACVCC)
_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
				version split: ['_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', 'th', 'ow', 't', 'h']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/t/h/y/n/k
					TRYING: t
					> version: _/th/y/n/k
					TRYING: th
					> version: _/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'th', 'y', 'n', 'k']
				_/t/h/y/n/k(ACCACC)
_/t/h/y/n/k(ACCACC)
_/th/y/n/k(ACACC)
_/th/y/n/k(ACACC)
_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', 'th', 'y', 'n', 'k']
				{'string': '_/th', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'o', 'h']
				_/t/o/h(ACVC)
_/_/t/o/h(AACVC)
				version split: ['_', 't', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'o', 'h']
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ']
				_/þ(AC)
_/_/þ(AAC)
				version split: ['_', 'þ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ']
				version split: ['_', '_', 'þ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/þ/e/i/n/k
					TRYING: þ
					> version: _/þ/e/i/n/k
					TRYING: þ
					> version: _/þ/ei/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'ei', 'n', 'k']
				_/þ/e/i/n/k(ACVACC)
_/þ/e/i/n/k(ACVACC)
_/þ/ei/n/k(ACVCC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/ei/n/k(AACVCC)
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', 'þ', 'ei', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/þ/e/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n']
				_/þ/e/n(ACVC)
_/_/þ/e/n(AACVC)
				version split: ['_', 'þ', 'e', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n']
				version split: ['_', '_', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/þ/e/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c']
				_/þ/e/n/c(ACVCC)
_/_/þ/e/n/c(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: _/þ/e/n/c/k/e
					TRYING: þ
					> version: _/þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'ck', 'e']
				_/þ/e/n/c/k/e(ACVCCCV)
_/þ/e/n/ck/e(ACVCCV)
_/_/þ/e/n/c/k/e(AACVCCCV)
_/_/þ/e/n/ck/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'ck', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/þ/e/n/g
					TRYING: þ
					> version: _/þ/e/ng
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'ng']
				_/þ/e/n/g(ACVCC)
_/þ/e/ng(ACVC)
_/_/þ/e/n/g(AACVCC)
_/_/þ/e/ng(AACVC)
				version split: ['_', 'þ', 'e', 'n', 'g']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'g']
				version split: ['_', 'þ', 'e', 'ng']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'ng']
				version split: ['_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'ng']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: _/þ/e/n/g/e
					TRYING: þ
					> version: _/þ/e/ng/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'ng', 'e']
				_/þ/e/n/g/e(ACVCCV)
_/þ/e/ng/e(ACVCV)
_/_/þ/e/n/g/e(AACVCCV)
_/_/þ/e/ng/e(AACVCV)
				version split: ['_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'g', 'e']
				version split: ['_', 'þ', 'e', 'ng', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'ng', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/þ/e/n/c/h
					TRYING: þ
					> version: _/þ/e/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'ch']
				_/þ/e/n/c/h(ACVCCC)
_/þ/e/n/ch(ACVCC)
_/_/þ/e/n/c/h(AACVCCC)
_/_/þ/e/n/ch(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', 'þ', 'e', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: _/þ/e/n/c/h/e
					TRYING: þ
					> version: _/þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'ch', 'e']
				_/þ/e/n/c/h/e(ACVCCCV)
_/þ/e/n/ch/e(ACVCCV)
_/_/þ/e/n/c/h/e(AACVCCCV)
_/_/þ/e/n/ch/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'ch', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/þ/e/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'k']
				_/þ/e/n/k(ACVCC)
_/_/þ/e/n/k(AACVCC)
				version split: ['_', 'þ', 'e', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: _/þ/e/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'n', 'k', 'e']
				_/þ/e/n/k/e(ACVCCV)
_/_/þ/e/n/k/e(AACVCCV)
				version split: ['_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/þ/e/o/h
					TRYING: þ
					> version: _/þ/eo/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'eo', 'h']
				_/þ/e/o/h(ACVVC)
_/þ/eo/h(ACVC)
_/_/þ/e/o/h(AACVVC)
_/_/þ/eo/h(AACVC)
				version split: ['_', 'þ', 'e', 'o', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'e', 'o', 'h']
				version split: ['_', 'þ', 'eo', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'eo', 'h']
				version split: ['_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'eo', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/þ/i/n/c
					TRYING: þ
					> version: _/þ/i/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c']
				_/þ/i/n/c(ACACC)
_/þ/i/n/c(ACACC)
_/_/þ/i/n/c(AACACC)
_/_/þ/i/n/c(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c']
				version split: ['_', 'þ', 'i', 'n', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/þ/i/n/c/h
					TRYING: þ
					> version: _/þ/i/n/c/h
					TRYING: þ
					> version: _/þ/i/n/ch
					TRYING: þ
					> version: _/þ/i/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'ch']
				_/þ/i/n/c/h(ACACCC)
_/þ/i/n/c/h(ACACCC)
_/þ/i/n/ch(ACACC)
_/þ/i/n/ch(ACACC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/ch(AACACC)
_/_/þ/i/n/ch(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'ch']
				version split: ['_', 'þ', 'i', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/þ/i/n/k
					TRYING: þ
					> version: _/þ/i/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k']
				_/þ/i/n/k(ACACC)
_/þ/i/n/k(ACACC)
_/_/þ/i/n/k(AACACC)
_/_/þ/i/n/k(AACACC)
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k']
				version split: ['_', 'þ', 'i', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: _/þ/i/n/k/e
					TRYING: þ
					> version: _/þ/i/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				_/þ/i/n/k/e(ACACCV)
_/þ/i/n/k/e(ACACCV)
_/_/þ/i/n/k/e(AACACCV)
_/_/þ/i/n/k/e(AACACCV)
				version split: ['_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/þ/o/ð
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ð']
				_/þ/o/ð(ACVC)
_/_/þ/o/ð(AACVC)
				version split: ['_', 'þ', 'o', 'ð']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ð']
				version split: ['_', '_', 'þ', 'o', 'ð']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/þ/o/g/h
					TRYING: þ
					> version: _/þ/o/gh
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'gh']
				_/þ/o/g/h(ACVCC)
_/þ/o/gh(ACVC)
_/_/þ/o/g/h(AACVCC)
_/_/þ/o/gh(AACVC)
				version split: ['_', 'þ', 'o', 'g', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'g', 'h']
				version split: ['_', 'þ', 'o', 'gh']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'gh']
				version split: ['_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'gh']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/þ/o/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'h']
				_/þ/o/h(ACVC)
_/_/þ/o/h(AACVC)
				version split: ['_', 'þ', 'o', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'h']
				version split: ['_', '_', 'þ', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: o
					> version: y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['y', 'o', 'h']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				version split: ['y', 'o', 'h']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/þ/o/h/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'h', 'h']
				_/þ/o/h/h(ACVCC)
_/_/þ/o/h/h(AACVCC)
				version split: ['_', 'þ', 'o', 'h', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/þ/o/c/h
					TRYING: þ
					> version: _/þ/o/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ch']
				_/þ/o/c/h(ACVCC)
_/þ/o/ch(ACVC)
_/_/þ/o/c/h(AACVCC)
_/_/þ/o/ch(AACVC)
				version split: ['_', 'þ', 'o', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'c', 'h']
				version split: ['_', 'þ', 'o', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ch']
				version split: ['_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/þ/o/u
					TRYING: þ
					> version: _/þ/o/u
					TRYING: þ
					> version: _/þ/ou
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', 'þ', 'ou']
				_/þ/o/u(ACVA)
_/þ/o/u(ACVA)
_/þ/ou(ACV)
_/_/þ/o/u(AACVA)
_/_/þ/o/u(AACVA)
_/_/þ/ou(AACV)
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u']
				version split: ['_', 'þ', 'o', 'u']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u']
				version split: ['_', 'þ', 'ou']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou']
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/þ/o/u/c
					TRYING: þ
					> version: _/þ/o/u/c
					TRYING: þ
					> version: _/þ/ou/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'c']
				_/þ/o/u/c(ACVAC)
_/þ/o/u/c(ACVAC)
_/þ/ou/c(ACVC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/ou/c(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'c']
				version split: ['_', 'þ', 'o', 'u', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'c']
				version split: ['_', 'þ', 'ou', 'c']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'c']
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'c']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/þ/o/u/h
					TRYING: þ
					> version: _/þ/o/u/h
					TRYING: þ
					> version: _/þ/ou/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'h']
				_/þ/o/u/h(ACVAC)
_/þ/o/u/h(ACVAC)
_/þ/ou/h(ACVC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/ou/h(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h']
				version split: ['_', 'þ', 'o', 'u', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h']
				version split: ['_', 'þ', 'ou', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: o
					> version: y/o/u/h
					TRYING: o
					> version: y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, _, ou, o
					> version: y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, e, _, ou, o
					RESULT:  ['o']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y/o', 'rgx': '((y))/((o))$'}
				version split: ['y', 'ou', 'h']
				{'string': 'y/ou', 'rgx': '((y))/((o))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y/ou', 'rgx': '((y))/((o))$'}
				_____REMOVING________['y', 'ou', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: _/þ/o/u/h/t
					TRYING: þ
					> version: _/þ/o/u/h/t
					TRYING: þ
					> version: _/þ/ou/h/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'h', 't']
				_/þ/o/u/h/t(ACVACC)
_/þ/o/u/h/t(ACVACC)
_/þ/ou/h/t(ACVCC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/ou/h/t(AACVCC)
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', 'þ', 'ou', 'h', 't']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/þ/o/u/s
					TRYING: þ
					> version: _/þ/o/u/s
					TRYING: þ
					> version: _/þ/ou/s
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 's']
				_/þ/o/u/s(ACVAC)
_/þ/o/u/s(ACVAC)
_/þ/ou/s(ACVC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/ou/s(AACVC)
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 's']
				version split: ['_', 'þ', 'o', 'u', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 's']
				version split: ['_', 'þ', 'ou', 's']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 's']
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/þ/o/u/t/h
					TRYING: þ
					> version: _/þ/o/u/t/h
					TRYING: þ
					> version: _/þ/o/u/th
					TRYING: þ
					> version: _/þ/o/u/th
					TRYING: þ
					> version: _/þ/ou/t/h
					TRYING: þ
					> version: _/þ/ou/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'th']
				_/þ/o/u/t/h(ACVACC)
_/þ/o/u/t/h(ACVACC)
_/þ/o/u/th(ACVAC)
_/þ/o/u/th(ACVAC)
_/þ/ou/t/h(ACVCC)
_/þ/ou/th(ACVC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/ou/t/h(AACVCC)
_/_/þ/ou/th(AACVC)
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'th']
				version split: ['_', 'þ', 'o', 'u', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'th']
				version split: ['_', 'þ', 'ou', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 't', 'h']
				version split: ['_', 'þ', 'ou', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'th']
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/þ/o/u/ȝ
					TRYING: þ
					> version: _/þ/o/u/ȝ
					TRYING: þ
					> version: _/þ/ou/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', 'þ', 'ou', 'ȝ']
				_/þ/o/u/ȝ(ACVAC)
_/þ/o/u/ȝ(ACVAC)
_/þ/ou/ȝ(ACVC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/ou/ȝ(AACVC)
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', 'þ', 'ou', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/þ/o/w/t/h
					TRYING: þ
					> version: _/þ/o/w/th
					TRYING: þ
					> version: _/þ/ow/t/h
					TRYING: þ
					> version: _/þ/ow/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'ow', 'th']
				_/þ/o/w/t/h(ACVCCC)
_/þ/o/w/th(ACVCC)
_/þ/ow/t/h(ACVCC)
_/þ/ow/th(ACVC)
_/_/þ/o/w/t/h(AACVCCC)
_/_/þ/o/w/th(AACVCC)
_/_/þ/ow/t/h(AACVCC)
_/_/þ/ow/th(AACVC)
				version split: ['_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', 'þ', 'o', 'w', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'w', 'th']
				version split: ['_', 'þ', 'ow', 't', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ow', 't', 'h']
				version split: ['_', 'þ', 'ow', 'th']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'ow', 'th']
				version split: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'ow', 'th']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/þ/o/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'o', 'ȝ']
				_/þ/o/ȝ(ACVC)
_/_/þ/o/ȝ(AACVC)
				version split: ['_', 'þ', 'o', 'ȝ']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/þ/u/n
					TRYING: þ
					> version: _/þ/u/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n']
				_/þ/u/n(ACAC)
_/þ/u/n(ACAC)
_/_/þ/u/n(AACAC)
_/_/þ/u/n(AACAC)
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n']
				version split: ['_', 'þ', 'u', 'n']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n']
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/þ/u/n/c/h
					TRYING: þ
					> version: _/þ/u/n/c/h
					TRYING: þ
					> version: _/þ/u/n/ch
					TRYING: þ
					> version: _/þ/u/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', 'þ', 'u', 'n', 'ch']
				_/þ/u/n/c/h(ACACCC)
_/þ/u/n/c/h(ACACCC)
_/þ/u/n/ch(ACACC)
_/þ/u/n/ch(ACACC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/ch(AACACC)
_/_/þ/u/n/ch(AACACC)
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'ch']
				version split: ['_', 'þ', 'u', 'n', 'ch']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/þ/y/n/k
					TRYING: þ
					> version: _/þ/y/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', 'þ', 'y', 'n', 'k']
				_/þ/y/n/k(ACACC)
_/þ/y/n/k(ACACC)
_/_/þ/y/n/k(AACACC)
_/_/þ/y/n/k(AACACC)
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'y', 'n', 'k']
				version split: ['_', 'þ', 'y', 'n', 'k']
				{'string': '_/þ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCCV : 2___
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: yinge
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> ð, n
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n']
				_/_/ð/e/n(AACVC)
_/_/_/ð/e/n(AAACVC)
				version split: ['_', '_', 'ð', 'e', 'n']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/ð/e/n/c
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/ð/e/n/c(AACVCC)
_/_/_/ð/e/n/c(AAACVCC)
				version split: ['_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/_/ð/e/n/c/h
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/e/n/ch
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/ð/e/n/c/h(AACVCCC)
_/_/ð/e/n/ch(AACVCC)
_/_/_/ð/e/n/c/h(AAACVCCC)
_/_/_/ð/e/n/ch(AAACVCC)
				version split: ['_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: _/_/ð/e/n/k/e
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				_/_/ð/e/n/k/e(AACVCCV)
_/_/_/ð/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/ð/h/e/n/k
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/ð/h/e/n/k(AACCVCC)
_/_/_/ð/h/e/n/k(AAACCVCC)
				version split: ['_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/ð/h/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/ð/h/o/g(AACCVC)
_/_/_/ð/h/o/g(AAACCVC)
				version split: ['_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', 'ð', 'i', 'ng']
				_/_/ð/i/n/g(AACACC)
_/_/ð/i/n/g(AACACC)
_/_/ð/i/ng(AACAC)
_/_/ð/i/ng(AACAC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/ð/i/ng(AAACAC)
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/_/ð/o/d
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'd']
				_/_/ð/o/d(AACVC)
_/_/_/ð/o/d(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'd']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/_/ð/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'g']
				_/_/ð/o/g(AACVC)
_/_/_/ð/o/g(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/ð/o/h
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'h']
				_/_/ð/o/h(AACVC)
_/_/_/ð/o/h(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'h']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/ð/o/ƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					> version: _/_/ð/oƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/ð/o/ƿ/g(AACVCC)
_/_/ð/oƿ/g(AACVC)
_/_/_/ð/o/ƿ/g(AAACVCC)
_/_/_/ð/oƿ/g(AAACVC)
				version split: ['_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/ð', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: e/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['e', '_', 's']
				{'string': 'e/_/s', 'rgx': '((e))/((_))/((s))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['s']
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((s))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/t/h/e/n/k/e(AACCVCCV)
_/_/th/e/n/k/e(AACVCCV)
_/_/_/t/h/e/n/k/e(AAACCVCCV)
_/_/_/th/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/t/h/i/n/k(AACCACC)
_/_/t/h/i/n/k(AACCACC)
_/_/th/i/n/k(AACACC)
_/_/th/i/n/k(AACACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'n', 'k']
				_/_/t/h/n/k(AACCCC)
_/_/th/n/k(AACCC)
_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
				version split: ['_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', 'th', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', 'th', 'o']
				_/_/t/h/o(AACCV)
_/_/th/o(AACV)
_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
				version split: ['_', '_', 't', 'h', 'o']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o']
				version split: ['_', '_', 'th', 'o']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o']
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'gh']
				_/_/t/h/o/g/h(AACCVCC)
_/_/t/h/o/gh(AACCVC)
_/_/th/o/g/h(AACVCC)
_/_/th/o/gh(AACVC)
_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'h']
				_/_/t/h/o/h(AACCVC)
_/_/th/o/h(AACVC)
_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', 'th', 'o', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ou', 'gh']
				_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/g/h(AACCVACC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/t/h/o/u/gh(AACCVAC)
_/_/th/o/u/g/h(AACVACC)
_/_/th/o/u/g/h(AACVACC)
_/_/t/h/ou/g/h(AACCVCC)
_/_/th/o/u/gh(AACVAC)
_/_/th/o/u/gh(AACVAC)
_/_/t/h/ou/gh(AACCVC)
_/_/th/ou/g/h(AACVCC)
_/_/th/ou/gh(AACVC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/t/h/o/w/t/h(AACCVCCC)
_/_/th/o/w/t/h(AACVCCC)
_/_/t/h/ow/t/h(AACCVCC)
_/_/th/ow/t/h(AACVCC)
_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
				version split: ['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					> version: _/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> th, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/t/h/y/n/k(AACCACC)
_/_/t/h/y/n/k(AACCACC)
_/_/th/y/n/k(AACACC)
_/_/th/y/n/k(AACACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/th', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> n, t, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'o', 'h']
				_/_/t/o/h(AACVC)
_/_/_/t/o/h(AAACVC)
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/_/þ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ']
				_/_/þ(AAC)
_/_/_/þ(AAAC)
				version split: ['_', '_', 'þ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ']
				version split: ['_', '_', '_', 'þ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ei/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/þ/e/i/n/k(AACVACC)
_/_/þ/e/i/n/k(AACVACC)
_/_/þ/ei/n/k(AACVCC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/ei/n/k(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/_/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n']
				_/_/þ/e/n(AACVC)
_/_/_/þ/e/n(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/_/þ/e/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/þ/e/n/c(AACVCC)
_/_/_/þ/e/n/c(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: _/_/þ/e/n/c/k/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/n/ck/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				_/_/þ/e/n/c/k/e(AACVCCCV)
_/_/þ/e/n/ck/e(AACVCCV)
_/_/_/þ/e/n/c/k/e(AAACVCCCV)
_/_/_/þ/e/n/ck/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'ck', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/_/þ/e/n/g
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/ng
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'ng']
				_/_/þ/e/n/g(AACVCC)
_/_/þ/e/ng(AACVC)
_/_/_/þ/e/n/g(AAACVCC)
_/_/_/þ/e/ng(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: _/_/þ/e/n/g/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/ng/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'ng', 'e']
				_/_/þ/e/n/g/e(AACVCCV)
_/_/þ/e/ng/e(AACVCV)
_/_/_/þ/e/n/g/e(AAACVCCV)
_/_/_/þ/e/ng/e(AAACVCV)
				version split: ['_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'g', 'e']
				version split: ['_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'ng', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/_/þ/e/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/þ/e/n/c/h(AACVCCC)
_/_/þ/e/n/ch(AACVCC)
_/_/_/þ/e/n/c/h(AAACVCCC)
_/_/_/þ/e/n/ch(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: _/_/þ/e/n/c/h/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/e/n/ch/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				_/_/þ/e/n/c/h/e(AACVCCCV)
_/_/þ/e/n/ch/e(AACVCCV)
_/_/_/þ/e/n/c/h/e(AAACVCCCV)
_/_/_/þ/e/n/ch/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'ch', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/_/þ/e/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/þ/e/n/k(AACVCC)
_/_/_/þ/e/n/k(AAACVCC)
				version split: ['_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: _/_/þ/e/n/k/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				_/_/þ/e/n/k/e(AACVCCV)
_/_/_/þ/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/þ/e/o/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/eo/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'eo', 'h']
				_/_/þ/e/o/h(AACVVC)
_/_/þ/eo/h(AACVC)
_/_/_/þ/e/o/h(AAACVVC)
_/_/_/þ/eo/h(AAACVC)
				version split: ['_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/þ/i/n/c(AACACC)
_/_/þ/i/n/c(AACACC)
_/_/_/þ/i/n/c(AAACACC)
_/_/_/þ/i/n/c(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/c/h(AACACCC)
_/_/þ/i/n/ch(AACACC)
_/_/þ/i/n/ch(AACACC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/þ/i/n/ch(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/þ/i/n/k(AACACC)
_/_/þ/i/n/k(AACACC)
_/_/_/þ/i/n/k(AAACACC)
_/_/_/þ/i/n/k(AAACACC)
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: _/_/þ/i/n/k/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/i/n/k/e
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				_/_/þ/i/n/k/e(AACACCV)
_/_/þ/i/n/k/e(AACACCV)
_/_/_/þ/i/n/k/e(AAACACCV)
_/_/_/þ/i/n/k/e(AAACACCV)
				version split: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/_/þ/o/ð
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ð']
				_/_/þ/o/ð(AACVC)
_/_/_/þ/o/ð(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/_/þ/o/g/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/gh
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'gh']
				_/_/þ/o/g/h(AACVCC)
_/_/þ/o/gh(AACVC)
_/_/_/þ/o/g/h(AAACVCC)
_/_/_/þ/o/gh(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/_/þ/o/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'h']
				_/_/þ/o/h(AACVC)
_/_/_/þ/o/h(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, s, _
					> version: y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, s, _
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', '_', 'h']
				adding dashed alternative: ['y', 'o', '_', 'h']
				y/o/h(CVC)
y/o/h(VVC)
y/o/_/h(AVAC)
y/o/_/h(AVAC)
				version split: ['y', 'o', 'h']
				{'string': 'y/o/h', 'rgx': '((y))/((o))/((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y/o/h', 'rgx': '((y))/((o))/((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', '_', 'h']
				{'string': 'y/o/_', 'rgx': '((y))/((o))/((_))$'}
				version split: ['y', 'o', '_', 'h']
				{'string': 'y/o/_', 'rgx': '((y))/((o))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/_/þ/o/h/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/þ/o/h/h(AACVCC)
_/_/_/þ/o/h/h(AAACVCC)
				version split: ['_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/_/þ/o/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ch']
				_/_/þ/o/c/h(AACVCC)
_/_/þ/o/ch(AACVC)
_/_/_/þ/o/c/h(AAACVCC)
_/_/_/þ/o/ch(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou']
				_/_/þ/o/u(AACVA)
_/_/þ/o/u(AACVA)
_/_/þ/ou(AACV)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/ou(AAACV)
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', 'þ', 'o', 'u']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', 'þ', 'ou']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/c
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'c']
				_/_/þ/o/u/c(AACVAC)
_/_/þ/o/u/c(AACVAC)
_/_/þ/ou/c(AACVC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/ou/c(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'h']
				_/_/þ/o/u/h(AACVAC)
_/_/þ/o/u/h(AACVAC)
_/_/þ/ou/h(AACVC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/ou/h(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (2)
					> version: y/o/u/h
					TRYING: u
					adding blocked set: C = C >> u, n, s, _
					> version: y/o/u/h
					TRYING: u
					adding blocked set: C = C >> u, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', '_', 'u', 'h']
				adding dashed alternative: ['y', 'o', '_', 'u', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/o/_/u/h(AVAAC)
y/o/_/u/h(AVAAC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y/o/u', 'rgx': '((y))/((o))/((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y/o/u', 'rgx': '((y))/((o))/((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', '_', 'u', 'h']
				{'string': 'y/o/_', 'rgx': '((y))/((o))/((_))$'}
				version split: ['y', 'o', '_', 'u', 'h']
				{'string': 'y/o/_', 'rgx': '((y))/((o))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: _/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/h/t
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/þ/o/u/h/t(AACVACC)
_/_/þ/o/u/h/t(AACVACC)
_/_/þ/ou/h/t(AACVCC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/ou/h/t(AAACVCC)
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/s
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 's']
				_/_/þ/o/u/s(AACVAC)
_/_/þ/o/u/s(AACVAC)
_/_/þ/ou/s(AACVC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/ou/s(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', 'þ', 'ou', 's']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'th']
				_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/t/h(AACVACC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/o/u/th(AACVAC)
_/_/þ/ou/t/h(AACVCC)
_/_/þ/ou/th(AACVC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/ou/t/h(AAACVCC)
_/_/_/þ/ou/th(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ou/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/o/u/ȝ(AACVAC)
_/_/þ/ou/ȝ(AACVC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/ou/ȝ(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/_/þ/o/w/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/o/w/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ow/t/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/ow/th
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'ow', 'th']
				_/_/þ/o/w/t/h(AACVCCC)
_/_/þ/o/w/th(AACVCC)
_/_/þ/ow/t/h(AACVCC)
_/_/þ/ow/th(AACVC)
_/_/_/þ/o/w/t/h(AAACVCCC)
_/_/_/þ/o/w/th(AAACVCC)
_/_/_/þ/ow/t/h(AAACVCC)
_/_/_/þ/ow/th(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/þ/o/ȝ
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/þ/o/ȝ(AACVC)
_/_/_/þ/o/ȝ(AAACVC)
				version split: ['_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n']
				_/_/þ/u/n(AACAC)
_/_/þ/u/n(AACAC)
_/_/_/þ/u/n(AAACAC)
_/_/_/þ/u/n(AAACAC)
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', 'þ', 'u', 'n']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/c/h(AACACCC)
_/_/þ/u/n/ch(AACACC)
_/_/þ/u/n/ch(AACACC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/þ/u/n/ch(AAACACC)
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					> version: _/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> þ, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/þ/y/n/k(AACACC)
_/_/þ/y/n/k(AACACC)
_/_/_/þ/y/n/k(AAACACC)
_/_/_/þ/y/n/k(AAACACC)
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/þ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> z, n, s, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VVCCV : 3___
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: yinge
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/_/ð/e/n
					TRYING: ð
					adding blocked set: C = C >> ð, g, k
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n']
				_/_/_/ð/e/n(AAACVC)
_/_/_/_/ð/e/n(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/_/ð/e/n/c
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/_/ð/e/n/c(AAACVCC)
_/_/_/_/ð/e/n/c(AAAACVCC)
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: _/_/_/ð/e/n/c/h
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					> version: _/_/_/ð/e/n/ch
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/_/ð/e/n/c/h(AAACVCCC)
_/_/_/ð/e/n/ch(AAACVCC)
_/_/_/_/ð/e/n/c/h(AAAACVCCC)
_/_/_/_/ð/e/n/ch(AAAACVCC)
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: _/_/_/ð/e/n/k/e
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				_/_/_/ð/e/n/k/e(AAACVCCV)
_/_/_/_/ð/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/_/ð/h/e/n/k
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/_/ð/h/e/n/k(AAACCVCC)
_/_/_/_/ð/h/e/n/k(AAAACCVCC)
				version split: ['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/_/ð/h/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/_/ð/h/o/g(AAACCVC)
_/_/_/_/ð/h/o/g(AAAACCVC)
				version split: ['_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: _/_/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					> version: _/_/_/ð/i/n/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					> version: _/_/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					> version: _/_/_/ð/i/ng
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/n/g(AAACACC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/ð/i/ng(AAACAC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/ð/i/ng(AAAACAC)
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: _/_/_/ð/o/d
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'd']
				_/_/_/ð/o/d(AAACVC)
_/_/_/_/ð/o/d(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: _/_/_/ð/o/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'g']
				_/_/_/ð/o/g(AAACVC)
_/_/_/_/ð/o/g(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/_/ð/o/h
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'h']
				_/_/_/ð/o/h(AAACVC)
_/_/_/_/ð/o/h(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/_/ð/o/ƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					> version: _/_/_/ð/oƿ/g
					TRYING: ð
					adding blocked set: C = C >> ð, g, k, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/_/ð/o/ƿ/g(AAACVCC)
_/_/_/ð/oƿ/g(AAACVC)
_/_/_/_/ð/o/ƿ/g(AAAACVCC)
_/_/_/_/ð/oƿ/g(AAAACVC)
				version split: ['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: e/_/s
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 's', '_']
				e/_/s(VAC)
e/_/s/_(VACA)
				version split: ['e', '_', 's']
				{'string': 'e/_/s', 'rgx': '((e))/((_))/((s))/((_))$'}
				_____REMOVING________['e', '_', 's']
				version split: ['e', '_', 's', '_']
				{'string': 'e/_/s/_', 'rgx': '((e))/((_))/((s))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', '_']
				_/_/s(AAC)
_/_/s/_(AACA)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((s))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', 's', '_']
				{'string': '_/_/s/_', 'rgx': '((_))/((_))/((s))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/_/t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/_/t/h/e/n/k/e(AAACCVCCV)
_/_/_/th/e/n/k/e(AAACVCCV)
_/_/_/_/t/h/e/n/k/e(AAAACCVCCV)
_/_/_/_/th/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (4)
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/i/n/k
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/t/h/i/n/k(AAACCACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/th/i/n/k(AAACACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/t/h/n/k
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/n/k
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/t/h/n/k(AAACCCC)
_/_/_/th/n/k(AAACCC)
_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
				version split: ['_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/t/h/o
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o']
				_/_/_/t/h/o(AAACCV)
_/_/_/th/o(AAACV)
_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
				version split: ['_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', 'th', 'o']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o/g/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/o/gh
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/t/h/o/g/h(AAACCVCC)
_/_/_/t/h/o/gh(AAACCVC)
_/_/_/th/o/g/h(AAACVCC)
_/_/_/th/o/gh(AAACVC)
_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/t/h/o/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/t/h/o/h(AAACCVC)
_/_/_/th/o/h(AAACVC)
_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: though
					resolving (12)
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/o/u/g/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/o/u/gh
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/t/h/ou/g/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/t/h/ou/gh
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/ou/gh
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/g/h(AAACCVACC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/t/h/o/u/gh(AAACCVAC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/th/o/u/g/h(AAACVACC)
_/_/_/t/h/ou/g/h(AAACCVCC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/th/o/u/gh(AAACVAC)
_/_/_/t/h/ou/gh(AAACCVC)
_/_/_/th/ou/g/h(AAACVCC)
_/_/_/th/ou/gh(AAACVC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/t/h/o/w/t/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/t/h/ow/t/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/t/h/o/w/t/h(AAACCVCCC)
_/_/_/th/o/w/t/h(AAACVCCC)
_/_/_/t/h/ow/t/h(AAACCVCC)
_/_/_/th/ow/t/h(AAACVCC)
_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
				version split: ['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					> version: _/_/_/th/y/n/k
					TRYING: th
					adding blocked set: C = C >> g, k, _, th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/t/h/y/n/k(AAACCACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/th/y/n/k(AAACACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> g, k, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/t/o/h(AAACVC)
_/_/_/_/t/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: _/_/_/þ
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ']
				_/_/_/þ(AAAC)
_/_/_/_/þ(AAAAC)
				version split: ['_', '_', '_', 'þ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ']
				version split: ['_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: _/_/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/i/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ei/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/e/i/n/k(AAACVACC)
_/_/_/þ/ei/n/k(AAACVCC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/ei/n/k(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: _/_/_/þ/e/n
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n']
				_/_/_/þ/e/n(AAACVC)
_/_/_/_/þ/e/n(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: _/_/_/þ/e/n/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/_/þ/e/n/c(AAACVCC)
_/_/_/_/þ/e/n/c(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: _/_/_/þ/e/n/c/k/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/n/ck/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				_/_/_/þ/e/n/c/k/e(AAACVCCCV)
_/_/_/þ/e/n/ck/e(AAACVCCV)
_/_/_/_/þ/e/n/c/k/e(AAAACVCCCV)
_/_/_/_/þ/e/n/ck/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: _/_/_/þ/e/n/g
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/ng
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				_/_/_/þ/e/n/g(AAACVCC)
_/_/_/þ/e/ng(AAACVC)
_/_/_/_/þ/e/n/g(AAAACVCC)
_/_/_/_/þ/e/ng(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: _/_/_/þ/e/n/g/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/ng/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				_/_/_/þ/e/n/g/e(AAACVCCV)
_/_/_/þ/e/ng/e(AAACVCV)
_/_/_/_/þ/e/n/g/e(AAAACVCCV)
_/_/_/_/þ/e/ng/e(AAAACVCV)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'ng', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: _/_/_/þ/e/n/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/n/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/_/þ/e/n/c/h(AAACVCCC)
_/_/_/þ/e/n/ch(AAACVCC)
_/_/_/_/þ/e/n/c/h(AAAACVCCC)
_/_/_/_/þ/e/n/ch(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: _/_/_/þ/e/n/c/h/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/e/n/ch/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				_/_/_/þ/e/n/c/h/e(AAACVCCCV)
_/_/_/þ/e/n/ch/e(AAACVCCV)
_/_/_/_/þ/e/n/c/h/e(AAAACVCCCV)
_/_/_/_/þ/e/n/ch/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: _/_/_/þ/e/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/_/þ/e/n/k(AAACVCC)
_/_/_/_/þ/e/n/k(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: _/_/_/þ/e/n/k/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				_/_/_/þ/e/n/k/e(AAACVCCV)
_/_/_/_/þ/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/_/þ/e/o/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/eo/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				_/_/_/þ/e/o/h(AAACVVC)
_/_/_/þ/eo/h(AAACVC)
_/_/_/_/þ/e/o/h(AAAACVVC)
_/_/_/_/þ/eo/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: _/_/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/_/þ/i/n/c(AAACACC)
_/_/_/þ/i/n/c(AAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: _/_/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/c/h(AAACACCC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/þ/i/n/ch(AAACACC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/þ/i/n/ch(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: _/_/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/_/þ/i/n/k(AAACACC)
_/_/_/þ/i/n/k(AAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: _/_/_/þ/i/n/k/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/i/n/k/e
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				_/_/_/þ/i/n/k/e(AAACACCV)
_/_/_/þ/i/n/k/e(AAACACCV)
_/_/_/_/þ/i/n/k/e(AAAACACCV)
_/_/_/_/þ/i/n/k/e(AAAACACCV)
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: _/_/_/þ/o/ð
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				_/_/_/þ/o/ð(AAACVC)
_/_/_/_/þ/o/ð(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: _/_/_/þ/o/g/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/gh
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				_/_/_/þ/o/g/h(AAACVCC)
_/_/_/þ/o/gh(AAACVC)
_/_/_/_/þ/o/g/h(AAAACVCC)
_/_/_/_/þ/o/gh(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: _/_/_/þ/o/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'h']
				_/_/_/þ/o/h(AAACVC)
_/_/_/_/þ/o/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, k, _, h
					> version: y/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', '_', '_', 'h']
				adding dashed alternative: ['y', 'o', '_', '_', 'h']
				y/o/_/h(AVAC)
y/o/_/h(AVAC)
y/o/_/_/h(AVAAC)
y/o/_/_/h(AVAAC)
				version split: ['y', 'o', '_', 'h']
				{'string': 'y/o/_/h', 'rgx': '((y))/((o))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', 'h']
				version split: ['y', 'o', '_', 'h']
				{'string': 'y/o/_/h', 'rgx': '((y))/((o))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', 'h']
				version split: ['y', 'o', '_', '_', 'h']
				{'string': 'y/o/_/_', 'rgx': '((y))/((o))/((_))/((_))$'}
				version split: ['y', 'o', '_', '_', 'h']
				{'string': 'y/o/_/_', 'rgx': '((y))/((o))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: _/_/_/þ/o/h/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/_/þ/o/h/h(AAACVCC)
_/_/_/_/þ/o/h/h(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: _/_/_/þ/o/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				_/_/_/þ/o/c/h(AAACVCC)
_/_/_/þ/o/ch(AAACVC)
_/_/_/_/þ/o/c/h(AAAACVCC)
_/_/_/_/þ/o/ch(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: _/_/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou']
				_/_/_/þ/o/u(AAACVA)
_/_/_/þ/o/u(AAACVA)
_/_/_/þ/ou(AAACV)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/ou(AAAACV)
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: _/_/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/c
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/o/u/c(AAACVAC)
_/_/_/þ/ou/c(AAACVC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/ou/c(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: _/_/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/o/u/h(AAACVAC)
_/_/_/þ/ou/h(AAACVC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/ou/h(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (2)
					> version: y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> g, k, u, _
					> version: y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> g, k, u, _
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', '_', '_', 'u', 'h']
				adding dashed alternative: ['y', 'o', '_', '_', 'u', 'h']
				y/o/_/u/h(AVAAC)
y/o/_/u/h(AVAAC)
y/o/_/_/u/h(AVAAAC)
y/o/_/_/u/h(AVAAAC)
				version split: ['y', 'o', '_', 'u', 'h']
				{'string': 'y/o/_/u', 'rgx': '((y))/((o))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', 'u', 'h']
				version split: ['y', 'o', '_', 'u', 'h']
				{'string': 'y/o/_/u', 'rgx': '((y))/((o))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', 'u', 'h']
				version split: ['y', 'o', '_', '_', 'u', 'h']
				{'string': 'y/o/_/_', 'rgx': '((y))/((o))/((_))/((_))$'}
				version split: ['y', 'o', '_', '_', 'u', 'h']
				{'string': 'y/o/_/_', 'rgx': '((y))/((o))/((_))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: _/_/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/h/t
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/h/t
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/o/u/h/t(AAACVACC)
_/_/_/þ/ou/h/t(AAACVCC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/ou/h/t(AAAACVCC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: _/_/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/s
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/s
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 's']
				_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/o/u/s(AAACVAC)
_/_/_/þ/ou/s(AAACVC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/ou/s(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: _/_/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/t/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/th
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/t/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/th
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/t/h(AAACVACC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/o/u/th(AAACVAC)
_/_/_/þ/ou/t/h(AAACVCC)
_/_/_/þ/ou/th(AAACVC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/ou/t/h(AAAACVCC)
_/_/_/_/þ/ou/th(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/u/ȝ
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ou/ȝ
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/o/u/ȝ(AAACVAC)
_/_/_/þ/ou/ȝ(AAACVC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/ou/ȝ(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: _/_/_/þ/o/w/t/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/o/w/th
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ow/t/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/ow/th
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				_/_/_/þ/o/w/t/h(AAACVCCC)
_/_/_/þ/o/w/th(AAACVCC)
_/_/_/þ/ow/t/h(AAACVCC)
_/_/_/þ/ow/th(AAACVC)
_/_/_/_/þ/o/w/t/h(AAAACVCCC)
_/_/_/_/þ/o/w/th(AAAACVCC)
_/_/_/_/þ/ow/t/h(AAAACVCC)
_/_/_/_/þ/ow/th(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/_/þ/o/ȝ
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/_/þ/o/ȝ(AAACVC)
_/_/_/_/þ/o/ȝ(AAAACVC)
				version split: ['_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: _/_/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/u/n
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n']
				_/_/_/þ/u/n(AAACAC)
_/_/_/þ/u/n(AAACAC)
_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/þ/u/n(AAAACAC)
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: _/_/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/u/n/c/h
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/u/n/ch
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/c/h(AAACACCC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/þ/u/n/ch(AAACACC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/þ/u/n/ch(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: _/_/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					> version: _/_/_/þ/y/n/k
					TRYING: þ
					adding blocked set: C = C >> g, k, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/_/þ/y/n/k(AAACACC)
_/_/_/þ/y/n/k(AAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> g, k, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VVCCV : 4___
				ANALYSING: yenke
				adding littera based on matching pattern
				ANALYSING: yinge
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: _/_/_/_/ð/e/n
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				_/_/_/_/ð/e/n(AAAACVC)
_/_/_/_/_/ð/e/n(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: _/_/_/_/ð/e/n/c
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				_/_/_/_/ð/e/n/c(AAAACVCC)
_/_/_/_/_/ð/e/n/c(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: _/_/_/_/ð/e/n/c/h
					TRYING: ð
					> version: _/_/_/_/ð/e/n/ch
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				_/_/_/_/ð/e/n/c/h(AAAACVCCC)
_/_/_/_/ð/e/n/ch(AAAACVCC)
_/_/_/_/_/ð/e/n/c/h(AAAAACVCCC)
_/_/_/_/_/ð/e/n/ch(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: _/_/_/_/ð/e/n/k/e
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				_/_/_/_/ð/e/n/k/e(AAAACVCCV)
_/_/_/_/_/ð/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/ð/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'e', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: _/_/_/_/ð/h/e/n/k
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				_/_/_/_/ð/h/e/n/k(AAAACCVCC)
_/_/_/_/_/ð/h/e/n/k(AAAAACCVCC)
				version split: ['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_/ð/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'h', 'e', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: _/_/_/_/ð/h/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				_/_/_/_/ð/h/o/g(AAAACCVC)
_/_/_/_/_/ð/h/o/g(AAAAACCVC)
				version split: ['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_/ð/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'h', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: _/_/_/_/ð/i/n/g
					TRYING: ð
					> version: _/_/_/_/ð/i/n/g
					TRYING: ð
					> version: _/_/_/_/ð/i/ng
					TRYING: ð
					> version: _/_/_/_/ð/i/ng
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/n/g(AAAACACC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/ð/i/ng(AAAACAC)
_/_/_/_/_/ð/i/n/g(AAAAACACC)
_/_/_/_/_/ð/i/n/g(AAAAACACC)
_/_/_/_/_/ð/i/ng(AAAAACAC)
_/_/_/_/_/ð/i/ng(AAAAACAC)
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/ð/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				version split: ['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'i', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: _/_/_/_/ð/o/d
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				_/_/_/_/ð/o/d(AAAACVC)
_/_/_/_/_/ð/o/d(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'd']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: _/_/_/_/ð/o/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				_/_/_/_/ð/o/g(AAAACVC)
_/_/_/_/_/ð/o/g(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: _/_/_/_/ð/o/h
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				_/_/_/_/ð/o/h(AAAACVC)
_/_/_/_/_/ð/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'h']
				ANALYSING: ðoƿg
					resolving (2)
					> version: _/_/_/_/ð/o/ƿ/g
					TRYING: ð
					> version: _/_/_/_/ð/oƿ/g
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				_/_/_/_/ð/o/ƿ/g(AAAACVCC)
_/_/_/_/ð/oƿ/g(AAAACVC)
_/_/_/_/_/ð/o/ƿ/g(AAAAACVCC)
_/_/_/_/_/ð/oƿ/g(AAAAACVC)
				version split: ['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_/ð/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_/ð/oƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ð', 'oƿ', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'o', 'ƿ', 'g']
				version split: ['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				{'string': '_/_/_/_/_/ð', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ð', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: e/_/s/_
					RESULT:  ['_']
				adding dashed alternative: ['e', '_', 's', '_', '_']
				e/_/s/_(VACA)
e/_/s/_/_(VACAA)
				version split: ['e', '_', 's', '_']
				{'string': 'e/_/s/_', 'rgx': '((e))/((_))/((s))/((_))/((_))$'}
				_____REMOVING________['e', '_', 's', '_']
				version split: ['e', '_', 's', '_', '_']
				{'string': 'e/_/s/_/_', 'rgx': '((e))/((_))/((s))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s/_
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', '_', '_']
				_/_/s/_(AACA)
_/_/s/_/_(AACAA)
				version split: ['_', '_', 's', '_']
				{'string': '_/_/s/_', 'rgx': '((_))/((_))/((s))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', '_']
				version split: ['_', '_', 's', '_', '_']
				{'string': '_/_/s/_/_', 'rgx': '((_))/((_))/((s))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: _/_/_/_/t/h/e/n/k/e
					TRYING: t
					> version: _/_/_/_/th/e/n/k/e
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				_/_/_/_/t/h/e/n/k/e(AAAACCVCCV)
_/_/_/_/th/e/n/k/e(AAAACVCCV)
_/_/_/_/_/t/h/e/n/k/e(AAAAACCVCCV)
_/_/_/_/_/th/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/th/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'e', 'n', 'k', 'e']
				ANALYSING: think
					resolving (4)
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/t/h/i/n/k
					TRYING: t
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					> version: _/_/_/_/th/i/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/t/h/i/n/k(AAAACCACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/th/i/n/k(AAAACACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/t/h/i/n/k(AAAAACCACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
_/_/_/_/_/th/i/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/th/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: _/_/_/_/t/h/n/k
					TRYING: t
					> version: _/_/_/_/th/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				_/_/_/_/t/h/n/k(AAAACCCC)
_/_/_/_/th/n/k(AAAACCC)
_/_/_/_/_/t/h/n/k(AAAAACCCC)
_/_/_/_/_/th/n/k(AAAAACCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/th/n', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: _/_/_/_/t/h/o
					TRYING: t
					> version: _/_/_/_/th/o
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o']
				_/_/_/_/t/h/o(AAAACCV)
_/_/_/_/th/o(AAAACV)
_/_/_/_/_/t/h/o(AAAAACCV)
_/_/_/_/_/th/o(AAAAACV)
				version split: ['_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o']
				version split: ['_', '_', '_', '_', '_', 'th', 'o']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: _/_/_/_/t/h/o/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/gh
					TRYING: t
					> version: _/_/_/_/th/o/g/h
					TRYING: th
					> version: _/_/_/_/th/o/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				_/_/_/_/t/h/o/g/h(AAAACCVCC)
_/_/_/_/t/h/o/gh(AAAACCVC)
_/_/_/_/th/o/g/h(AAAACVCC)
_/_/_/_/th/o/gh(AAAACVC)
_/_/_/_/_/t/h/o/g/h(AAAAACCVCC)
_/_/_/_/_/t/h/o/gh(AAAAACCVC)
_/_/_/_/_/th/o/g/h(AAAAACVCC)
_/_/_/_/_/th/o/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: _/_/_/_/t/h/o/h
					TRYING: t
					> version: _/_/_/_/th/o/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				_/_/_/_/t/h/o/h(AAAACCVC)
_/_/_/_/th/o/h(AAAACVC)
_/_/_/_/_/t/h/o/h(AAAAACCVC)
_/_/_/_/_/th/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'h']
				ANALYSING: though
					resolving (12)
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/u/g/h
					TRYING: t
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/t/h/o/u/gh
					TRYING: t
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/th/o/u/g/h
					TRYING: th
					> version: _/_/_/_/t/h/ou/g/h
					TRYING: t
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/th/o/u/gh
					TRYING: th
					> version: _/_/_/_/t/h/ou/gh
					TRYING: t
					> version: _/_/_/_/th/ou/g/h
					TRYING: th
					> version: _/_/_/_/th/ou/gh
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/g/h(AAAACCVACC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/t/h/o/u/gh(AAAACCVAC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/th/o/u/g/h(AAAACVACC)
_/_/_/_/t/h/ou/g/h(AAAACCVCC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/th/o/u/gh(AAAACVAC)
_/_/_/_/t/h/ou/gh(AAAACCVC)
_/_/_/_/th/ou/g/h(AAAACVCC)
_/_/_/_/th/ou/gh(AAAACVC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/g/h(AAAAACCVACC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/t/h/o/u/gh(AAAAACCVAC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/th/o/u/g/h(AAAAACVACC)
_/_/_/_/_/t/h/ou/g/h(AAAAACCVCC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/th/o/u/gh(AAAAACVAC)
_/_/_/_/_/t/h/ou/gh(AAAAACCVC)
_/_/_/_/_/th/ou/g/h(AAAAACVCC)
_/_/_/_/_/th/ou/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/th/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'u', 'gh']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ou', 'gh']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ou', 'gh']
				ANALYSING: thowth
					resolving (4)
					> version: _/_/_/_/t/h/o/w/t/h
					TRYING: t
					> version: _/_/_/_/th/o/w/t/h
					TRYING: th
					> version: _/_/_/_/t/h/ow/t/h
					TRYING: t
					> version: _/_/_/_/th/ow/t/h
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				_/_/_/_/t/h/o/w/t/h(AAAACCVCCC)
_/_/_/_/th/o/w/t/h(AAAACVCCC)
_/_/_/_/t/h/ow/t/h(AAAACCVCC)
_/_/_/_/th/ow/t/h(AAAACVCC)
_/_/_/_/_/t/h/o/w/t/h(AAAAACCVCCC)
_/_/_/_/_/th/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/t/h/ow/t/h(AAAAACCVCC)
_/_/_/_/_/th/ow/t/h(AAAAACVCC)
				version split: ['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/th/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/th/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/t/h/y/n/k
					TRYING: t
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					> version: _/_/_/_/th/y/n/k
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/t/h/y/n/k(AAAACCACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/th/y/n/k(AAAACACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/t/h/y/n/k(AAAAACCACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
_/_/_/_/_/th/y/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/t/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/th/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'h', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/th', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/t/o/h(AAAACVC)
_/_/_/_/_/t/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/t/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: _/_/_/_/þ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ']
				_/_/_/_/þ(AAAAC)
_/_/_/_/_/þ(AAAAAC)
				version split: ['_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ']
				version split: ['_', '_', '_', '_', '_', 'þ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ']
				ANALYSING: þeink
					resolving (3)
					> version: _/_/_/_/þ/e/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/e/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/ei/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/e/i/n/k(AAAACVACC)
_/_/_/_/þ/ei/n/k(AAAACVCC)
_/_/_/_/_/þ/e/i/n/k(AAAAACVACC)
_/_/_/_/_/þ/e/i/n/k(AAAAACVACC)
_/_/_/_/_/þ/ei/n/k(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_/þ/ei', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: _/_/_/_/þ/e/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				_/_/_/_/þ/e/n(AAAACVC)
_/_/_/_/_/þ/e/n(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: _/_/_/_/þ/e/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				_/_/_/_/þ/e/n/c(AAAACVCC)
_/_/_/_/_/þ/e/n/c(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: _/_/_/_/þ/e/n/c/k/e
					TRYING: þ
					> version: _/_/_/_/þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				_/_/_/_/þ/e/n/c/k/e(AAAACVCCCV)
_/_/_/_/þ/e/n/ck/e(AAAACVCCV)
_/_/_/_/_/þ/e/n/c/k/e(AAAAACVCCCV)
_/_/_/_/_/þ/e/n/ck/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: _/_/_/_/þ/e/n/g
					TRYING: þ
					> version: _/_/_/_/þ/e/ng
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				_/_/_/_/þ/e/n/g(AAAACVCC)
_/_/_/_/þ/e/ng(AAAACVC)
_/_/_/_/_/þ/e/n/g(AAAAACVCC)
_/_/_/_/_/þ/e/ng(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'ng']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: _/_/_/_/þ/e/n/g/e
					TRYING: þ
					> version: _/_/_/_/þ/e/ng/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				_/_/_/_/þ/e/n/g/e(AAAACVCCV)
_/_/_/_/þ/e/ng/e(AAAACVCV)
_/_/_/_/_/þ/e/n/g/e(AAAAACVCCV)
_/_/_/_/_/þ/e/ng/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'g', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'ng', 'e']
				ANALYSING: þench
					resolving (2)
					> version: _/_/_/_/þ/e/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/e/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				_/_/_/_/þ/e/n/c/h(AAAACVCCC)
_/_/_/_/þ/e/n/ch(AAAACVCC)
_/_/_/_/_/þ/e/n/c/h(AAAAACVCCC)
_/_/_/_/_/þ/e/n/ch(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch']
				ANALYSING: þenche
					resolving (2)
					> version: _/_/_/_/þ/e/n/c/h/e
					TRYING: þ
					> version: _/_/_/_/þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				_/_/_/_/þ/e/n/c/h/e(AAAACVCCCV)
_/_/_/_/þ/e/n/ch/e(AAAACVCCV)
_/_/_/_/_/þ/e/n/c/h/e(AAAAACVCCCV)
_/_/_/_/_/þ/e/n/ch/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: _/_/_/_/þ/e/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				_/_/_/_/þ/e/n/k(AAAACVCC)
_/_/_/_/_/þ/e/n/k(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: _/_/_/_/þ/e/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				_/_/_/_/þ/e/n/k/e(AAAACVCCV)
_/_/_/_/_/þ/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: _/_/_/_/þ/e/o/h
					TRYING: þ
					> version: _/_/_/_/þ/eo/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				_/_/_/_/þ/e/o/h(AAAACVVC)
_/_/_/_/þ/eo/h(AAAACVC)
_/_/_/_/_/þ/e/o/h(AAAAACVVC)
_/_/_/_/_/þ/eo/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_/þ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_/þ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'eo', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'e', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: _/_/_/_/þ/i/n/c
					TRYING: þ
					> version: _/_/_/_/þ/i/n/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/þ/i/n/c(AAAACACC)
_/_/_/_/_/þ/i/n/c(AAAAACACC)
_/_/_/_/_/þ/i/n/c(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c']
				ANALYSING: þinch
					resolving (4)
					> version: _/_/_/_/þ/i/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/i/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/i/n/ch
					TRYING: þ
					> version: _/_/_/_/þ/i/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/c/h(AAAACACCC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/þ/i/n/ch(AAAACACC)
_/_/_/_/_/þ/i/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/i/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/i/n/ch(AAAAACACC)
_/_/_/_/_/þ/i/n/ch(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: _/_/_/_/þ/i/n/k
					TRYING: þ
					> version: _/_/_/_/þ/i/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/þ/i/n/k(AAAACACC)
_/_/_/_/_/þ/i/n/k(AAAAACACC)
_/_/_/_/_/þ/i/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: _/_/_/_/þ/i/n/k/e
					TRYING: þ
					> version: _/_/_/_/þ/i/n/k/e
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				_/_/_/_/þ/i/n/k/e(AAAACACCV)
_/_/_/_/þ/i/n/k/e(AAAACACCV)
_/_/_/_/_/þ/i/n/k/e(AAAAACACCV)
_/_/_/_/_/þ/i/n/k/e(AAAAACACCV)
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_/þ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'i', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: _/_/_/_/þ/o/ð
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				_/_/_/_/þ/o/ð(AAAACVC)
_/_/_/_/_/þ/o/ð(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ð']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: _/_/_/_/þ/o/g/h
					TRYING: þ
					> version: _/_/_/_/þ/o/gh
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				_/_/_/_/þ/o/g/h(AAAACVCC)
_/_/_/_/þ/o/gh(AAAACVC)
_/_/_/_/_/þ/o/g/h(AAAAACVCC)
_/_/_/_/_/þ/o/gh(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'gh']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'g', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: _/_/_/_/þ/o/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				_/_/_/_/þ/o/h(AAAACVC)
_/_/_/_/_/þ/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: y/o/_/_/h
					TRYING: h
					> version: y/o/_/_/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['y', 'o', '_', '_', '_', 'h']
				adding dashed alternative: ['y', 'o', '_', '_', '_', 'h']
				y/o/_/_/h(AVAAC)
y/o/_/_/h(AVAAC)
y/o/_/_/_/h(AVAAAC)
y/o/_/_/_/h(AVAAAC)
				version split: ['y', 'o', '_', '_', 'h']
				{'string': 'y/o/_/_/h', 'rgx': '((y))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', '_', 'h']
				version split: ['y', 'o', '_', '_', 'h']
				{'string': 'y/o/_/_/h', 'rgx': '((y))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', '_', 'h']
				version split: ['y', 'o', '_', '_', '_', 'h']
				{'string': 'y/o/_/_/_/h', 'rgx': '((y))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', '_', '_', 'h']
				version split: ['y', 'o', '_', '_', '_', 'h']
				{'string': 'y/o/_/_/_/h', 'rgx': '((y))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['y', 'o', '_', '_', '_', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: _/_/_/_/þ/o/h/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				_/_/_/_/þ/o/h/h(AAAACVCC)
_/_/_/_/_/þ/o/h/h(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: _/_/_/_/þ/o/c/h
					TRYING: þ
					> version: _/_/_/_/þ/o/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				_/_/_/_/þ/o/c/h(AAAACVCC)
_/_/_/_/þ/o/ch(AAAACVC)
_/_/_/_/_/þ/o/c/h(AAAAACVCC)
_/_/_/_/_/þ/o/ch(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ch']
				ANALYSING: þou
					resolving (3)
					> version: _/_/_/_/þ/o/u
					TRYING: þ
					> version: _/_/_/_/þ/o/u
					TRYING: þ
					> version: _/_/_/_/þ/ou
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou']
				_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/o/u(AAAACVA)
_/_/_/_/þ/ou(AAAACV)
_/_/_/_/_/þ/o/u(AAAAACVA)
_/_/_/_/_/þ/o/u(AAAAACVA)
_/_/_/_/_/þ/ou(AAAAACV)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: _/_/_/_/þ/o/u/c
					TRYING: þ
					> version: _/_/_/_/þ/o/u/c
					TRYING: þ
					> version: _/_/_/_/þ/ou/c
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/o/u/c(AAAACVAC)
_/_/_/_/þ/ou/c(AAAACVC)
_/_/_/_/_/þ/o/u/c(AAAAACVAC)
_/_/_/_/_/þ/o/u/c(AAAAACVAC)
_/_/_/_/_/þ/ou/c(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'c']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: _/_/_/_/þ/o/u/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/h
					TRYING: þ
					> version: _/_/_/_/þ/ou/h
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/o/u/h(AAAACVAC)
_/_/_/_/þ/ou/h(AAAACVC)
_/_/_/_/_/þ/o/u/h(AAAAACVAC)
_/_/_/_/_/þ/o/u/h(AAAAACVAC)
_/_/_/_/_/þ/ou/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'h']
				ANALYSING: youh
					resolving (2)
					> version: y/o/_/_/u/h
					TRYING: u
					> version: y/o/_/_/u/h
					TRYING: u
					RESULT:  ['u']
				version split: ['y', 'o', '_', '_', 'u', 'h']
				{'string': 'y/o/_/_/u/h', 'rgx': '((y))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['y', 'o', '_', '_', 'u', 'h']
				version split: ['y', 'o', '_', '_', 'u', 'h']
				{'string': 'y/o/_/_/u/h', 'rgx': '((y))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['y', 'o', '_', '_', 'u', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: _/_/_/_/þ/o/u/h/t
					TRYING: þ
					> version: _/_/_/_/þ/o/u/h/t
					TRYING: þ
					> version: _/_/_/_/þ/ou/h/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/o/u/h/t(AAAACVACC)
_/_/_/_/þ/ou/h/t(AAAACVCC)
_/_/_/_/_/þ/o/u/h/t(AAAAACVACC)
_/_/_/_/_/þ/o/u/h/t(AAAAACVACC)
_/_/_/_/_/þ/ou/h/t(AAAAACVCC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'h', 't']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: _/_/_/_/þ/o/u/s
					TRYING: þ
					> version: _/_/_/_/þ/o/u/s
					TRYING: þ
					> version: _/_/_/_/þ/ou/s
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/o/u/s(AAAACVAC)
_/_/_/_/þ/ou/s(AAAACVC)
_/_/_/_/_/þ/o/u/s(AAAAACVAC)
_/_/_/_/_/þ/o/u/s(AAAAACVAC)
_/_/_/_/_/þ/ou/s(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 's']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: _/_/_/_/þ/o/u/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/u/th
					TRYING: þ
					> version: _/_/_/_/þ/o/u/th
					TRYING: þ
					> version: _/_/_/_/þ/ou/t/h
					TRYING: þ
					> version: _/_/_/_/þ/ou/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/t/h(AAAACVACC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/o/u/th(AAAACVAC)
_/_/_/_/þ/ou/t/h(AAAACVCC)
_/_/_/_/þ/ou/th(AAAACVC)
_/_/_/_/_/þ/o/u/t/h(AAAAACVACC)
_/_/_/_/_/þ/o/u/t/h(AAAAACVACC)
_/_/_/_/_/þ/o/u/th(AAAAACVAC)
_/_/_/_/_/þ/o/u/th(AAAAACVAC)
_/_/_/_/_/þ/ou/t/h(AAAAACVCC)
_/_/_/_/_/þ/ou/th(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: _/_/_/_/þ/o/u/ȝ
					TRYING: þ
					> version: _/_/_/_/þ/o/u/ȝ
					TRYING: þ
					> version: _/_/_/_/þ/ou/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/o/u/ȝ(AAAACVAC)
_/_/_/_/þ/ou/ȝ(AAAACVC)
_/_/_/_/_/þ/o/u/ȝ(AAAAACVAC)
_/_/_/_/_/þ/o/u/ȝ(AAAAACVAC)
_/_/_/_/_/þ/ou/ȝ(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_/þ/ou', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'u', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (4)
					> version: _/_/_/_/þ/o/w/t/h
					TRYING: þ
					> version: _/_/_/_/þ/o/w/th
					TRYING: þ
					> version: _/_/_/_/þ/ow/t/h
					TRYING: þ
					> version: _/_/_/_/þ/ow/th
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				_/_/_/_/þ/o/w/t/h(AAAACVCCC)
_/_/_/_/þ/o/w/th(AAAACVCC)
_/_/_/_/þ/ow/t/h(AAAACVCC)
_/_/_/_/þ/ow/th(AAAACVC)
_/_/_/_/_/þ/o/w/t/h(AAAAACVCCC)
_/_/_/_/_/þ/o/w/th(AAAAACVCC)
_/_/_/_/_/þ/ow/t/h(AAAAACVCC)
_/_/_/_/_/þ/ow/th(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_/þ/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_/þ/ow', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'ow', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'w', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'w', 'th']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ow', 't', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: _/_/_/_/þ/o/ȝ
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				_/_/_/_/þ/o/ȝ(AAAACVC)
_/_/_/_/_/þ/o/ȝ(AAAAACVC)
				version split: ['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_/þ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'o', 'ȝ']
				version split: ['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'o', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: _/_/_/_/þ/u/n
					TRYING: þ
					> version: _/_/_/_/þ/u/n
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/þ/u/n(AAAACAC)
_/_/_/_/_/þ/u/n(AAAAACAC)
_/_/_/_/_/þ/u/n(AAAAACAC)
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: _/_/_/_/þ/u/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/u/n/c/h
					TRYING: þ
					> version: _/_/_/_/þ/u/n/ch
					TRYING: þ
					> version: _/_/_/_/þ/u/n/ch
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/c/h(AAAACACCC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/þ/u/n/ch(AAAACACC)
_/_/_/_/_/þ/u/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/u/n/c/h(AAAAACACCC)
_/_/_/_/_/þ/u/n/ch(AAAAACACC)
_/_/_/_/_/þ/u/n/ch(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/þ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'c', 'h']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				version split: ['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'u', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: _/_/_/_/þ/y/n/k
					TRYING: þ
					> version: _/_/_/_/þ/y/n/k
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/þ/y/n/k(AAAACACC)
_/_/_/_/_/þ/y/n/k(AAAAACACC)
_/_/_/_/_/þ/y/n/k(AAAAACACC)
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/þ/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/þ/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				version split: ['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				{'string': '_/_/_/_/_/þ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'þ', 'y', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['e', '_', 's', '_', '_']
		only one version left: ['_', '_', 's', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['y', 'e', 'n', 'k', 'e']
		SPLIT: ['y', 'i', 'n', 'g', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['e', '_', 's', '_', '_']
		['e', '_', 's', '_', '_']
		SPLIT: ['_', '_', 's', '_', '_']
		['_', '_', 's', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['y']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VVCCV is INVALID
		[{'g', 'k', '_'}]
		57
		OVERVIEW: version for pattern VVCCV
{'g', 'k', '_'}
faulty splits: 57
[''][''][''][''][''] <-! ðen
[''][''][''][''][''] <-! ðenc
[''][''][''][''][''] <-! ðench
[''][''][''][''][''] <-! ðenke
[''][''][''][''][''] <-! ðhenk
[''][''][''][''][''] <-! ðhog
[''][''][''][''][''] <-! ðing
[''][''][''][''][''] <-! ðod
[''][''][''][''][''] <-! ðog
[''][''][''][''][''] <-! ðoh
[''][''][''][''][''] <-! ðoƿg
[''][''][''][''][''] <-! thenke
[''][''][''][''][''] <-! think
[''][''][''][''][''] <-! thnk
[''][''][''][''][''] <-! tho
[''][''][''][''][''] <-! thogh
[''][''][''][''][''] <-! thoh
[''][''][''][''][''] <-! though
[''][''][''][''][''] <-! thowth
[''][''][''][''][''] <-! thynk
[''][''][''][''][''] <-! toh
[''][''][''][''][''] <-! þ
[''][''][''][''][''] <-! þeink
[''][''][''][''][''] <-! þen
[''][''][''][''][''] <-! þenc
[''][''][''][''][''] <-! þencke
[''][''][''][''][''] <-! þeng
[''][''][''][''][''] <-! þenge
[''][''][''][''][''] <-! þench
[''][''][''][''][''] <-! þenche
[''][''][''][''][''] <-! þenk
[''][''][''][''][''] <-! þenke
[''][''][''][''][''] <-! þeoh
[''][''][''][''][''] <-! þinc
[''][''][''][''][''] <-! þinch
[''][''][''][''][''] <-! þink
[''][''][''][''][''] <-! þinke
[''][''][''][''][''] <-! þoð
[''][''][''][''][''] <-! þogh
[''][''][''][''][''] <-! þoh
['y']['o'][''][''][''] <-! yoh
[''][''][''][''][''] <-! þohh
[''][''][''][''][''] <-! þoch
[''][''][''][''][''] <-! þou
[''][''][''][''][''] <-! þouc
[''][''][''][''][''] <-! þouh
['y']['o']['']['']['u'] <-! youh
[''][''][''][''][''] <-! þouht
[''][''][''][''][''] <-! þous
[''][''][''][''][''] <-! þouth
[''][''][''][''][''] <-! þouȝ
[''][''][''][''][''] <-! þowth
[''][''][''][''][''] <-! þoȝ
[''][''][''][''][''] <-! þun
[''][''][''][''][''] <-! þunch
[''][''][''][''][''] <-! þynk
[''][''][''][''][''] <-! zenke
y | e | n | k | e
y | i | n | g | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
e | _ | s | _ | _
_ | _ | s | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['y'] | ['o'] | ['_'] | ['_'] | ['u']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
2 : {'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'n', 'h', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 'h', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'u', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'u', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'z', 'n', 's', '_'},{'ð', 'n', '_'},{'þ', 'n', 's', '_'},{'ð', 'n'},{'ð', 'n', '_'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'ð', 'n', '_'},{'th', 'n', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'n', 't', 's', '_'},{'th', 'n', 's', '_'},{'n', 't', 's', '_'},{'þ', 'n', 's', '_'},{'ð', 'n', '_'},{'th', 'n', 's', '_'}
3 : {'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 't'},{'g', 'k', '_', 't'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'ð', 'g', 'k', '_'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'þ'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'h'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', 'u', '_'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', 'u', '_'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'h'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'z'},{'ð', 'g', 'k', '_'},{'ð', 'g', 'k', '_'},{'ð', 'g', 'k', '_'},{'ð', 'g', 'k'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 't'},{'ð', 'g', 'k', '_'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'th'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'th'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'},{'g', 'k', '_', 'þ'},{'ð', 'g', 'k', '_'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 'þ'},{'g', 'k', '_', 't'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CCVVC
	Selection for pattern: CCVVC completed
	Making a version for pattern: CCVVC
			___CCVVC : 0___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> ð, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					> version: th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					> version: t/h/i/n/k
					TRYING: t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					> version: t/h/o/gh
					TRYING: t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'h']
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					> version: th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: t/h/ow/t/h
					TRYING: t
					> version: th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					> version: t/h/y/n/k
					TRYING: t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['t']
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVVC : 1___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n']
				ð/e/n(CVC)
ð/_/e/n(CAVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
ð/_/e/n/c(CAVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/_/e/n/k/e(CAVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'd']
				ð/o/d(CVC)
ð/_/o/d(CAVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g']
				ð/o/g(CVC)
ð/_/o/g(CAVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h']
				ð/o/h(CVC)
ð/_/o/h(CAVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 's']
				_/e/s(AVC)
_/_/e/s(AAVC)
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: h
					> version: t/h/i/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: h
					> version: t/h/o/gh
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: h
					> version: t/h/ow/t/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: h
					> version: t/h/y/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h']
				t/o/h(CVC)
t/_/o/h(CAVC)
				version split: ['t', 'o', 'h']
				{'string': 't/o', 'rgx': '((t))/((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_', 'rgx': '((t))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n']
				þ/e/n(CVC)
þ/_/e/n(CAVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
þ/_/e/n/c(CAVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
þ/_/e/n/k(CAVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/_/e/n/k/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ð']
				þ/o/ð(CVC)
þ/_/o/ð(CAVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h']
				þ/o/h(CVC)
þ/_/o/h(CAVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
þ/_/o/h/h(CAVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					> version: þ/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					> version: þ/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ']
				þ/o/ȝ(CVC)
þ/_/o/ȝ(CAVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, y, h, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVVC : 2___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: e
					> version: ð/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e', 'rgx': '((ð))/((h))/((e))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o', 'rgx': '((ð))/((h))/((o))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: o
					> version: ð/_/oƿ/g
					TRYING: oƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'oƿ', 'o'}
					RESULT:  ['oƿ', 'o']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e', 'rgx': '((t))/((h))/((e))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k']
				t/h/n/k(CCCC)
t/h/_/n/k(CCACC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h/n', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: o
					> version: t/h/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: o
					> version: t/h/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, oƿ, o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h/ow', 'rgx': '((t))/((h))/((o))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o', 'rgx': '((t))/((_))/((o))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> e, ei, _, oƿ, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: e
					> version: þ/_/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: e
					> version: þ/_/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: e
					> version: þ/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/e/o/h
					TRYING: e
					> version: þ/_/eo/h
					TRYING: eo
					adding blocked set: V = V >> e, _, oƿ, eo, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_/eo', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: o
					> version: þ/_/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: o
					> version: þ/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/ou/c
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/ou/h/t
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/ou/s
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/ou/t/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: þ/_/ou/th
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/o/w/t/h
					TRYING: o
					> version: þ/_/o/w/th
					TRYING: o
					> version: þ/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					> version: þ/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 't', 'h']
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVVC : 3___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n']
				ð/_/e/n(CAVC)
ð/_/e/_/n(CAVAC)
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n']
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c']
				ð/_/e/n/c(CAVCC)
ð/_/e/_/n/c(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: n
					> version: ð/_/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'ch']
				ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
ð/_/e/_/n/c/h(CAVACCC)
ð/_/e/_/n/ch(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				ð/_/e/n/k/e(CAVCCV)
ð/_/e/_/n/k/e(CAVACCV)
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/h/e/_/n/k(CCVACC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n', 'rgx': '((ð))/((h))/((e))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_', 'rgx': '((ð))/((h))/((e))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', 'g']
				ð/h/o/g(CCVC)
ð/h/o/_/g(CCVAC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o/g', 'rgx': '((ð))/((h))/((o))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_', 'rgx': '((ð))/((h))/((o))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/ng
					TRYING: ng
					> version: ð/i/_/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'd']
				ð/_/o/d(CAVC)
ð/_/o/_/d(CAVAC)
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o/d', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'd']
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'g']
				ð/_/o/g(CAVC)
ð/_/o/_/g(CAVAC)
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o/g', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g']
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'h']
				ð/_/o/h(CAVC)
ð/_/o/_/h(CAVAC)
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o/h', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h']
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: ƿ
					> version: ð/_/oƿ/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', '_', 'g']
				ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
ð/_/o/_/ƿ/g(CAVACC)
ð/_/oƿ/_/g(CAVAC)
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o/ƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g']
				version split: ['ð', '_', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				version split: ['ð', '_', 'oƿ', '_', 'g']
				{'string': 'ð/_/oƿ/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', 's']
				_/_/e/s(AAVC)
_/_/e/_/s(AAVAC)
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e/s', 'rgx': '((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', 'e', 's']
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_', 'rgx': '((_))/((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
t/h/e/_/n/k/e(CCVACCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e/n', 'rgx': '((t))/((h))/((e))/((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_', 'rgx': '((t))/((h))/((e))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: i
					> version: t/h/_/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((i))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((i))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'n', 'k']
				t/h/_/n/k(CCACC)
t/h/_/_/n/k(CCAACC)
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_']
				t/h/o(CCV)
t/h/o/_(CCVA)
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: g
					> version: t/h/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'g', 'h']
				adding dashed alternative: ['t', 'h', 'o', '_', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
t/h/o/_/g/h(CCVACC)
t/h/o/_/gh(CCVAC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o/gh', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'h']
				t/h/o/h(CCVC)
t/h/o/_/h(CCVAC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o/h', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/w/t/h
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'w', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
t/h/o/_/w/t/h(CCVACCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o/w', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: y
					> version: t/h/_/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((y))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((y))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', 'h']
				t/_/o/h(CAVC)
t/_/o/_/h(CAVAC)
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o/h', 'rgx': '((t))/((_))/((o))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h']
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_', 'rgx': '((t))/((_))/((o))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: i
					> version: þ/_/e/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((i))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((i))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n']
				þ/_/e/n(CAVC)
þ/_/e/_/n(CAVAC)
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n']
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c']
				þ/_/e/n/c(CAVCC)
þ/_/e/_/n/c(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: n
					> version: þ/_/e/n/ck/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
þ/_/e/_/n/c/k/e(CAVACCCV)
þ/_/e/_/n/ck/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: n
					> version: þ/_/e/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng']
				þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g']
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng']
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: n
					> version: þ/_/e/ng/e
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng', 'e']
				þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: n
					> version: þ/_/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch']
				þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
þ/_/e/_/n/c/h(CAVACCC)
þ/_/e/_/n/ch(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: n
					> version: þ/_/e/n/ch/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
þ/_/e/_/n/c/h/e(CAVACCCV)
þ/_/e/_/n/ch/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k']
				þ/_/e/n/k(CAVCC)
þ/_/e/_/n/k(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				þ/_/e/n/k/e(CAVCCV)
þ/_/e/_/n/k/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: n
					> version: _/y/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o', 'rgx': '((þ))/((_))/((e))/((o))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					> version: þ/i/_/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					> version: _/y/_/i/n/g/e
					TRYING: i
					> version: _/y/_/i/ng/e
					TRYING: i
					> version: _/y/_/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					> version: þ/i/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					> version: þ/i/_/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ð']
				þ/_/o/ð(CAVC)
þ/_/o/_/ð(CAVAC)
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o/ð', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ð']
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: g
					> version: þ/_/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'gh']
				þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
þ/_/o/_/g/h(CAVACC)
þ/_/o/_/gh(CAVAC)
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'g', 'h']
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o/gh', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'gh']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h']
				þ/_/o/h(CAVC)
þ/_/o/_/h(CAVAC)
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h']
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: h
					> version: _/y/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h', 'h']
				þ/_/o/h/h(CAVCC)
þ/_/o/_/h/h(CAVACC)
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: c
					> version: þ/_/o/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ch']
				þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o/c', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'c', 'h']
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o/ch', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/ou
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/ou/c
					TRYING: c
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/ou/h
					TRYING: h
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/ou/h
					TRYING: h
					> version: _/y/ou/h
					TRYING: h
					RESULT:  ['u']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/ou/h/t
					TRYING: h
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/ou/s
					TRYING: s
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/ou/t/h
					TRYING: t
					> version: þ/_/ou/th
					TRYING: th
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 't', 'h']
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/ou/ȝ
					TRYING: ȝ
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/t/h
					TRYING: w
					> version: þ/_/o/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 'th']
				þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 'th']
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ȝ']
				þ/_/o/ȝ(CAVC)
þ/_/o/_/ȝ(CAVAC)
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o/ȝ', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ']
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: u
					> version: þ/_/_/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					> version: þ/y/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVVC : 4___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/_/n
					TRYING: n
					adding blocked set: C = C >> gh, n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n']
				ð/_/e/_/n(CAVAC)
ð/_/e/_/_/n(CAVAAC)
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n']
				version split: ['ð', '_', 'e', '_', '_', 'n']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'c']
				ð/_/e/_/n/c(CAVACC)
ð/_/e/_/_/n/c(CAVAACC)
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_/n/c', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'c']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> n, gh, _
					> version: ð/_/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'ch']
				ð/_/e/_/n/c/h(CAVACCC)
ð/_/e/_/n/ch(CAVACC)
ð/_/e/_/_/n/c/h(CAVAACCC)
ð/_/e/_/_/n/ch(CAVAACC)
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/n/c', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/n/ch', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				ð/_/e/_/n/k/e(CAVACCV)
ð/_/e/_/_/n/k/e(CAVAACCV)
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/n/k', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', '_', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', '_', 'n', 'k']
				ð/h/e/_/n/k(CCVACC)
ð/h/e/_/_/n/k(CCVAACC)
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_/n/k', 'rgx': '((ð))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', '_', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', '_', 'n', 'k']
				{'string': 'ð/h/e/_/_/n', 'rgx': '((ð))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', '_', '_', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((g))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/d
					TRYING: d
					adding blocked set: C = C >> g, gh, _, d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'd']
				ð/_/o/_/d(CAVAC)
ð/_/o/_/_/d(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((g))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'h']
				ð/_/o/_/h(CAVAC)
ð/_/o/_/_/h(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'h']
				version split: ['ð', '_', 'o', '_', '_', 'h']
				{'string': 'ð/_/o/_/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'h']
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, g, gh, _
					> version: ð/_/oƿ/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/_/o/_/ƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', '_', 'g']
				{'string': 'ð/_/oƿ/_/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/s
					TRYING: s
					adding blocked set: C = C >> g, gh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', 's']
				_/_/e/_/s(AAVAC)
_/_/e/_/_/s(AAVAAC)
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', 's']
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> g, gh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				t/h/e/_/n/k/e(CCVACCV)
t/h/e/_/_/n/k/e(CCVAACCV)
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/n/k', 'rgx': '((t))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'e', '_', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/_/n', 'rgx': '((t))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'e', '_', '_', 'n', 'k', 'e']
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: t/h/_/i/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'i', '_', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'i', '_', 'n', 'k']
				t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
t/h/_/i/_/n/k(CCAAACC)
t/h/_/i/_/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n/k', 'rgx': '((t))/((h))/((_))/((i))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n/k', 'rgx': '((t))/((h))/((_))/((i))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', '_', 'n', 'k']
				{'string': 't/h/_/i/_/n', 'rgx': '((t))/((h))/((_))/((i))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', '_', 'n', 'k']
				version split: ['t', 'h', '_', 'i', '_', 'n', 'k']
				{'string': 't/h/_/i/_/n', 'rgx': '((t))/((h))/((_))/((i))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', '_', 'n', 'k']
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'n', 'k']
				t/h/_/_/n/k(CCAACC)
t/h/_/_/_/n/k(CCAAACC)
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/n/k', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/_/n', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'n', 'k']
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_']
				t/h/o/_(CCVA)
t/h/o/_/_(CCVAA)
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_']
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/_/g/h
					TRYING: g
					> version: t/h/o/_/gh
					TRYING: gh
					>>> MULTIPLE RESOLVE OPTIONS: {'g', 'gh'}
					RESULT:  ['g', 'gh']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_/g/h', 'rgx': '((t))/((h))/((o))/((_))/((g)|(gh))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'g', 'h']
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_/gh', 'rgx': '((t))/((h))/((o))/((_))/((g)|(gh))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'h']
				t/h/o/_/h(CCVAC)
t/h/o/_/_/h(CCVAAC)
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_/h', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'h']
				{'string': 't/h/o/_/_/h', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'h']
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> g, gh, _, w
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				t/h/o/_/w/t/h(CCVACCC)
t/h/o/_/_/w/t/h(CCVAACCC)
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/w/t', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_/w', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: t/h/_/y/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'y', '_', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'y', '_', 'n', 'k']
				t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
t/h/_/y/_/n/k(CCAAACC)
t/h/_/y/_/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n/k', 'rgx': '((t))/((h))/((_))/((y))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n/k', 'rgx': '((t))/((h))/((_))/((y))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', '_', 'n', 'k']
				{'string': 't/h/_/y/_/n', 'rgx': '((t))/((h))/((_))/((y))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', '_', 'n', 'k']
				version split: ['t', 'h', '_', 'y', '_', 'n', 'k']
				{'string': 't/h/_/y/_/n', 'rgx': '((t))/((h))/((_))/((y))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', '_', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', '_', 'h']
				t/_/o/_/h(CAVAC)
t/_/o/_/_/h(CAVAAC)
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_/h', 'rgx': '((t))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['t', '_', 'o', '_', 'h']
				version split: ['t', '_', 'o', '_', '_', 'h']
				{'string': 't/_/o/_/_/h', 'rgx': '((t))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['t', '_', 'o', '_', '_', 'h']
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/i/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', '_', 'n', 'k']
				þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/_/n/k(CAVAACC)
þ/_/e/i/_/n/k(CAVAACC)
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n/k', 'rgx': '((þ))/((_))/((e))/((i))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n/k', 'rgx': '((þ))/((_))/((e))/((i))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', '_', 'n', 'k']
				{'string': 'þ/_/e/i/_/n', 'rgx': '((þ))/((_))/((e))/((i))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', '_', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', '_', 'n', 'k']
				{'string': 'þ/_/e/i/_/n', 'rgx': '((þ))/((_))/((e))/((i))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', '_', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/_/n
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n']
				þ/_/e/_/n(CAVAC)
þ/_/e/_/_/n(CAVAAC)
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n']
				version split: ['þ', '_', 'e', '_', '_', 'n']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c']
				þ/_/e/_/n/c(CAVACC)
þ/_/e/_/_/n/c(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				þ/_/e/_/n/c/k/e(CAVACCCV)
þ/_/e/_/n/ck/e(CAVACCV)
þ/_/e/_/_/n/c/k/e(CAVAACCCV)
þ/_/e/_/_/n/ck/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/n/ck', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/_/ng
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'ng']
				þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
þ/_/e/_/_/n/g(CAVAACC)
þ/_/e/_/_/ng(CAVAAC)
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_/n/g', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', '_', 'ng']
				{'string': 'þ/_/e/_/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'ng', 'e']
				þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
þ/_/e/_/_/n/g/e(CAVAACCV)
þ/_/e/_/_/ng/e(CAVAACV)
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/n/g', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/ng/e', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'ng', 'e']
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ch']
				þ/_/e/_/n/c/h(CAVACCC)
þ/_/e/_/n/ch(CAVACC)
þ/_/e/_/_/n/c/h(CAVAACCC)
þ/_/e/_/_/n/ch(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/n/ch', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ch']
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/e/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				þ/_/e/_/n/c/h/e(CAVACCCV)
þ/_/e/_/n/ch/e(CAVACCV)
þ/_/e/_/_/n/c/h/e(CAVAACCCV)
þ/_/e/_/_/n/ch/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/n/ch', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'k']
				þ/_/e/_/n/k(CAVACC)
þ/_/e/_/_/n/k(CAVAACC)
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_/n/k', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				þ/_/e/_/n/k/e(CAVACCV)
þ/_/e/_/_/n/k/e(CAVAACCV)
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/n/k', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: _/y/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
_/y/e/_/_/n/k/e(AAVAACCV)
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/_/n', 'rgx': '((_))/((y))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'e', '_', '_', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', '_', 'h']
				þ/_/e/o/h(CAVVC)
þ/_/e/o/_/h(CAVVAC)
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o/h', 'rgx': '((þ))/((_))/((e))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', 'h']
				version split: ['þ', '_', 'e', 'o', '_', 'h']
				{'string': 'þ/_/e/o/_/h', 'rgx': '((þ))/((_))/((e))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', '_', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: _/y/_/i/n/g/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: _/y/_/i/ng/e
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					> version: _/y/_/i/ng/e
					TRYING: ng
					adding blocked set: C = C >> g, ng, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', '_', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', '_', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/_/n/g/e(AAAAACCV)
_/y/_/i/_/n/g/e(AAAAACCV)
_/y/_/i/_/ng/e(AAAAACV)
_/y/_/i/_/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n/g', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n/g', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng/e', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng/e', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/_/i/_/n', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				{'string': '_/y/_/i/_/n', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', '_', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', '_', 'ng', 'e']
				{'string': '_/y/_/i/_/ng', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', '_', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', '_', 'ng', 'e']
				{'string': '_/y/_/i/_/ng', 'rgx': '((_))/((y))/((_))/((i))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', '_', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/n/ch(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> ð, g, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ð']
				þ/_/o/_/ð(CAVAC)
þ/_/o/_/_/ð(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ð']
				version split: ['þ', '_', 'o', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/_/g/h
					TRYING: g
					> version: þ/_/o/_/gh
					TRYING: gh
					>>> MULTIPLE RESOLVE OPTIONS: {'g', 'gh'}
					RESULT:  ['g', 'gh']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_/g/h', 'rgx': '((þ))/((_))/((o))/((_))/((g)|(gh))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'g', 'h']
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_/gh', 'rgx': '((þ))/((_))/((o))/((_))/((g)|(gh))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'h']
				þ/_/o/_/h(CAVAC)
þ/_/o/_/_/h(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'h']
				{'string': 'þ/_/o/_/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
_/y/o/_/_/h(AAVAAC)
_/y/o/_/_/h(AAVAAC)
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', '_', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/_/h/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'h', 'h']
				þ/_/o/_/h/h(CAVACC)
þ/_/o/_/_/h/h(CAVAACC)
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_/h/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/_/o/_/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> g, c, gh, _
					> version: þ/_/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> g, gh, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ch']
				þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
þ/_/o/_/_/c/h(CAVAACC)
þ/_/o/_/_/ch(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_/c/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ch']
				version split: ['þ', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/_/o/_/_/c', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'ch']
				{'string': 'þ/_/o/_/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ch']
				ANALYSING: þou
					resolving (2)
					> version: þ/_/o/u
					> version: þ/_/o/u
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/o/u/_(CAVAA)
þ/_/o/u/_(CAVAA)
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> g, c, gh, _
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> g, c, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/_/c(CAVAAC)
þ/_/o/u/_/c(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'c']
				ANALYSING: þouh
					resolving (2)
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/_/h(CAVAAC)
þ/_/o/u/_/h(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h']
				ANALYSING: youh
					resolving (2)
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/o/u/_/h(AAVAAC)
_/y/o/u/_/h(AAVAAC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', '_', 'h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', '_', 'h']
				ANALYSING: þouht
					resolving (2)
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> g, gh, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/_/h/t(CAVAACC)
þ/_/o/u/_/h/t(CAVAACC)
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				ANALYSING: þous
					resolving (2)
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> g, gh, _, s
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> g, gh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/_/s(CAVAAC)
þ/_/o/u/_/s(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 's']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 's']
				ANALYSING: þouth
					resolving (4)
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> g, gh, _, t
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> g, gh, _, t
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> g, gh, _, th
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> g, gh, _, th
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/th(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> g, gh, _, ȝ
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> g, gh, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/_/ȝ(CAVAAC)
þ/_/o/u/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> g, gh, _, w
					> version: þ/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> g, gh, _, w
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 'th']
				þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
þ/_/o/_/_/w/t/h(CAVAACCC)
þ/_/o/_/_/w/th(CAVAACC)
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/w/t', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_/w/th', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 'th']
				version split: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> g, gh, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ȝ']
				þ/_/o/_/ȝ(CAVAC)
þ/_/o/_/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/_/u/n
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n']
				þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/_/n(CAAAAC)
þ/_/_/u/_/n(CAAAAC)
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n']
				version split: ['þ', '_', '_', 'u', '_', 'n']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/_/u/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/_/u/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/_/_/u/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/c/h(CAAAACCC)
þ/_/_/u/_/n/ch(CAAAACC)
þ/_/_/u/_/n/ch(CAAAACC)
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n/c', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n/c', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', '_', 'n', 'ch']
				{'string': 'þ/_/_/u/_/n', 'rgx': '((þ))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', '_', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> g, gh, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ð', 'h', 'o', '_', 'g']
		FAIL: 
		FAIL: 
		only one version left: ['ð', '_', 'o', '_', 'g']
		FAIL: 
		only one version left: ['ð', '_', 'oƿ', '_', 'g']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'h', 'o', '_', '_']
		only one version left: ['t', 'h', 'o', '_', 'gh']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', 'o', '_', 'gh']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', 'o', 'u', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'h', 'o', 'u', 'gh']
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['h']", "['e']", "['_']", "['_']"]
		SPLIT: ['ð', 'h', 'o', '_', 'g']
		['ð', 'h', 'o', '_', 'g']
		SPLIT: ["['ð']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['ð', '_', 'o', '_', 'g']
		['ð', '_', 'o', '_', 'g']
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['ð', '_', 'oƿ', '_', 'g']
		['ð', '_', 'oƿ', '_', 'g']
		SPLIT: ["['_']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['e']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['i']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ['t', 'h', 'o', '_', '_']
		['t', 'h', 'o', '_', '_']
		SPLIT: ['t', 'h', 'o', '_', 'gh']
		['t', 'h', 'o', '_', 'gh']
		SPLIT: ["['t']", "['h']", "['o']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['o']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['y']", "['_']"]
		SPLIT: ["['t']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['_']", "['e']", "['i']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['e']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['e']", "['o']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['i']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', '_', 'gh']
		['þ', '_', 'o', '_', 'gh']
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ['þ', '_', 'o', 'u', '_']
		['þ', '_', 'o', 'u', '_']
		['þ', '_', 'o', 'u', '_']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['_']", "['y']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['u']", "['_']"]
		SPLIT: ["['þ']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVVC is INVALID
		[]
		52
		OVERVIEW: version for pattern CCVVC

faulty splits: 52
['ð']['']['e'][''][''] <-! ðen
['ð']['']['e'][''][''] <-! ðenc
['ð']['']['e'][''][''] <-! ðench
['ð']['']['e'][''][''] <-! ðenke
['ð']['h']['e'][''][''] <-! ðhenk
['ð']['i'][''][''][''] <-! ðing
['ð']['']['o'][''][''] <-! ðod
['ð']['']['o'][''][''] <-! ðoh
['']['']['e'][''][''] <-! es
[''][''][''][''][''] <-! s
['t']['h']['e'][''][''] <-! thenke
['t']['h']['']['i'][''] <-! think
['t']['h'][''][''][''] <-! thnk
['t']['h']['o'][''][''] <-! thoh
['t']['h']['o'][''][''] <-! thowth
['t']['h']['']['y'][''] <-! thynk
['t']['']['o'][''][''] <-! toh
['þ']['']['e']['i'][''] <-! þeink
['þ']['']['e'][''][''] <-! þen
['þ']['']['e'][''][''] <-! þenc
['þ']['']['e'][''][''] <-! þencke
['þ']['']['e'][''][''] <-! þeng
['þ']['']['e'][''][''] <-! þenge
['þ']['']['e'][''][''] <-! þench
['þ']['']['e'][''][''] <-! þenche
['þ']['']['e'][''][''] <-! þenk
['þ']['']['e'][''][''] <-! þenke
['']['y']['e'][''][''] <-! yenke
['þ']['']['e']['o'][''] <-! þeoh
['þ']['i'][''][''][''] <-! þinc
['']['y']['']['i'][''] <-! yinge
['þ']['i'][''][''][''] <-! þinch
['þ']['i'][''][''][''] <-! þink
['þ']['i'][''][''][''] <-! þinke
['þ']['']['o'][''][''] <-! þoð
['þ']['']['o'][''][''] <-! þoh
['']['y']['o'][''][''] <-! yoh
['þ']['']['o'][''][''] <-! þohh
['þ']['']['o'][''][''] <-! þoch
['þ']['']['o', 'ou']['u'][''] <-! þouc
['þ']['']['o', 'ou']['u'][''] <-! þouh
['']['y']['o', 'ou']['u'][''] <-! youh
['þ']['']['o', 'ou']['u'][''] <-! þouht
['þ']['']['o', 'ou']['u'][''] <-! þous
['þ']['']['o', 'ou']['u'][''] <-! þouth
['þ']['']['o', 'ou']['u'][''] <-! þouȝ
['þ']['']['o'][''][''] <-! þowth
['þ']['']['o'][''][''] <-! þoȝ
['þ']['']['']['u'][''] <-! þun
['þ']['']['']['u'][''] <-! þunch
['þ']['y'][''][''][''] <-! þynk
[''][''][''][''][''] <-! zenke
t | h | o | u | gh
['ð'] | ['_'] | ['e'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_']
['ð'] | ['_'] | ['e'] | ['_'] | ['_']
['ð'] | ['h'] | ['e'] | ['_'] | ['_']
ð | h | o | _ | g
['ð'] | ['i'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['o'] | ['_'] | ['_']
ð | _ | o | _ | g
['ð'] | ['_'] | ['o'] | ['_'] | ['_']
ð | _ | oƿ | _ | g
['_'] | ['_'] | ['e'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['e'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['i'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_']
t | h | o | _ | _
t | h | o | _ | gh
['t'] | ['h'] | ['o'] | ['_'] | ['_']
['t'] | ['h'] | ['o'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['y'] | ['_']
['t'] | ['_'] | ['o'] | ['_'] | ['_']
þ | _ | _ | _ | _
['þ'] | ['_'] | ['e'] | ['i'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['_'] | ['_']
['_'] | ['y'] | ['e'] | ['_'] | ['_']
['þ'] | ['_'] | ['e'] | ['o'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['i'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
þ | _ | o | _ | gh
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
['_'] | ['y'] | ['o'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
þ | _ | o | u | _
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['_'] | ['y'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['u'] | ['_']
['þ'] | ['_'] | ['_'] | ['u'] | ['_']
['þ'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', '_', 's', 'h'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'}
2 : {'y', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'}
4 : {'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'w'},{'g', 'gh', '_', 'h'},{'g', 'c', 'gh', '_'},{'ð', 'g', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'w'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'gh', '_', 'z'},{'g', 'n', 'gh', '_'},{'g', 'c', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'gh', 'n'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'th'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'n', 'gh', '_'},{'g', 'gh', '_', 'ȝ'},{'g', 'gh', '_', 'd'},{'g', 'ng', 'gh', '_'},{'g', 'gh', '_', 'ȝ'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'gh', '_', 's'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'ng', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 's'},{'g', 'gh', '_', 'ȝ'},{'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'n', 'gh', '_'},{'g', 'gh', '_', 's'},{'g', 'n', 'gh', '_'},{'g', 'ng', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'ng', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'gh', '_', 'h'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'gh', '_', 'w'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'th'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 's'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'h'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'ng', 'gh', '_'},{'g', 'gh', '_', 't'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'ng', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'n', 'gh', '_'},{'g', 'gh', '_', 'ch'},{'g', 'gh', '_', 't'},{'g', 'n', 'gh', '_'},{'g', 'c', 'gh', '_'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: ðench
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þench
				adding littera based on matching pattern
				ANALYSING: þinch
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: þowth
				adding littera based on matching pattern
				ANALYSING: þunch
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> þ, ð, th, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/e/n/k/e
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/i/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/i/n/k
					TRYING: th
					> version: th/i/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/o/gh
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o/g/h
					TRYING: th
					> version: th/o/gh
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/o/h
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: t/h/y/n/k
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					> version: th/y/n/k
					TRYING: th
					> version: th/y/n/k
					TRYING: th
					RESULT:  ['th']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((th))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((th))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					adding blocked set: C = C >> þ, ð, th, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 't', 'o', 'h']
				t/o/h(CVC)
_/t/o/h(ACVC)
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['_', 't', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, th, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, th, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCC : 1___
				ANALYSING: ðench
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þench
				adding littera based on matching pattern
				ANALYSING: þinch
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: þowth
				adding littera based on matching pattern
				ANALYSING: þunch
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'e', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/_/h/e/n/k(CACVCC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'h', 'o', 'g']
				ð/h/o/g(CCVC)
ð/_/h/o/g(CACVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					adding blocked set: V = V >> i, e, u, _, oƿ, o
					RESULT:  ['o']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((o))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((o))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th/e', 'rgx': '((th))/((e))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/n/k
					TRYING: i
					> version: th/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i', 'rgx': '((th))/((i))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i', 'rgx': '((th))/((i))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', 'n', 'k']
				th/n/k(CCC)
th/_/n/k(CACC)
				version split: ['th', 'n', 'k']
				{'string': 'th/n', 'rgx': '((th))/((_))$'}
				_____REMOVING________['th', 'n', 'k']
				version split: ['th', '_', 'n', 'k']
				{'string': 'th/_', 'rgx': '((th))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/g/h
					TRYING: o
					> version: th/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				version split: ['th', 'o', 'gh']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['th', 'o', 'h']
				{'string': 'th/o', 'rgx': '((th))/((o))$'}
				ANALYSING: thynk
					resolving (2)
					> version: th/y/n/k
					TRYING: y
					> version: th/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y', 'rgx': '((th))/((y))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y', 'rgx': '((th))/((y))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/t/o/h
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 't', 'o', 'h']
				_/t/o/h(ACVC)
_/_/t/o/h(AACVC)
				version split: ['_', 't', 'o', 'h']
				{'string': '_/t', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 't', 'o', 'h']
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((e))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					adding blocked set: V = V >> i, y, e, u, _, ye, o
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'eo', 'e'}
					RESULT:  ['eo', 'e']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((eo)|(e))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((eo)|(e))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					adding blocked set: V = V >> i, y, e, u, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					adding blocked set: V = V >> i, y, e, u, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, y, e, u, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					adding blocked set: V = V >> i, y, e, u, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 's']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					adding blocked set: V = V >> i, y, e, u, _, ou, eo, o
					RESULT:  ['o']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((o))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					> version: þ/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCC : 2___
				ANALYSING: ðench
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þench
				adding littera based on matching pattern
				ANALYSING: þinch
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: þowth
				adding littera based on matching pattern
				ANALYSING: þunch
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: n
					adding blocked set: C = C >> i, w, u, n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n']
				ð/e/n(CVC)
ð/e/_/n(CVAC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', 'e', '_', 'n']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'c']
				ð/e/n/c(CVCC)
ð/e/_/n/c(CVACC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', 'e', '_', 'n', 'c']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/e/_/n/k/e(CVACCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e/n', 'rgx': '((ð))/((e))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_', 'rgx': '((ð))/((e))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/h/e/n/k(CACVCC)
ð/_/_/h/e/n/k(CAACVCC)
				version split: ['ð', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'h', 'o', 'g']
				ð/_/h/o/g(CACVC)
ð/_/_/h/o/g(CAACVC)
				version split: ['ð', '_', 'h', 'o', 'g']
				{'string': 'ð/_/h', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: ð/i/n/g
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: ð/i/ng
					TRYING: ng
					adding blocked set: C = C >> i, n, u, w, _, ng
					> version: ð/i/ng
					TRYING: ng
					adding blocked set: C = C >> i, n, u, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: d
					adding blocked set: C = C >> i, n, u, w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'd']
				ð/o/d(CVC)
ð/o/_/d(CVAC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o/d', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: g
					adding blocked set: C = C >> i, n, g, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'g']
				ð/o/g(CVC)
ð/o/_/g(CVAC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o/g', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', 'o', '_', 'g']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'h']
				ð/o/h(CVC)
ð/o/_/h(CVAC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o/h', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> i, n, u, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', 'ƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/o/_/ƿ/g(CVACC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o/ƿ', 'rgx': '((ð))/((o))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_', 'rgx': '((ð))/((o))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: s
					adding blocked set: C = C >> i, n, u, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', 's']
				_/e/s(AVC)
_/e/_/s(AVAC)
				version split: ['_', 'e', 's']
				{'string': '_/e/s', 'rgx': '((_))/((e))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_', 'rgx': '((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					adding blocked set: C = C >> i, n, u, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', 'n', 'k', 'e']
				th/e/n/k/e(CVCCV)
th/e/_/n/k/e(CVACCV)
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th/e/n', 'rgx': '((th))/((e))/((_))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				version split: ['th', 'e', '_', 'n', 'k', 'e']
				{'string': 'th/e/_', 'rgx': '((th))/((e))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: th/i/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', 'n', 'k']
				th/i/n/k(CCCC)
th/i/n/k(CVCC)
th/i/_/n/k(CAACC)
th/i/_/n/k(CAACC)
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i/n', 'rgx': '((th))/((i))/((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th/i/n', 'rgx': '((th))/((i))/((_))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_', 'rgx': '((th))/((i))/((_))$'}
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_', 'rgx': '((th))/((i))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/_/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', 'n', 'k']
				th/_/n/k(CACC)
th/_/_/n/k(CAACC)
				version split: ['th', '_', 'n', 'k']
				{'string': 'th/_/n', 'rgx': '((th))/((_))/((_))$'}
				_____REMOVING________['th', '_', 'n', 'k']
				version split: ['th', '_', '_', 'n', 'k']
				{'string': 'th/_/_', 'rgx': '((th))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_']
				th/o(CV)
th/o/_(CVA)
				version split: ['th', 'o']
				{'string': 'th/o', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o']
				version split: ['th', 'o', '_']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/g/h
					TRYING: g
					adding blocked set: C = C >> i, n, g, u, w, _
					> version: th/o/gh
					TRYING: gh
					adding blocked set: C = C >> i, gh, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', 'gh']
				th/o/g/h(CVCC)
th/o/gh(CVC)
th/o/_/g/h(CVACC)
th/o/_/gh(CVAC)
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th/o/g', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th/o/gh', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'gh']
				version split: ['th', 'o', '_', 'g', 'h']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				version split: ['th', 'o', '_', 'gh']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/h
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', 'h']
				th/o/h(CVC)
th/o/_/h(CVAC)
				version split: ['th', 'o', 'h']
				{'string': 'th/o/h', 'rgx': '((th))/((o))/((_))$'}
				_____REMOVING________['th', 'o', 'h']
				version split: ['th', 'o', '_', 'h']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: th/y/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: th/y/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', 'n', 'k']
				th/y/n/k(CCCC)
th/y/n/k(CVCC)
th/y/_/n/k(CAACC)
th/y/_/n/k(CAACC)
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y/n', 'rgx': '((th))/((y))/((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th/y/n', 'rgx': '((th))/((y))/((_))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_', 'rgx': '((th))/((y))/((_))$'}
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_', 'rgx': '((th))/((y))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> i, n, u, w, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 't', 'o', 'h']
				_/_/t/o/h(AACVC)
_/_/_/t/o/h(AAACVC)
				version split: ['_', '_', 't', 'o', 'h']
				{'string': '_/_/t', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n']
				þ/e/n(CVC)
þ/e/_/n(CVAC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', 'e', '_', 'n']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c']
				þ/e/n/c(CVCC)
þ/e/_/n/c(CVACC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', 'e', '_', 'n', 'c']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/e/n/ck/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/e/_/n/c/k/e(CVACCCV)
þ/e/_/n/ck/e(CVACCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/e/ng
					TRYING: ng
					adding blocked set: C = C >> i, n, u, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/e/_/n/g(CVACC)
þ/e/_/ng(CVAC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', 'e', '_', 'n', 'g']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'ng']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/e/ng/e
					TRYING: ng
					adding blocked set: C = C >> i, n, u, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/e/_/n/g/e(CVACCV)
þ/e/_/ng/e(CVACV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e/ng', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'ng', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/e/n/ch/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/e/_/n/c/h/e(CVACCCV)
þ/e/_/n/ch/e(CVACCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				version split: ['þ', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'k']
				þ/e/n/k(CVCC)
þ/e/_/n/k(CVACC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', 'e', '_', 'n', 'k']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/e/_/n/k/e(CVACCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e/n', 'rgx': '((þ))/((e))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_', 'rgx': '((þ))/((e))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: o
					> version: þ/eo/h
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', 'o', 'h']
				adding dashed alternative: ['þ', 'eo', '_', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/e/_/o/h(CVAVC)
þ/eo/_/h(CVAC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e/o', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo/h', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', 'e', '_', 'o', 'h']
				{'string': 'þ/e/_', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				version split: ['þ', 'eo', '_', 'h']
				{'string': 'þ/eo/_', 'rgx': '((þ))/((eo)|(e))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/i/n/c
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, u, w, _
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, u, w, _
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, u, w, _
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/i/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/i/n/k/e
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: ð
					adding blocked set: C = C >> i, n, ð, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ð']
				þ/o/ð(CVC)
þ/o/_/ð(CVAC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o/ð', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: g
					adding blocked set: C = C >> i, n, g, u, w, _
					> version: þ/o/gh
					TRYING: gh
					adding blocked set: C = C >> i, gh, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/o/_/g/h(CVACC)
þ/o/_/gh(CVAC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o/g', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o/gh', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', 'o', '_', 'g', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'gh']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h']
				þ/o/h(CVC)
þ/o/_/h(CVAC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: h
					adding blocked set: C = C >> i, n, h, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'h', 'h']
				þ/o/h/h(CVCC)
þ/o/_/h/h(CVACC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o/h', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: c
					adding blocked set: C = C >> i, n, u, w, _, c
					> version: þ/o/ch
					TRYING: ch
					adding blocked set: C = C >> i, n, u, w, _, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/o/_/c/h(CVACC)
þ/o/_/ch(CVAC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o/c', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o/ch', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/u
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/o/u
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', 'u']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/o/_/u(CVAA)
þ/o/_/u(CVAA)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/u/c
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/o/u/c
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/o/_/u/c(CVAAC)
þ/o/_/u/c(CVAAC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/u/h
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/o/u/h
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/o/_/u/h(CVAAC)
þ/o/_/u/h(CVAAC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					> version: _/y/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/u/s
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/o/u/s
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', 'u', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/o/_/u/s(CVAAC)
þ/o/_/u/s(CVAAC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', 'u', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/o/_/u/ȝ(CVAAC)
þ/o/_/u/ȝ(CVAAC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o/u', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> i, n, u, w, _, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', 'ȝ']
				þ/o/ȝ(CVC)
þ/o/_/ȝ(CVAC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o/ȝ', 'rgx': '((þ))/((o))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_', 'rgx': '((þ))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/u/n
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/u/_/n(CAAC)
þ/u/_/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u/n', 'rgx': '((þ))/((u))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_', 'rgx': '((þ))/((u))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					> version: þ/y/n/k
					TRYING: n
					adding blocked set: C = C >> i, n, u, w, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, n, u, w, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCC : 3___
				ANALYSING: ðench
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þench
				adding littera based on matching pattern
				ANALYSING: þinch
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: þowth
				adding littera based on matching pattern
				ANALYSING: þunch
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n']
				ð/e/_/n(CVAC)
ð/e/_/_/n(CVAAC)
				version split: ['ð', 'e', '_', 'n']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n']
				version split: ['ð', 'e', '_', '_', 'n']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'c']
				ð/e/_/n/c(CVACC)
ð/e/_/_/n/c(CVAACC)
				version split: ['ð', 'e', '_', 'n', 'c']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'c']
				version split: ['ð', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				ð/e/_/n/k/e(CVACCV)
ð/e/_/_/n/k/e(CVAACCV)
				version split: ['ð', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/n', 'rgx': '((ð))/((e))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_', 'rgx': '((ð))/((e))/((_))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/_/h/e/n/k(CAACVCC)
ð/_/_/_/h/e/n/k(CAAACVCC)
				version split: ['ð', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'h', 'o', 'g']
				ð/_/_/h/o/g(CAACVC)
ð/_/_/_/h/o/g(CAAACVC)
				version split: ['ð', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, c, t
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/d
					TRYING: d
					adding blocked set: C = C >> n, h, g, _, c, d, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'd']
				ð/o/_/d(CVAC)
ð/o/_/_/d(CVAAC)
				version split: ['ð', 'o', '_', 'd']
				{'string': 'ð/o/_/d', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'd']
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/_/g
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'g']
				ð/o/_/g(CVAC)
ð/o/_/_/g(CVAAC)
				version split: ['ð', 'o', '_', 'g']
				{'string': 'ð/o/_/g', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'g']
				version split: ['ð', 'o', '_', '_', 'g']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'h']
				ð/o/_/h(CVAC)
ð/o/_/_/h(CVAAC)
				version split: ['ð', 'o', '_', 'h']
				{'string': 'ð/o/_/h', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'h']
				version split: ['ð', 'o', '_', '_', 'h']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> n, h, g, _, ƿ, c, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', 'ƿ', 'g']
				ð/o/_/ƿ/g(CVACC)
ð/o/_/_/ƿ/g(CVAACC)
				version split: ['ð', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_', 'rgx': '((ð))/((o))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/_/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, c, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', 's']
				_/e/_/s(AVAC)
_/e/_/_/s(AVAAC)
				version split: ['_', 'e', '_', 's']
				{'string': '_/e/_/s', 'rgx': '((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', 's']
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_', 'rgx': '((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					adding blocked set: C = C >> n, h, g, _, c, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: th/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', '_', 'n', 'k', 'e']
				th/e/_/n/k/e(CVACCV)
th/e/_/_/n/k/e(CVAACCV)
				version split: ['th', 'e', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/n', 'rgx': '((th))/((e))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', 'n', 'k', 'e']
				version split: ['th', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_', 'rgx': '((th))/((e))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: th/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: th/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', '_', 'n', 'k']
				th/i/_/n/k(CAACC)
th/i/_/n/k(CAACC)
th/i/_/_/n/k(CAAACC)
th/i/_/_/n/k(CAAACC)
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_/n', 'rgx': '((th))/((i))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', 'n', 'k']
				version split: ['th', 'i', '_', 'n', 'k']
				{'string': 'th/i/_/n', 'rgx': '((th))/((i))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_', 'rgx': '((th))/((i))/((_))/((_))$'}
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_', 'rgx': '((th))/((i))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: th/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', '_', 'n', 'k']
				th/_/_/n/k(CAACC)
th/_/_/_/n/k(CAAACC)
				version split: ['th', '_', '_', 'n', 'k']
				{'string': 'th/_/_/n', 'rgx': '((th))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', 'n', 'k']
				version split: ['th', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_', 'rgx': '((th))/((_))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: th/o/_
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_']
				th/o/_(CVA)
th/o/_/_(CVAA)
				version split: ['th', 'o', '_']
				{'string': 'th/o/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_']
				version split: ['th', 'o', '_', '_']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: th/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', '_', 'gh']
				th/o/_/g/h(CVACC)
th/o/_/gh(CVAC)
th/o/_/_/g/h(CVAACC)
th/o/_/_/gh(CVAAC)
				version split: ['th', 'o', '_', 'g', 'h']
				{'string': 'th/o/_/g', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'g', 'h']
				version split: ['th', 'o', '_', 'gh']
				{'string': 'th/o/_/gh', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'gh']
				version split: ['th', 'o', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				version split: ['th', 'o', '_', '_', 'gh']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: th/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', 'h']
				th/o/_/h(CVAC)
th/o/_/_/h(CVAAC)
				version split: ['th', 'o', '_', 'h']
				{'string': 'th/o/_/h', 'rgx': '((th))/((o))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', 'h']
				version split: ['th', 'o', '_', '_', 'h']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: th/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: th/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', '_', 'n', 'k']
				th/y/_/n/k(CAACC)
th/y/_/n/k(CAACC)
th/y/_/_/n/k(CAAACC)
th/y/_/_/n/k(CAAACC)
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_/n', 'rgx': '((th))/((y))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', 'n', 'k']
				version split: ['th', 'y', '_', 'n', 'k']
				{'string': 'th/y/_/n', 'rgx': '((th))/((y))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_', 'rgx': '((th))/((y))/((_))/((_))$'}
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_', 'rgx': '((th))/((y))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/t/o/h(AAACVC)
_/_/_/_/t/o/h(AAAACVC)
				version split: ['_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n']
				þ/e/_/n(CVAC)
þ/e/_/_/n(CVAAC)
				version split: ['þ', 'e', '_', 'n']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n']
				version split: ['þ', 'e', '_', '_', 'n']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c']
				þ/e/_/n/c(CVACC)
þ/e/_/_/n/c(CVAACC)
				version split: ['þ', 'e', '_', 'n', 'c']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c']
				version split: ['þ', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/e/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				þ/e/_/n/c/k/e(CVACCCV)
þ/e/_/n/ck/e(CVACCV)
þ/e/_/_/n/c/k/e(CVAACCCV)
þ/e/_/_/n/ck/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/e/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', '_', 'ng']
				þ/e/_/n/g(CVACC)
þ/e/_/ng(CVAC)
þ/e/_/_/n/g(CVAACC)
þ/e/_/_/ng(CVAAC)
				version split: ['þ', 'e', '_', 'n', 'g']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'g']
				version split: ['þ', 'e', '_', 'ng']
				{'string': 'þ/e/_/ng', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'ng']
				version split: ['þ', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'ng']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/e/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> n, h, g, _, ng, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'ng', 'e']
				þ/e/_/n/g/e(CVACCV)
þ/e/_/ng/e(CVACV)
þ/e/_/_/n/g/e(CVAACCV)
þ/e/_/_/ng/e(CVAACV)
				version split: ['þ', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', 'ng', 'e']
				{'string': 'þ/e/_/ng', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'ng', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/e/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				þ/e/_/n/c/h/e(CVACCCV)
þ/e/_/n/ch/e(CVACCV)
þ/e/_/_/n/c/h/e(CVAACCCV)
þ/e/_/_/n/ch/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				version split: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'k']
				þ/e/_/n/k(CVACC)
þ/e/_/_/n/k(CVAACC)
				version split: ['þ', 'e', '_', 'n', 'k']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'k']
				version split: ['þ', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				þ/e/_/n/k/e(CVACCV)
þ/e/_/_/n/k/e(CVAACCV)
				version split: ['þ', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/n', 'rgx': '((þ))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((e))/((_))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/e/n/k/e
					TRYING: e
					> version: _/y/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/_/o/h
					TRYING: o
					> version: þ/eo/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', 'o', 'h']
				adding dashed alternative: ['þ', 'eo', '_', '_', 'h']
				þ/e/_/o/h(CVAVC)
þ/eo/_/h(CVAC)
þ/e/_/_/o/h(CVAAVC)
þ/eo/_/_/h(CVAAC)
				version split: ['þ', 'e', '_', 'o', 'h']
				{'string': 'þ/e/_/o', 'rgx': '((þ))/((eo)|(e))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', 'o', 'h']
				version split: ['þ', 'eo', '_', 'h']
				{'string': 'þ/eo/_/h', 'rgx': '((þ))/((eo)|(e))/((_))/((_))$'}
				_____REMOVING________['þ', 'eo', '_', 'h']
				version split: ['þ', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/e/_/_', 'rgx': '((þ))/((eo)|(e))/((_))/((_))$'}
				version split: ['þ', 'eo', '_', '_', 'h']
				{'string': 'þ/eo/_/_', 'rgx': '((þ))/((eo)|(e))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, h, g, _, c, t
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, h, g, _, c, t
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, h, g, _, c, t
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> n, h, ð, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ð']
				þ/o/_/ð(CVAC)
þ/o/_/_/ð(CVAAC)
				version split: ['þ', 'o', '_', 'ð']
				{'string': 'þ/o/_/ð', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ð']
				version split: ['þ', 'o', '_', '_', 'ð']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/_/g/h
					TRYING: g
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'gh']
				þ/o/_/g/h(CVACC)
þ/o/_/gh(CVAC)
þ/o/_/_/g/h(CVAACC)
þ/o/_/_/gh(CVAAC)
				version split: ['þ', 'o', '_', 'g', 'h']
				{'string': 'þ/o/_/g', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'g', 'h']
				version split: ['þ', 'o', '_', 'gh']
				{'string': 'þ/o/_/gh', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'gh']
				version split: ['þ', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'gh']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'h']
				þ/o/_/h(CVAC)
þ/o/_/_/h(CVAAC)
				version split: ['þ', 'o', '_', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h']
				version split: ['þ', 'o', '_', '_', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/o/h
					TRYING: o
					> version: _/y/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/h/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'h', 'h']
				þ/o/_/h/h(CVACC)
þ/o/_/_/h/h(CVAACC)
				version split: ['þ', 'o', '_', 'h', 'h']
				{'string': 'þ/o/_/h', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'h', 'h']
				version split: ['þ', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> n, h, g, _, c, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ch']
				þ/o/_/c/h(CVACC)
þ/o/_/ch(CVAC)
þ/o/_/_/c/h(CVAACC)
þ/o/_/_/ch(CVAAC)
				version split: ['þ', 'o', '_', 'c', 'h']
				{'string': 'þ/o/_/c', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'c', 'h']
				version split: ['þ', 'o', '_', 'ch']
				{'string': 'þ/o/_/ch', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ch']
				version split: ['þ', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'ch']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/o/_/u
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					> version: þ/o/_/u
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u']
				þ/o/_/u(CVAA)
þ/o/_/u(CVAA)
þ/o/_/_/u(CVAAA)
þ/o/_/_/u(CVAAA)
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u']
				version split: ['þ', 'o', '_', 'u']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u']
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					> version: þ/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'c']
				þ/o/_/u/c(CVAAC)
þ/o/_/u/c(CVAAC)
þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/u/c(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'c']
				version split: ['þ', 'o', '_', 'u', 'c']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					> version: þ/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'h']
				þ/o/_/u/h(CVAAC)
þ/o/_/u/h(CVAAC)
þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/u/h(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h']
				version split: ['þ', 'o', '_', 'u', 'h']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/ou/h
					TRYING: ou
					> version: _/y/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					> version: þ/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 's']
				þ/o/_/u/s(CVAAC)
þ/o/_/u/s(CVAAC)
þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/u/s(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 's']
				version split: ['þ', 'o', '_', 'u', 's']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					> version: þ/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, h, g, u, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', '_', 'u', 'ȝ']
				þ/o/_/u/ȝ(CVAAC)
þ/o/_/u/ȝ(CVAAC)
þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/u/ȝ(CVAAAC)
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/u', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, h, g, _, ȝ, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', 'ȝ']
				þ/o/_/ȝ(CVAC)
þ/o/_/_/ȝ(CVAAC)
				version split: ['þ', 'o', '_', 'ȝ']
				{'string': 'þ/o/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_', 'rgx': '((þ))/((o))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/u/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', '_', 'n']
				þ/u/_/n(CAAC)
þ/u/_/n(CAAC)
þ/u/_/_/n(CAAAC)
þ/u/_/_/n(CAAAC)
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n']
				version split: ['þ', 'u', '_', 'n']
				{'string': 'þ/u/_/n', 'rgx': '((þ))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', 'n']
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_', 'rgx': '((þ))/((u))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, g, _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, h, g, _, c, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCC : 4___
				ANALYSING: ðench
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: þeink
				adding littera based on matching pattern
				ANALYSING: þench
				adding littera based on matching pattern
				ANALYSING: þinch
				adding littera based on matching pattern
				ANALYSING: þouht
				adding littera based on matching pattern
				ANALYSING: þouth
				adding littera based on matching pattern
				ANALYSING: þowth
				adding littera based on matching pattern
				ANALYSING: þunch
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> k, n, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n']
				ð/e/_/_/n(CVAAC)
ð/e/_/_/_/n(CVAAAC)
				version split: ['ð', 'e', '_', '_', 'n']
				{'string': 'ð/e/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n']
				version split: ['ð', 'e', '_', '_', '_', 'n']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'c']
				ð/e/_/_/n/c(CVAACC)
ð/e/_/_/_/n/c(CVAAACC)
				version split: ['ð', 'e', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_/n/c', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'c']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				ð/e/_/_/n/k/e(CVAACCV)
ð/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['ð', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_/n/k', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'ð/e/_/_/_/n', 'rgx': '((ð))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/_/_/_/h/e/n/k
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				ð/_/_/_/h/e/n/k(CAAACVCC)
ð/_/_/_/_/h/e/n/k(CAAAACVCC)
				version split: ['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_/h/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'h', 'e', 'n', 'k']
				version split: ['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				{'string': 'ð/_/_/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'h', 'e', 'n', 'k']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/_/_/_/h/o/g
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				ð/_/_/_/h/o/g(CAAACVC)
ð/_/_/_/_/h/o/g(CAAAACVC)
				version split: ['ð', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_/h/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'h', 'o', 'g']
				version split: ['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				{'string': 'ð/_/_/_/_/h', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'h', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/_/_/d
					TRYING: d
					adding blocked set: C = C >> h, _, d, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'd']
				ð/o/_/_/d(CVAAC)
ð/o/_/_/_/d(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'd']
				{'string': 'ð/o/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'd']
				version split: ['ð', 'o', '_', '_', '_', 'd']
				{'string': 'ð/o/_/_/_/d', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/_/_/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'g']
				ð/o/_/_/g(CVAAC)
ð/o/_/_/_/g(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'g']
				{'string': 'ð/o/_/_/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'g']
				version split: ['ð', 'o', '_', '_', '_', 'g']
				{'string': 'ð/o/_/_/_/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'h']
				ð/o/_/_/h(CVAAC)
ð/o/_/_/_/h(CVAAAC)
				version split: ['ð', 'o', '_', '_', 'h']
				{'string': 'ð/o/_/_/h', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'h']
				version split: ['ð', 'o', '_', '_', '_', 'h']
				{'string': 'ð/o/_/_/_/h', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'h']
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/o/_/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, k, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				ð/o/_/_/ƿ/g(CVAACC)
ð/o/_/_/_/ƿ/g(CVAAACC)
				version split: ['ð', 'o', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/ƿ/g', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', 'ƿ', 'g']
				version split: ['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				{'string': 'ð/o/_/_/_/ƿ', 'rgx': '((ð))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'o', '_', '_', '_', 'ƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/e/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', '_', '_', '_', 's']
				_/e/_/_/s(AVAAC)
_/e/_/_/_/s(AVAAAC)
				version split: ['_', 'e', '_', '_', 's']
				{'string': '_/e/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', 's']
				version split: ['_', 'e', '_', '_', '_', 's']
				{'string': '_/e/_/_/_/s', 'rgx': '((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'e', '_', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, s, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				ANALYSING: thenke
					resolving (1)
					> version: th/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				th/e/_/_/n/k/e(CVAACCV)
th/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['th', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_/n/k', 'rgx': '((th))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'th/e/_/_/_/n', 'rgx': '((th))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: think
					resolving (2)
					> version: th/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: th/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'i', '_', '_', '_', 'n', 'k']
				th/i/_/_/n/k(CAAACC)
th/i/_/_/n/k(CAAACC)
th/i/_/_/_/n/k(CAAAACC)
th/i/_/_/_/n/k(CAAAACC)
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/n/k', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/n/k', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/_/n', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', '_', 'n', 'k']
				version split: ['th', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'th/i/_/_/_/n', 'rgx': '((th))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: thnk
					resolving (1)
					> version: th/_/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', '_', '_', '_', '_', 'n', 'k']
				th/_/_/_/n/k(CAAACC)
th/_/_/_/_/n/k(CAAAACC)
				version split: ['th', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_/n/k', 'rgx': '((th))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', '_', 'n', 'k']
				version split: ['th', '_', '_', '_', '_', 'n', 'k']
				{'string': 'th/_/_/_/_/n', 'rgx': '((th))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['th', '_', '_', '_', '_', 'n', 'k']
				ANALYSING: tho
					resolving (1)
					> version: th/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_']
				th/o/_/_(CVAA)
th/o/_/_/_(CVAAA)
				version split: ['th', 'o', '_', '_']
				{'string': 'th/o/_/_', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_']
				version split: ['th', 'o', '_', '_', '_']
				{'string': 'th/o/_/_/_', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: th/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					> version: th/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'gh']
				th/o/_/_/g/h(CVAACC)
th/o/_/_/gh(CVAAC)
th/o/_/_/_/g/h(CVAAACC)
th/o/_/_/_/gh(CVAAAC)
				version split: ['th', 'o', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_/g/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'g', 'h']
				version split: ['th', 'o', '_', '_', 'gh']
				{'string': 'th/o/_/_/gh', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'gh']
				version split: ['th', 'o', '_', '_', '_', 'g', 'h']
				{'string': 'th/o/_/_/_/g', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'g', 'h']
				version split: ['th', 'o', '_', '_', '_', 'gh']
				{'string': 'th/o/_/_/_/gh', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'gh']
				ANALYSING: thoh
					resolving (1)
					> version: th/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['th', 'o', '_', '_', '_', 'h']
				th/o/_/_/h(CVAAC)
th/o/_/_/_/h(CVAAAC)
				version split: ['th', 'o', '_', '_', 'h']
				{'string': 'th/o/_/_/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', 'h']
				version split: ['th', 'o', '_', '_', '_', 'h']
				{'string': 'th/o/_/_/_/h', 'rgx': '((th))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'o', '_', '_', '_', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: th/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: th/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['th', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['th', 'y', '_', '_', '_', 'n', 'k']
				th/y/_/_/n/k(CAAACC)
th/y/_/_/n/k(CAAACC)
th/y/_/_/_/n/k(CAAAACC)
th/y/_/_/_/n/k(CAAAACC)
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/n/k', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/n/k', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/_/n', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', '_', 'n', 'k']
				version split: ['th', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'th/y/_/_/_/n', 'rgx': '((th))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['th', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: _/_/_/_/t/o/h
					TRYING: t
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				_/_/_/_/t/o/h(AAAACVC)
_/_/_/_/_/t/o/h(AAAAACVC)
				version split: ['_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/t/o', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 't', 'o', 'h']
				version split: ['_', '_', '_', '_', '_', 't', 'o', 'h']
				{'string': '_/_/_/_/_/t', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 't', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n']
				þ/e/_/_/n(CVAAC)
þ/e/_/_/_/n(CVAAAC)
				version split: ['þ', 'e', '_', '_', 'n']
				{'string': 'þ/e/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n']
				version split: ['þ', 'e', '_', '_', '_', 'n']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c']
				þ/e/_/_/n/c(CVAACC)
þ/e/_/_/_/n/c(CVAAACC)
				version split: ['þ', 'e', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/_/_/n/c/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/n/ck/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				þ/e/_/_/n/c/k/e(CVAACCCV)
þ/e/_/_/n/ck/e(CVAACCV)
þ/e/_/_/_/n/c/k/e(CVAAACCCV)
þ/e/_/_/_/n/ck/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_/n/ck', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'ck', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'ng']
				þ/e/_/_/n/g(CVAACC)
þ/e/_/_/ng(CVAAC)
þ/e/_/_/_/n/g(CVAAACC)
þ/e/_/_/_/ng(CVAAAC)
				version split: ['þ', 'e', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_/n/g', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'g']
				version split: ['þ', 'e', '_', '_', 'ng']
				{'string': 'þ/e/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'ng']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'g']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'g']
				version split: ['þ', 'e', '_', '_', '_', 'ng']
				{'string': 'þ/e/_/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/_/_/n/g/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/ng/e
					TRYING: ng
					adding blocked set: C = C >> h, _, ng, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'ng', 'e']
				þ/e/_/_/n/g/e(CVAACCV)
þ/e/_/_/ng/e(CVAACV)
þ/e/_/_/_/n/g/e(CVAAACCV)
þ/e/_/_/_/ng/e(CVAAACV)
				version split: ['þ', 'e', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_/n/g', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_/ng/e', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'ng', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'g', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'ng', 'e']
				{'string': 'þ/e/_/_/_/ng', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'ng', 'e']
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/_/_/n/c/h/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/e/_/_/n/ch/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				þ/e/_/_/n/c/h/e(CVAACCCV)
þ/e/_/_/n/ch/e(CVAACCV)
þ/e/_/_/_/n/c/h/e(CVAAACCCV)
þ/e/_/_/_/n/ch/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_/n/c', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_/n/ch', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'ch', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'k']
				þ/e/_/_/n/k(CVAACC)
þ/e/_/_/_/n/k(CVAAACC)
				version split: ['þ', 'e', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_/n/k', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'k']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'k']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				þ/e/_/_/n/k/e(CVAACCV)
þ/e/_/_/_/n/k/e(CVAAACCV)
				version split: ['þ', 'e', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_/n/k', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/e/_/_/_/n', 'rgx': '((þ))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/_/_/o/h
					TRYING: o
					> version: þ/eo/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'e', '_', '_', '_', 'o', 'h']
				adding dashed alternative: ['þ', 'eo', '_', '_', '_', 'h']
				þ/e/_/_/o/h(CVAAVC)
þ/eo/_/_/h(CVAAC)
þ/e/_/_/_/o/h(CVAAAVC)
þ/eo/_/_/_/h(CVAAAC)
				version split: ['þ', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/e/_/_/o/h', 'rgx': '((þ))/((eo)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', 'o', 'h']
				version split: ['þ', 'eo', '_', '_', 'h']
				{'string': 'þ/eo/_/_/h', 'rgx': '((þ))/((eo)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'eo', '_', '_', 'h']
				version split: ['þ', 'e', '_', '_', '_', 'o', 'h']
				{'string': 'þ/e/_/_/_/o', 'rgx': '((þ))/((eo)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'e', '_', '_', '_', 'o', 'h']
				version split: ['þ', 'eo', '_', '_', '_', 'h']
				{'string': 'þ/eo/_/_/_/h', 'rgx': '((þ))/((eo)|(e))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'eo', '_', '_', '_', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, k, t
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, k, t
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, k, t
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/_/_/ð
					TRYING: ð
					adding blocked set: C = C >> h, ð, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ð']
				þ/o/_/_/ð(CVAAC)
þ/o/_/_/_/ð(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'ð']
				{'string': 'þ/o/_/_/ð', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ð']
				version split: ['þ', 'o', '_', '_', '_', 'ð']
				{'string': 'þ/o/_/_/_/ð', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/_/_/g/h
					TRYING: g
					adding blocked set: C = C >> h, g, _, k, t
					> version: þ/o/_/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'g', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'gh']
				þ/o/_/_/g/h(CVAACC)
þ/o/_/_/gh(CVAAC)
þ/o/_/_/_/g/h(CVAAACC)
þ/o/_/_/_/gh(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_/g/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'g', 'h']
				version split: ['þ', 'o', '_', '_', 'gh']
				{'string': 'þ/o/_/_/gh', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'gh']
				version split: ['þ', 'o', '_', '_', '_', 'g', 'h']
				{'string': 'þ/o/_/_/_/g', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'g', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'gh']
				{'string': 'þ/o/_/_/_/gh', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/_/_/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'h']
				þ/o/_/_/h(CVAAC)
þ/o/_/_/_/h(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'h']
				{'string': 'þ/o/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'h']
				{'string': 'þ/o/_/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/_/o/h
					TRYING: o
					> version: _/y/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/_/_/h/h
					TRYING: h
					adding blocked set: C = C >> k, _, t, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'h', 'h']
				þ/o/_/_/h/h(CVAACC)
þ/o/_/_/_/h/h(CVAAACC)
				version split: ['þ', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_/h/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'h', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'h', 'h']
				{'string': 'þ/o/_/_/_/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/_/_/c/h
					TRYING: c
					adding blocked set: C = C >> h, _, c, k, t
					> version: þ/o/_/_/ch
					TRYING: ch
					adding blocked set: C = C >> h, _, k, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ch']
				þ/o/_/_/c/h(CVAACC)
þ/o/_/_/ch(CVAAC)
þ/o/_/_/_/c/h(CVAAACC)
þ/o/_/_/_/ch(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_/c/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'c', 'h']
				version split: ['þ', 'o', '_', '_', 'ch']
				{'string': 'þ/o/_/_/ch', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ch']
				version split: ['þ', 'o', '_', '_', '_', 'c', 'h']
				{'string': 'þ/o/_/_/_/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'c', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'ch']
				{'string': 'þ/o/_/_/_/ch', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ch']
				ANALYSING: þou
					resolving (2)
					> version: þ/o/_/_/u
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: þ/o/_/_/u
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u']
				þ/o/_/_/u(CVAAA)
þ/o/_/_/u(CVAAA)
þ/o/_/_/_/u(CVAAAA)
þ/o/_/_/_/u(CVAAAA)
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u']
				version split: ['þ', 'o', '_', '_', 'u']
				{'string': 'þ/o/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u']
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u']
				version split: ['þ', 'o', '_', '_', '_', 'u']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u']
				ANALYSING: þouc
					resolving (2)
					> version: þ/o/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: þ/o/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'c']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'c']
				þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/u/c(CVAAAC)
þ/o/_/_/_/u/c(CVAAAAC)
þ/o/_/_/_/u/c(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/u/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/u/c', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'c']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'c']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'c']
				ANALYSING: þouh
					resolving (2)
					> version: þ/o/_/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: þ/o/_/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'h']
				þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/u/h(CVAAAC)
þ/o/_/_/_/u/h(CVAAAAC)
þ/o/_/_/_/u/h(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/u/h', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'h']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/ou/h
					TRYING: ou
					> version: _/y/_/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/ou/h(AAAAAVC)
_/y/_/_/_/ou/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				ANALYSING: þous
					resolving (2)
					> version: þ/o/_/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: þ/o/_/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 's']
				þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/u/s(CVAAAC)
þ/o/_/_/_/u/s(CVAAAAC)
þ/o/_/_/_/u/s(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/u/s', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/u/s', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 's']
				version split: ['þ', 'o', '_', '_', '_', 'u', 's']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 's']
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/o/_/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					> version: þ/o/_/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, u, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/u/ȝ(CVAAAC)
þ/o/_/_/_/u/ȝ(CVAAAAC)
þ/o/_/_/_/u/ȝ(CVAAAAC)
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/u/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/u/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				{'string': 'þ/o/_/_/_/u', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'u', 'ȝ']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, _, ȝ, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'o', '_', '_', '_', 'ȝ']
				þ/o/_/_/ȝ(CVAAC)
þ/o/_/_/_/ȝ(CVAAAC)
				version split: ['þ', 'o', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', 'ȝ']
				version split: ['þ', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/o/_/_/_/ȝ', 'rgx': '((þ))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'o', '_', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/u/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/u/_/_/n
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n']
				adding dashed alternative: ['þ', 'u', '_', '_', '_', 'n']
				þ/u/_/_/n(CAAAC)
þ/u/_/_/n(CAAAC)
þ/u/_/_/_/n(CAAAAC)
þ/u/_/_/_/n(CAAAAC)
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', 'n']
				{'string': 'þ/u/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', '_', 'n']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n']
				version split: ['þ', 'u', '_', '_', '_', 'n']
				{'string': 'þ/u/_/_/_/n', 'rgx': '((þ))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'u', '_', '_', '_', 'n']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> n, h, _, k, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, _, z, k, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['th', 'o', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ð', 'e', 'n', 'c', 'h']
		SPLIT: ['th', 'o', 'u', 'g', 'h']
		SPLIT: ['th', 'o', 'w', 't', 'h']
		SPLIT: ['þ', 'e', 'i', 'n', 'k']
		SPLIT: ['þ', 'e', 'n', 'c', 'h']
		SPLIT: ['þ', 'i', 'n', 'c', 'h']
		SPLIT: ['þ', 'o', 'u', 'h', 't']
		SPLIT: ['þ', 'o', 'u', 't', 'h']
		SPLIT: ['þ', 'o', 'w', 't', 'h']
		SPLIT: ['þ', 'u', 'n', 'c', 'h']
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['th', 'o', '_', '_', '_']
		['th', 'o', '_', '_', '_']
		SPLIT: ["['th']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['th']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['eo', 'e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['u']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCC is INVALID
		[{'i', 'n', 'u', 'w', '_'}, {'n', 'h', 'g', '_', 'c', 't'}, {'k', '_', 't', 'h'}]
		49
		OVERVIEW: version for pattern CVCCC
{'i', 'n', 'u', 'w', '_'}, {'n', 'h', 'g', '_', 'c', 't'}, {'k', '_', 't', 'h'}
faulty splits: 49
['ð']['e'][''][''][''] <-! ðen
['ð']['e'][''][''][''] <-! ðenc
['ð']['e'][''][''][''] <-! ðenke
['ð'][''][''][''][''] <-! ðhenk
['ð'][''][''][''][''] <-! ðhog
['ð']['i'][''][''][''] <-! ðing
['ð']['o'][''][''][''] <-! ðod
['ð']['o'][''][''][''] <-! ðog
['ð']['o'][''][''][''] <-! ðoh
['ð']['o'][''][''][''] <-! ðoƿg
['']['e'][''][''][''] <-! es
[''][''][''][''][''] <-! s
['th']['e'][''][''][''] <-! thenke
['th']['i'][''][''][''] <-! think
['th'][''][''][''][''] <-! thnk
['th']['o'][''][''][''] <-! thogh
['th']['o'][''][''][''] <-! thoh
['th']['y'][''][''][''] <-! thynk
[''][''][''][''][''] <-! toh
['þ']['e'][''][''][''] <-! þen
['þ']['e'][''][''][''] <-! þenc
['þ']['e'][''][''][''] <-! þencke
['þ']['e'][''][''][''] <-! þeng
['þ']['e'][''][''][''] <-! þenge
['þ']['e'][''][''][''] <-! þenche
['þ']['e'][''][''][''] <-! þenk
['þ']['e'][''][''][''] <-! þenke
['']['y'][''][''][''] <-! yenke
['þ']['eo', 'e'][''][''][''] <-! þeoh
['þ']['i'][''][''][''] <-! þinc
['']['y'][''][''][''] <-! yinge
['þ']['i'][''][''][''] <-! þink
['þ']['i'][''][''][''] <-! þinke
['þ']['o'][''][''][''] <-! þoð
['þ']['o'][''][''][''] <-! þogh
['þ']['o'][''][''][''] <-! þoh
['']['y'][''][''][''] <-! yoh
['þ']['o'][''][''][''] <-! þohh
['þ']['o'][''][''][''] <-! þoch
['þ']['o'][''][''][''] <-! þou
['þ']['o'][''][''][''] <-! þouc
['þ']['o'][''][''][''] <-! þouh
['']['y'][''][''][''] <-! youh
['þ']['o'][''][''][''] <-! þous
['þ']['o'][''][''][''] <-! þouȝ
['þ']['o'][''][''][''] <-! þoȝ
['þ']['u'][''][''][''] <-! þun
['þ']['y'][''][''][''] <-! þynk
[''][''][''][''][''] <-! zenke
ð | e | n | c | h
th | o | u | g | h
th | o | w | t | h
þ | e | i | n | k
þ | e | n | c | h
þ | i | n | c | h
þ | o | u | h | t
þ | o | u | t | h
þ | o | w | t | h
þ | u | n | c | h
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['e'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['i'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['ð'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['th'] | ['e'] | ['_'] | ['_'] | ['_']
['th'] | ['i'] | ['_'] | ['_'] | ['_']
['th'] | ['_'] | ['_'] | ['_'] | ['_']
th | o | _ | _ | _
['th'] | ['o'] | ['_'] | ['_'] | ['_']
['th'] | ['o'] | ['_'] | ['_'] | ['_']
['th'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
þ | _ | _ | _ | _
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['þ'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['eo', 'e'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['u'] | ['_'] | ['_'] | ['_']
['þ'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'þ', 'ð', 'th', '_', 'z'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'þ', 'ð', 'th', '_', 's'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'y', 'þ', 'ð', 'th', '_'},{'þ', 'ð', 'th', '_', 't'},{'y', 'þ', 'ð', 'th', '_'}
2 : {'i', 'n', 'u', 'w', '_', 'c'},{'i', 'n', 'g', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 't'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'ch'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'ng'},{'i', 'n', 'u', 'w', '_', 'ng'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'd'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'ng'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'g', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'gh', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'ng'},{'i', 'n', 'ð', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'ƿ'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 's'},{'i', 'n', 'u', 'w', '_', 'ȝ'},{'i', 'n', 'g', 'u', 'w', '_'},{'i', 'w', 'u', 'n'},{'i', 'gh', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'h', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 'z'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_', 's'},{'i', 'n', 'u', 'w', '_'},{'i', 'n', 'u', 'w', '_'}
3 : {'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'ng', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'ng', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 's', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'i', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'gh', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 'd', 't'},{'n', 'h', 'g', '_', 'ƿ', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'i', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'ng', 'c', 't'},{'i', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't', 'ch'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'ng', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'ð', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'i', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 's', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 'z', 't'},{'gh', 'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', 'u', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'ȝ', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'},{'n', 'h', 'g', '_', 'c', 't'}
4 : {'n', 'h', '_', 'k', 't'},{'h', '_', 'ȝ', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'h', '_', 's', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'ð', '_', 'k', 't'},{'i', 'h', '_', 'k', 't'},{'h', '_', 's', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'h', '_', 'ƿ', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'k', 'n', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'gh', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'ng', 'k', 't'},{'h', 'g', '_', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'i', 'h', '_', 'k', 't'},{'h', '_', 'c', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', '_', 'd', 'k', 't'},{'h', '_', 'z', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'gh', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'i', 'h', '_', 'k', 't'},{'i', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'k', '_', 't', 'h'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'},{'k', '_', 't', 'h'},{'h', '_', 'k', 't', 'ch'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'n', 'h', '_', 'k', 't'},{'h', 'u', '_', 'k', 't'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CCVVCC
	Selection for pattern: CCVVCC completed
	Making a version for pattern: CCVVCC
			___CCVVCC : 0___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> ð, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					> version: th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					> version: t/h/i/n/k
					TRYING: t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					> version: t/h/o/gh
					TRYING: t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'h']
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					> version: th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: t/h/ow/t/h
					TRYING: t
					> version: th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					> version: t/h/y/n/k
					TRYING: t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['t']
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVVCC : 1___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n']
				ð/e/n(CVC)
ð/_/e/n(CAVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
ð/_/e/n/c(CAVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/_/e/n/k/e(CAVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'd']
				ð/o/d(CVC)
ð/_/o/d(CAVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g']
				ð/o/g(CVC)
ð/_/o/g(CAVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h']
				ð/o/h(CVC)
ð/_/o/h(CAVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 's']
				_/e/s(AVC)
_/_/e/s(AAVC)
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: h
					> version: t/h/i/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: h
					> version: t/h/o/gh
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: h
					> version: t/h/ow/t/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: h
					> version: t/h/y/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h']
				t/o/h(CVC)
t/_/o/h(CAVC)
				version split: ['t', 'o', 'h']
				{'string': 't/o', 'rgx': '((t))/((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_', 'rgx': '((t))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n']
				þ/e/n(CVC)
þ/_/e/n(CAVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
þ/_/e/n/c(CAVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
þ/_/e/n/k(CAVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/_/e/n/k/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ð']
				þ/o/ð(CVC)
þ/_/o/ð(CAVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h']
				þ/o/h(CVC)
þ/_/o/h(CAVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
þ/_/o/h/h(CAVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					> version: þ/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					> version: þ/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ']
				þ/o/ȝ(CVC)
þ/_/o/ȝ(CAVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, y, h, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVVCC : 2___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: e
					> version: ð/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e', 'rgx': '((ð))/((h))/((e))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o', 'rgx': '((ð))/((h))/((o))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: o
					> version: ð/_/oƿ/g
					TRYING: oƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'oƿ', 'o'}
					RESULT:  ['oƿ', 'o']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e', 'rgx': '((t))/((h))/((e))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k']
				t/h/n/k(CCCC)
t/h/_/n/k(CCACC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h/n', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: o
					> version: t/h/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: o
					> version: t/h/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, oƿ, o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h/ow', 'rgx': '((t))/((h))/((o))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o', 'rgx': '((t))/((_))/((o))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> e, ei, _, oƿ, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: e
					> version: þ/_/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: e
					> version: þ/_/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: e
					> version: þ/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/e/o/h
					TRYING: e
					> version: þ/_/eo/h
					TRYING: eo
					adding blocked set: V = V >> e, _, oƿ, eo, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_/eo', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: o
					> version: þ/_/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: o
					> version: þ/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/ou/c
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/ou/h/t
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/ou/s
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/ou/t/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: þ/_/ou/th
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/o/w/t/h
					TRYING: o
					> version: þ/_/o/w/th
					TRYING: o
					> version: þ/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					> version: þ/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 't', 'h']
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVVCC : 3___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n']
				ð/_/e/n(CAVC)
ð/_/e/_/n(CAVAC)
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n']
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c']
				ð/_/e/n/c(CAVCC)
ð/_/e/_/n/c(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: n
					> version: ð/_/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'ch']
				ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
ð/_/e/_/n/c/h(CAVACCC)
ð/_/e/_/n/ch(CAVACC)
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				ð/_/e/n/k/e(CAVCCV)
ð/_/e/_/n/k/e(CAVACCV)
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_', 'rgx': '((ð))/((_))/((e))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', '_', 'n', 'k']
				ð/h/e/n/k(CCVCC)
ð/h/e/_/n/k(CCVACC)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n', 'rgx': '((ð))/((h))/((e))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_', 'rgx': '((ð))/((h))/((e))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', 'g']
				ð/h/o/g(CCVC)
ð/h/o/_/g(CCVAC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o/g', 'rgx': '((ð))/((h))/((o))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_', 'rgx': '((ð))/((h))/((o))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/ng
					TRYING: ng
					> version: ð/i/_/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'd']
				ð/_/o/d(CAVC)
ð/_/o/_/d(CAVAC)
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o/d', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'd']
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'g']
				ð/_/o/g(CAVC)
ð/_/o/_/g(CAVAC)
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o/g', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g']
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'h']
				ð/_/o/h(CAVC)
ð/_/o/_/h(CAVAC)
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o/h', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h']
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: ƿ
					> version: ð/_/oƿ/g
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', '_', 'g']
				ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
ð/_/o/_/ƿ/g(CAVACC)
ð/_/oƿ/_/g(CAVAC)
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o/ƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g']
				version split: ['ð', '_', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				version split: ['ð', '_', 'oƿ', '_', 'g']
				{'string': 'ð/_/oƿ/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', 's']
				_/_/e/s(AAVC)
_/_/e/_/s(AAVAC)
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e/s', 'rgx': '((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', 'e', 's']
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_', 'rgx': '((_))/((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
t/h/e/_/n/k/e(CCVACCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e/n', 'rgx': '((t))/((h))/((e))/((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_', 'rgx': '((t))/((h))/((e))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: i
					> version: t/h/_/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((i))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((i))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'n', 'k']
				t/h/_/n/k(CCACC)
t/h/_/_/n/k(CCAACC)
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_']
				t/h/o(CCV)
t/h/o/_(CCVA)
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: g
					> version: t/h/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'g', 'h']
				adding dashed alternative: ['t', 'h', 'o', '_', 'gh']
				t/h/o/g/h(CCVCC)
t/h/o/gh(CCVC)
t/h/o/_/g/h(CCVACC)
t/h/o/_/gh(CCVAC)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o/gh', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'h']
				t/h/o/h(CCVC)
t/h/o/_/h(CCVAC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o/h', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/w/t/h
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'w', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
t/h/o/_/w/t/h(CCVACCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o/w', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: y
					> version: t/h/_/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((y))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((y))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', 'h']
				t/_/o/h(CAVC)
t/_/o/_/h(CAVAC)
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o/h', 'rgx': '((t))/((_))/((o))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h']
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_', 'rgx': '((t))/((_))/((o))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: i
					> version: þ/_/e/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((i))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((i))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n']
				þ/_/e/n(CAVC)
þ/_/e/_/n(CAVAC)
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n']
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c']
				þ/_/e/n/c(CAVCC)
þ/_/e/_/n/c(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: n
					> version: þ/_/e/n/ck/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
þ/_/e/_/n/c/k/e(CAVACCCV)
þ/_/e/_/n/ck/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: n
					> version: þ/_/e/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng']
				þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g']
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng']
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: n
					> version: þ/_/e/ng/e
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng', 'e']
				þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: n
					> version: þ/_/e/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch']
				þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
þ/_/e/_/n/c/h(CAVACCC)
þ/_/e/_/n/ch(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: n
					> version: þ/_/e/n/ch/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
þ/_/e/_/n/c/h/e(CAVACCCV)
þ/_/e/_/n/ch/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k']
				þ/_/e/n/k(CAVCC)
þ/_/e/_/n/k(CAVACC)
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				þ/_/e/n/k/e(CAVCCV)
þ/_/e/_/n/k/e(CAVACCV)
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: n
					> version: _/y/e/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/_/n/k/e(AAVACCV)
_/y/e/_/n/k/e(AAVACCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_', 'rgx': '((_))/((y))/((e))/((_))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o', 'rgx': '((þ))/((_))/((e))/((o))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					> version: þ/i/_/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					> version: _/y/_/i/n/g/e
					TRYING: i
					> version: _/y/_/i/ng/e
					TRYING: i
					> version: _/y/_/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((i))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					> version: þ/i/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					> version: þ/i/_/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: ð
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ð']
				þ/_/o/ð(CAVC)
þ/_/o/_/ð(CAVAC)
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o/ð', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ð']
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: g
					> version: þ/_/o/gh
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'gh']
				þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
þ/_/o/_/g/h(CAVACC)
þ/_/o/_/gh(CAVAC)
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'g', 'h']
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o/gh', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'gh']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h']
				þ/_/o/h(CAVC)
þ/_/o/_/h(CAVAC)
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h']
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: h
					> version: _/y/o/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h', 'h']
				þ/_/o/h/h(CAVCC)
þ/_/o/_/h/h(CAVACC)
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: c
					> version: þ/_/o/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ch']
				þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o/c', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'c', 'h']
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o/ch', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/o/u
					TRYING: u
					> version: þ/_/ou
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/o/u/c
					TRYING: u
					> version: þ/_/ou/c
					TRYING: c
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/o/u/h
					TRYING: u
					> version: þ/_/ou/h
					TRYING: h
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/o/u/h
					TRYING: u
					> version: _/y/ou/h
					TRYING: h
					> version: _/y/ou/h
					TRYING: h
					RESULT:  ['u']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/o/u/h/t
					TRYING: u
					> version: þ/_/ou/h/t
					TRYING: h
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/o/u/s
					TRYING: u
					> version: þ/_/ou/s
					TRYING: s
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/t/h
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/o/u/th
					TRYING: u
					> version: þ/_/ou/t/h
					TRYING: t
					> version: þ/_/ou/th
					TRYING: th
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 't', 'h']
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/o/u/ȝ
					TRYING: u
					> version: þ/_/ou/ȝ
					TRYING: ȝ
					RESULT:  ['u']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/t/h
					TRYING: w
					> version: þ/_/o/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 'th']
				þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 'th']
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ȝ']
				þ/_/o/ȝ(CAVC)
þ/_/o/_/ȝ(CAVAC)
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o/ȝ', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ']
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: u
					> version: þ/_/_/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					> version: þ/_/_/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((u))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					> version: þ/y/_/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVVCC : 4___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/_/n
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/_/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/_/n/c/h
					TRYING: n
					> version: ð/_/e/_/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))$'}
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_/n', 'rgx': '((ð))/((h))/((e))/((_))/((n))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((g))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					> version: ð/i/_/_/n/g
					TRYING: n
					> version: ð/i/_/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: ð/i/_/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/d
					TRYING: d
					adding blocked set: C = C >> g, ng, n, d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'd']
				ð/_/o/_/d(CAVAC)
ð/_/o/_/_/d(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((g))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'h']
				ð/_/o/_/h(CAVAC)
ð/_/o/_/_/h(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'h']
				version split: ['ð', '_', 'o', '_', '_', 'h']
				{'string': 'ð/_/o/_/_', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/_/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> n, g, _, ƿ, ng
					> version: ð/_/oƿ/_/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', '_', 'ƿ', 'g']
				{'string': 'ð/_/o/_/ƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', '_', 'g']
				{'string': 'ð/_/oƿ/_/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', 's']
				_/_/e/_/s(AAVAC)
_/_/e/_/_/s(AAVAAC)
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', 's']
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/n', 'rgx': '((t))/((h))/((e))/((_))/((n))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: n
					> version: t/h/_/i/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n', 'rgx': '((t))/((h))/((_))/((i))/((n))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n', 'rgx': '((t))/((h))/((_))/((i))/((n))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/n', 'rgx': '((t))/((h))/((_))/((_))/((n))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_']
				t/h/o/_(CCVA)
t/h/o/_/_(CCVAA)
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_']
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/_/g/h
					TRYING: g
					> version: t/h/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_/g', 'rgx': '((t))/((h))/((o))/((_))/((g))$'}
				version split: ['t', 'h', 'o', '_', 'gh']
				{'string': 't/h/o/_/gh', 'rgx': '((t))/((h))/((o))/((_))/((g))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'gh']
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'h']
				t/h/o/_/h(CCVAC)
t/h/o/_/_/h(CCVAAC)
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_/h', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'h']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				t/h/o/_/w/t/h(CCVACCC)
t/h/o/_/_/w/t/h(CCVAACCC)
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/w', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: n
					> version: t/h/_/y/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n', 'rgx': '((t))/((h))/((_))/((y))/((n))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n', 'rgx': '((t))/((h))/((_))/((y))/((n))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', '_', 'h']
				t/_/o/_/h(CAVAC)
t/_/o/_/_/h(CAVAAC)
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_/h', 'rgx': '((t))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['t', '_', 'o', '_', 'h']
				version split: ['t', '_', 'o', '_', '_', 'h']
				{'string': 't/_/o/_/_', 'rgx': '((t))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: n
					> version: þ/_/e/i/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n', 'rgx': '((þ))/((_))/((e))/((i))/((n))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n', 'rgx': '((þ))/((_))/((e))/((i))/((n))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/_/n
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/_/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/_/n/c/k/e
					TRYING: n
					> version: þ/_/e/_/n/ck/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/_/n/g
					TRYING: n
					> version: þ/_/e/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))$'}
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/_/n/g/e
					TRYING: n
					> version: þ/_/e/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))$'}
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/_/n/c/h
					TRYING: n
					> version: þ/_/e/_/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/_/n/c/h/e
					TRYING: n
					> version: þ/_/e/_/n/ch/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/n/k/e
					TRYING: n
					> version: _/y/e/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n', 'rgx': '((_))/((y))/((e))/((_))/((n))$'}
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n', 'rgx': '((_))/((y))/((e))/((_))/((n))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', '_', 'h']
				þ/_/e/o/h(CAVVC)
þ/_/e/o/_/h(CAVVAC)
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o/h', 'rgx': '((þ))/((_))/((e))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', 'h']
				version split: ['þ', '_', 'e', 'o', '_', 'h']
				{'string': 'þ/_/e/o/_', 'rgx': '((þ))/((_))/((e))/((o))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					> version: þ/i/_/_/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: n
					> version: _/y/_/i/n/g/e
					TRYING: n
					> version: _/y/_/i/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: _/y/_/i/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: n
					> version: þ/i/_/_/n/c/h
					TRYING: n
					> version: þ/i/_/_/n/ch
					TRYING: n
					> version: þ/i/_/_/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					> version: þ/i/_/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					> version: þ/i/_/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((n))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/ð
					TRYING: ð
					adding blocked set: C = C >> n, ð, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ð']
				þ/_/o/_/ð(CAVAC)
þ/_/o/_/_/ð(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ð']
				version split: ['þ', '_', 'o', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/_/g/h
					TRYING: g
					> version: þ/_/o/_/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_/g', 'rgx': '((þ))/((_))/((o))/((_))/((g))$'}
				version split: ['þ', '_', 'o', '_', 'gh']
				{'string': 'þ/_/o/_/gh', 'rgx': '((þ))/((_))/((o))/((_))/((g))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'h']
				þ/_/o/_/h(CAVAC)
þ/_/o/_/_/h(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: _/y/o/_/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', '_', 'h']
				_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
_/y/o/_/_/h(AAVAAC)
_/y/o/_/_/h(AAVAAC)
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_', 'rgx': '((_))/((y))/((o))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/_/h/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'h', 'h']
				þ/_/o/_/h/h(CAVACC)
þ/_/o/_/_/h/h(CAVAACC)
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					> version: þ/_/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> n, g, _, ng, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ch']
				þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
þ/_/o/_/_/c/h(CAVAACC)
þ/_/o/_/_/ch(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_/c', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ch']
				version split: ['þ', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'ch']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/_/o/u
					> version: þ/_/o/u
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_']
				þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/o/u/_(CAVAA)
þ/_/o/u/_(CAVAA)
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					> version: þ/_/o/u/c
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'c']
				þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/_/c(CAVAAC)
þ/_/o/u/_/c(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: þ/_/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h']
				þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/_/h(CAVAAC)
þ/_/o/u/_/h(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: youh
					resolving (2)
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: _/y/o/u/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', '_', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/o/u/_/h(AAVAAC)
_/y/o/u/_/h(AAVAAC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouht
					resolving (2)
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: þ/_/o/u/h/t
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'h', 't']
				þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/_/h/t(CAVAACC)
þ/_/o/u/_/h/t(CAVAACC)
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þous
					resolving (2)
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					> version: þ/_/o/u/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 's']
				þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/_/s(CAVAAC)
þ/_/o/u/_/s(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouth
					resolving (4)
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: þ/_/o/u/t/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					> version: þ/_/o/u/th
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'th']
				þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/th(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					> version: þ/_/o/u/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', 'ȝ']
				þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/_/ȝ(CAVAAC)
þ/_/o/u/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					> version: þ/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 'th']
				þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
þ/_/o/_/_/w/t/h(CAVAACCC)
þ/_/o/_/_/w/th(CAVAACC)
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 'th']
				version split: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ȝ']
				þ/_/o/_/ȝ(CAVAC)
þ/_/o/_/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: n
					> version: þ/_/_/u/n
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: n
					> version: þ/_/_/u/n/c/h
					TRYING: n
					> version: þ/_/_/u/n/ch
					TRYING: n
					> version: þ/_/_/u/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					> version: þ/y/_/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((n))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((n))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, g, _, ng, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVVCC : 5___
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/_/n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', '_', 'n', '_']
				ð/_/e/_/n(CAVAC)
ð/_/e/_/n/_(CAVACA)
				version split: ['ð', '_', 'e', '_', 'n']
				{'string': 'ð/_/e/_/n', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((_))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n']
				version split: ['ð', '_', 'e', '_', 'n', '_']
				{'string': 'ð/_/e/_/n/_', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/_/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['ð', '_', 'e', '_', 'n', 'c']
				{'string': 'ð/_/e/_/n/c', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((c))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/_/n/c/h
					TRYING: c
					> version: ð/_/e/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['ð', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'ð/_/e/_/n/c/h', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', '_', 'n', 'ch']
				{'string': 'ð/_/e/_/n/ch', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['ð', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'ð/_/e/_/n/k/e', 'rgx': '((ð))/((_))/((e))/((_))/((n))/((k))$'}
				_____REMOVING________['ð', '_', 'e', '_', 'n', 'k', 'e']
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['ð', 'h', 'e', '_', 'n', 'k']
				{'string': 'ð/h/e/_/n/k', 'rgx': '((ð))/((h))/((e))/((_))/((n))/((k))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/_/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', '_', 'g', '_']
				ð/h/o/_/g(CCVAC)
ð/h/o/_/g/_(CCVACA)
				version split: ['ð', 'h', 'o', '_', 'g']
				{'string': 'ð/h/o/_/g', 'rgx': '((ð))/((h))/((o))/((_))/((g))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', '_', 'g']
				version split: ['ð', 'h', 'o', '_', 'g', '_']
				{'string': 'ð/h/o/_/g/_', 'rgx': '((ð))/((h))/((o))/((_))/((g))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: ð/i/_/_/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: ð/i/_/_/ng
					> version: ð/i/_/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng', '_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng', '_']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/n/_/g(CAAACAC)
ð/i/_/_/n/_/g(CAAACAC)
ð/i/_/_/ng/_(CAAACA)
ð/i/_/_/ng/_(CAAACA)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/_/n/_/g', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', '_', 'g']
				version split: ['ð', 'i', '_', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/_/n/_/g', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', '_', 'g']
				version split: ['ð', 'i', '_', '_', 'ng', '_']
				{'string': 'ð/i/_/_/ng/_', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng', '_']
				{'string': 'ð/i/_/_/ng/_', 'rgx': '((ð))/((i))/((_))/((_))/((ng)|(n))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/_/d
					TRYING: d
					adding blocked set: C = C >> h, _, c, d, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', '_', 'd']
				ð/_/o/_/_/d(CAVAAC)
ð/_/o/_/_/_/d(CAVAAAC)
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/_/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'g', '_']
				ð/_/o/_/g(CAVAC)
ð/_/o/_/g/_(CAVACA)
				version split: ['ð', '_', 'o', '_', 'g']
				{'string': 'ð/_/o/_/g', 'rgx': '((ð))/((_))/((o))/((_))/((g))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'g']
				version split: ['ð', '_', 'o', '_', 'g', '_']
				{'string': 'ð/_/o/_/g/_', 'rgx': '((ð))/((_))/((o))/((_))/((g))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/_/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', '_', 'o', '_', '_', 'h']
				{'string': 'ð/_/o/_/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((h))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/_/oƿ/_/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'oƿ', '_', 'g', '_']
				ð/_/oƿ/_/g(CAVAC)
ð/_/oƿ/_/g/_(CAVACA)
				version split: ['ð', '_', 'oƿ', '_', 'g']
				{'string': 'ð/_/oƿ/_/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', '_', 'g']
				version split: ['ð', '_', 'oƿ', '_', 'g', '_']
				{'string': 'ð/_/oƿ/_/g/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((_))/((g))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', '_', 's']
				_/_/e/_/_/s(AAVAAC)
_/_/e/_/_/_/s(AAVAAAC)
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', '_', 's']
				version split: ['_', '_', 'e', '_', '_', '_', 's']
				{'string': '_/_/e/_/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 's']
				_/_/_/_/_/s(AAAAAC)
_/_/_/_/_/_/s(AAAAAAC)
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 's']
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['t', 'h', 'e', '_', 'n', 'k', 'e']
				{'string': 't/h/e/_/n/k/e', 'rgx': '((t))/((h))/((e))/((_))/((n))/((k))$'}
				_____REMOVING________['t', 'h', 'e', '_', 'n', 'k', 'e']
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: k
					> version: t/h/_/i/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n/k', 'rgx': '((t))/((h))/((_))/((i))/((n))/((k))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i/n/k', 'rgx': '((t))/((h))/((_))/((i))/((n))/((k))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/n/k', 'rgx': '((t))/((h))/((_))/((_))/((n))/((k))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_']
				t/h/o/_/_(CCVAA)
t/h/o/_/_/_(CCVAAA)
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_']
				version split: ['t', 'h', 'o', '_', '_', '_']
				{'string': 't/h/o/_/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (1)
					> version: t/h/o/_/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', '_', 'g', 'h']
				{'string': 't/h/o/_/g/h', 'rgx': '((t))/((h))/((o))/((_))/((g))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/_/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', '_', '_', 'h']
				{'string': 't/h/o/_/_/h', 'rgx': '((t))/((h))/((o))/((_))/((_))/((h))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, _, w, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				t/h/o/_/_/w/t/h(CCVAACCC)
t/h/o/_/_/_/w/t/h(CCVAAACCC)
				version split: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_/w/t', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_/_/w', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: k
					> version: t/h/_/y/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n/k', 'rgx': '((t))/((h))/((_))/((y))/((n))/((k))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y/n/k', 'rgx': '((t))/((h))/((_))/((y))/((n))/((k))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/_/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', '_', 'o', '_', '_', 'h']
				{'string': 't/_/o/_/_/h', 'rgx': '((t))/((_))/((o))/((_))/((_))/((h))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', '_']
				þ/_/_/_/_(CAAAA)
þ/_/_/_/_/_(CAAAAA)
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: k
					> version: þ/_/e/i/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n/k', 'rgx': '((þ))/((_))/((e))/((i))/((n))/((k))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i/n/k', 'rgx': '((þ))/((_))/((e))/((i))/((n))/((k))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/_/n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', '_']
				þ/_/e/_/n(CAVAC)
þ/_/e/_/n/_(CAVACA)
				version split: ['þ', '_', 'e', '_', 'n']
				{'string': 'þ/_/e/_/n', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n']
				version split: ['þ', '_', 'e', '_', 'n', '_']
				{'string': 'þ/_/e/_/n/_', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/_/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', '_', 'e', '_', 'n', 'c']
				{'string': 'þ/_/e/_/n/c', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/_/n/c/k/e
					TRYING: c
					> version: þ/_/e/_/n/ck/e
					TRYING: ck
					adding blocked set: C = C >> ck, h, _, c, k, ch
					RESULT:  ['c']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/_/n/c/k', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ck', 'e']
				{'string': 'þ/_/e/_/n/ck/e', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/_/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/_/e/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', '_', 'g']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng', '_']
				þ/_/e/_/n/g(CAVACC)
þ/_/e/_/ng(CAVAC)
þ/_/e/_/n/_/g(CAVACAC)
þ/_/e/_/ng/_(CAVACA)
				version split: ['þ', '_', 'e', '_', 'n', 'g']
				{'string': 'þ/_/e/_/n/g', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g']
				version split: ['þ', '_', 'e', '_', 'ng']
				{'string': 'þ/_/e/_/ng', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng']
				version split: ['þ', '_', 'e', '_', 'n', '_', 'g']
				{'string': 'þ/_/e/_/n/_/g', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', '_', 'g']
				version split: ['þ', '_', 'e', '_', 'ng', '_']
				{'string': 'þ/_/e/_/ng/_', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/_/n/g/e
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/_/e/_/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'n', '_', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', '_', 'ng', '_', 'e']
				þ/_/e/_/n/g/e(CAVACCV)
þ/_/e/_/ng/e(CAVACV)
þ/_/e/_/n/_/g/e(CAVACACV)
þ/_/e/_/ng/_/e(CAVACAV)
				version split: ['þ', '_', 'e', '_', 'n', 'g', 'e']
				{'string': 'þ/_/e/_/n/g/e', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', '_', 'ng', 'e']
				{'string': 'þ/_/e/_/ng/e', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng', 'e']
				version split: ['þ', '_', 'e', '_', 'n', '_', 'g', 'e']
				{'string': 'þ/_/e/_/n/_/g', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', '_', 'g', 'e']
				version split: ['þ', '_', 'e', '_', 'ng', '_', 'e']
				{'string': 'þ/_/e/_/ng/_/e', 'rgx': '((þ))/((_))/((e))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'ng', '_', 'e']
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/_/n/c/h
					TRYING: c
					> version: þ/_/e/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h']
				{'string': 'þ/_/e/_/n/c/h', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', '_', 'n', 'ch']
				{'string': 'þ/_/e/_/n/ch', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/_/n/c/h/e
					TRYING: c
					> version: þ/_/e/_/n/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/_/n/c/h', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', '_', 'n', 'ch', 'e']
				{'string': 'þ/_/e/_/n/ch/e', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', '_', 'e', '_', 'n', 'k']
				{'string': 'þ/_/e/_/n/k', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((k))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', '_', 'e', '_', 'n', 'k', 'e']
				{'string': 'þ/_/e/_/n/k/e', 'rgx': '((þ))/((_))/((e))/((_))/((n))/((k))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/_/n/k/e
					TRYING: k
					> version: _/y/e/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k/e', 'rgx': '((_))/((y))/((e))/((_))/((n))/((k))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', '_', 'n', 'k', 'e']
				{'string': '_/y/e/_/n/k/e', 'rgx': '((_))/((y))/((e))/((_))/((n))/((k))$'}
				_____REMOVING________['_', 'y', 'e', '_', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'e', 'o', '_', 'h']
				{'string': 'þ/_/e/o/_/h', 'rgx': '((þ))/((_))/((e))/((o))/((_))/((h))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: c
					> version: þ/i/_/_/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: _/y/_/i/n/g/e
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: _/y/_/i/ng/e
					TRYING: e
					> version: _/y/_/i/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', '_', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', '_', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/n/_/g/e(AAAACACV)
_/y/_/i/n/_/g/e(AAAACACV)
_/y/_/i/ng/_/e(AAAACAV)
_/y/_/i/ng/_/e(AAAACAV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n/g/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i/n/g/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i/ng/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				{'string': '_/y/_/i/n/_/g', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				{'string': '_/y/_/i/n/_/g', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', '_', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', '_', 'e']
				{'string': '_/y/_/i/ng/_/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', '_', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', '_', 'e']
				{'string': '_/y/_/i/ng/_/e', 'rgx': '((_))/((y))/((_))/((i))/((ng)|(n))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', '_', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: c
					> version: þ/i/_/_/n/c/h
					TRYING: c
					> version: þ/i/_/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: þ/i/_/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c/h', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c/h', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((c)|(ch))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: k
					> version: þ/i/_/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((k))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((k))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: k
					> version: þ/i/_/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k/e', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((k))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k/e', 'rgx': '((þ))/((i))/((_))/((_))/((n))/((k))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['þ', '_', 'o', '_', '_', 'ð']
				{'string': 'þ/_/o/_/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((ð))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/_/o/_/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', 'g', 'h']
				{'string': 'þ/_/o/_/g/h', 'rgx': '((þ))/((_))/((o))/((_))/((g))/((h))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/_/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', '_', 'h']
				{'string': 'þ/_/o/_/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((h))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/_/h
					TRYING: h
					> version: _/y/o/_/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))/((h))$'}
				version split: ['_', 'y', 'o', '_', '_', 'h']
				{'string': '_/y/o/_/_/h', 'rgx': '((_))/((y))/((o))/((_))/((_))/((h))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/_/_/h/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', '_', 'h', 'h']
				{'string': 'þ/_/o/_/_/h/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/_/c/h
					TRYING: c
					> version: þ/_/o/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'o', '_', '_', 'c', 'h']
				{'string': 'þ/_/o/_/_/c/h', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'ch']
				{'string': 'þ/_/o/_/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((c)|(ch))$'}
				ANALYSING: þou
					resolving (2)
					> version: þ/_/o/u/_
					> version: þ/_/o/u/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_']
				þ/_/o/u/_(CAVAA)
þ/_/o/u/_(CAVAA)
þ/_/o/u/_/_(CAVAAA)
þ/_/o/u/_/_(CAVAAA)
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_']
				version split: ['þ', '_', 'o', 'u', '_']
				{'string': 'þ/_/o/u/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_']
				version split: ['þ', '_', 'o', 'u', '_', '_']
				{'string': 'þ/_/o/u/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				version split: ['þ', '_', 'o', 'u', '_', '_']
				{'string': 'þ/_/o/u/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (2)
					> version: þ/_/o/u/_/c
					TRYING: c
					> version: þ/_/o/u/_/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((c))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'c']
				{'string': 'þ/_/o/u/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((c))$'}
				ANALYSING: þouh
					resolving (2)
					> version: þ/_/o/u/_/h
					TRYING: h
					> version: þ/_/o/u/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((h))$'}
				version split: ['þ', '_', 'o', 'u', '_', 'h']
				{'string': 'þ/_/o/u/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((h))$'}
				ANALYSING: youh
					resolving (2)
					> version: _/y/o/u/_/h
					TRYING: h
					> version: _/y/o/u/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))/((h))$'}
				version split: ['_', 'y', 'o', 'u', '_', 'h']
				{'string': '_/y/o/u/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((u))/((_))/((h))$'}
				ANALYSING: þouht
					resolving (2)
					> version: þ/_/o/u/_/h/t
					TRYING: h
					> version: þ/_/o/u/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				version split: ['þ', '_', 'o', 'u', '_', 'h', 't']
				{'string': 'þ/_/o/u/_/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'h', 't']
				ANALYSING: þous
					resolving (2)
					> version: þ/_/o/u/_/s
					TRYING: s
					adding blocked set: C = C >> h, ð, _, c, s, k, ch
					> version: þ/_/o/u/_/s
					TRYING: s
					adding blocked set: C = C >> h, ð, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 's']
				þ/_/o/u/_/s(CAVAAC)
þ/_/o/u/_/s(CAVAAC)
þ/_/o/u/_/_/s(CAVAAAC)
þ/_/o/u/_/_/s(CAVAAAC)
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 's']
				version split: ['þ', '_', 'o', 'u', '_', 's']
				{'string': 'þ/_/o/u/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 's']
				version split: ['þ', '_', 'o', 'u', '_', '_', 's']
				{'string': 'þ/_/o/u/_/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 's']
				version split: ['þ', '_', 'o', 'u', '_', '_', 's']
				{'string': 'þ/_/o/u/_/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 's']
				ANALYSING: þouth
					resolving (4)
					> version: þ/_/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, ð, _, c, k, t, ch
					> version: þ/_/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, ð, _, c, k, t, ch
					> version: þ/_/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> h, ð, _, th, c, k, ch
					> version: þ/_/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> h, ð, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'th']
				þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/t/h(CAVAACC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/th(CAVAAC)
þ/_/o/u/_/_/t/h(CAVAAACC)
þ/_/o/u/_/_/t/h(CAVAAACC)
þ/_/o/u/_/_/th(CAVAAAC)
þ/_/o/u/_/_/th(CAVAAAC)
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', 'th']
				{'string': 'þ/_/o/u/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'þ/_/o/u/_/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 't', 'h']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'th']
				{'string': 'þ/_/o/u/_/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'th']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'th']
				{'string': 'þ/_/o/u/_/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'th']
				ANALYSING: þouȝ
					resolving (2)
					> version: þ/_/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					> version: þ/_/o/u/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				þ/_/o/u/_/ȝ(CAVAAC)
þ/_/o/u/_/ȝ(CAVAAC)
þ/_/o/u/_/_/ȝ(CAVAAAC)
þ/_/o/u/_/_/ȝ(CAVAAAC)
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				version split: ['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				{'string': 'þ/_/o/u/_/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((u))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', '_', '_', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					> version: þ/_/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				þ/_/o/_/_/w/t/h(CAVAACCC)
þ/_/o/_/_/w/th(CAVAACC)
þ/_/o/_/_/_/w/t/h(CAVAAACCC)
þ/_/o/_/_/_/w/th(CAVAAACC)
				version split: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_/w/t', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_/w/th', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 'th']
				version split: ['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/_/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'ȝ']
				þ/_/o/_/_/ȝ(CAVAAC)
þ/_/o/_/_/_/ȝ(CAVAAAC)
				version split: ['þ', '_', 'o', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					> version: þ/_/_/u/n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', '_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', '_']
				þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n/_(CAAACA)
þ/_/_/u/n/_(CAAACA)
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n', '_']
				{'string': 'þ/_/_/u/n/_', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', '_']
				{'string': 'þ/_/_/u/n/_', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: c
					> version: þ/_/_/u/n/c/h
					TRYING: c
					> version: þ/_/_/u/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: þ/_/_/u/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n/c/h', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u/n/c/h', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((c)|(ch))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((c)|(ch))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u/n/ch', 'rgx': '((þ))/((_))/((_))/((u))/((n))/((c)|(ch))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: k
					> version: þ/y/_/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((n))/((k))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((n))/((k))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, ð, _, c, z, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
_/_/_/_/_/_/z/e/n/k/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		only one version left: ['ð', '_', 'e', '_', 'n', '_']
		only one version left: ['ð', '_', 'e', '_', 'n', 'c']
		only one version left: ['ð', '_', 'e', '_', 'n', 'ch']
		FAIL: 
		only one version left: ['ð', 'h', 'e', '_', 'n', 'k']
		only one version left: ['ð', 'h', 'o', '_', 'g', '_']
		only one version left: ['ð', 'i', '_', '_', 'ng', '_']
		FAIL: 
		only one version left: ['ð', '_', 'o', '_', 'g', '_']
		only one version left: ['ð', '_', 'o', '_', '_', 'h']
		only one version left: ['ð', '_', 'oƿ', '_', 'g', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'h', '_', 'i', 'n', 'k']
		only one version left: ['t', 'h', '_', '_', 'n', 'k']
		only one version left: ['t', 'h', 'o', '_', '_', '_']
		only one version left: ['t', 'h', 'o', '_', 'g', 'h']
		only one version left: ['t', 'h', 'o', '_', '_', 'h']
		FAIL: 
		only one version left: ['t', 'h', '_', 'y', 'n', 'k']
		only one version left: ['t', '_', 'o', '_', '_', 'h']
		only one version left: ['þ', '_', '_', '_', '_', '_']
		only one version left: ['þ', '_', 'e', 'i', 'n', 'k']
		only one version left: ['þ', '_', 'e', '_', 'n', '_']
		only one version left: ['þ', '_', 'e', '_', 'n', 'c']
		FAIL: 
		only one version left: ['þ', '_', 'e', '_', 'ng', '_']
		FAIL: 
		only one version left: ['þ', '_', 'e', '_', 'n', 'ch']
		FAIL: 
		only one version left: ['þ', '_', 'e', '_', 'n', 'k']
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', 'e', 'o', '_', 'h']
		only one version left: ['þ', 'i', '_', '_', 'n', 'c']
		FAIL: 
		only one version left: ['þ', 'i', '_', '_', 'n', 'ch']
		only one version left: ['þ', 'i', '_', '_', 'n', 'k']
		FAIL: 
		only one version left: ['þ', '_', 'o', '_', '_', 'ð']
		only one version left: ['þ', '_', 'o', '_', 'g', 'h']
		only one version left: ['þ', '_', 'o', '_', '_', 'h']
		only one version left: ['_', 'y', 'o', '_', '_', 'h']
		FAIL: 
		only one version left: ['þ', '_', 'o', '_', '_', 'ch']
		only one version left: ['þ', '_', 'o', 'u', '_', '_']
		only one version left: ['þ', '_', 'o', 'u', '_', 'c']
		only one version left: ['þ', '_', 'o', 'u', '_', 'h']
		only one version left: ['_', 'y', 'o', 'u', '_', 'h']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', 'u', 'n', '_']
		only one version left: ['þ', '_', '_', 'u', 'n', 'ch']
		only one version left: ['þ', 'y', '_', '_', 'n', 'k']
		FAIL: 
		SPLIT: ['t', 'h', 'o', 'u', 'g', 'h']
		SPLIT: ['ð', '_', 'e', '_', 'n', '_']
		['ð', '_', 'e', '_', 'n', '_']
		SPLIT: ['ð', '_', 'e', '_', 'n', 'c']
		['ð', '_', 'e', '_', 'n', 'c']
		SPLIT: ['ð', '_', 'e', '_', 'n', 'ch']
		['ð', '_', 'e', '_', 'n', 'ch']
		SPLIT: ["['ð']", "['_']", "['e']", "['_']", "['n']", "['k']"]
		SPLIT: ['ð', 'h', 'e', '_', 'n', 'k']
		['ð', 'h', 'e', '_', 'n', 'k']
		SPLIT: ['ð', 'h', 'o', '_', 'g', '_']
		['ð', 'h', 'o', '_', 'g', '_']
		SPLIT: ['ð', 'i', '_', '_', 'ng', '_']
		['ð', 'i', '_', '_', 'ng', '_']
		['ð', 'i', '_', '_', 'ng', '_']
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['ð', '_', 'o', '_', 'g', '_']
		['ð', '_', 'o', '_', 'g', '_']
		SPLIT: ['ð', '_', 'o', '_', '_', 'h']
		['ð', '_', 'o', '_', '_', 'h']
		SPLIT: ['ð', '_', 'oƿ', '_', 'g', '_']
		['ð', '_', 'oƿ', '_', 'g', '_']
		SPLIT: ["['_']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['e']", "['_']", "['n']", "['k']"]
		SPLIT: ['t', 'h', '_', 'i', 'n', 'k']
		['t', 'h', '_', 'i', 'n', 'k']
		['t', 'h', '_', 'i', 'n', 'k']
		SPLIT: ['t', 'h', '_', '_', 'n', 'k']
		['t', 'h', '_', '_', 'n', 'k']
		SPLIT: ['t', 'h', 'o', '_', '_', '_']
		['t', 'h', 'o', '_', '_', '_']
		SPLIT: ['t', 'h', 'o', '_', 'g', 'h']
		['t', 'h', 'o', '_', 'g', 'h']
		SPLIT: ['t', 'h', 'o', '_', '_', 'h']
		['t', 'h', 'o', '_', '_', 'h']
		SPLIT: ["['t']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['t', 'h', '_', 'y', 'n', 'k']
		['t', 'h', '_', 'y', 'n', 'k']
		['t', 'h', '_', 'y', 'n', 'k']
		SPLIT: ['t', '_', 'o', '_', '_', 'h']
		['t', '_', 'o', '_', '_', 'h']
		SPLIT: ['þ', '_', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_', '_']
		SPLIT: ['þ', '_', 'e', 'i', 'n', 'k']
		['þ', '_', 'e', 'i', 'n', 'k']
		['þ', '_', 'e', 'i', 'n', 'k']
		SPLIT: ['þ', '_', 'e', '_', 'n', '_']
		['þ', '_', 'e', '_', 'n', '_']
		SPLIT: ['þ', '_', 'e', '_', 'n', 'c']
		['þ', '_', 'e', '_', 'n', 'c']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['n']", "['c']"]
		SPLIT: ['þ', '_', 'e', '_', 'ng', '_']
		['þ', '_', 'e', '_', 'ng', '_']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['ng', 'n']", "['_']"]
		SPLIT: ['þ', '_', 'e', '_', 'n', 'ch']
		['þ', '_', 'e', '_', 'n', 'ch']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['n']", "['c', 'ch']"]
		SPLIT: ['þ', '_', 'e', '_', 'n', 'k']
		['þ', '_', 'e', '_', 'n', 'k']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['n']", "['k']"]
		SPLIT: ["['_']", "['y']", "['e']", "['_']", "['n']", "['k']"]
		SPLIT: ['þ', '_', 'e', 'o', '_', 'h']
		['þ', '_', 'e', 'o', '_', 'h']
		SPLIT: ['þ', 'i', '_', '_', 'n', 'c']
		['þ', 'i', '_', '_', 'n', 'c']
		['þ', 'i', '_', '_', 'n', 'c']
		SPLIT: ["['_']", "['y']", "['_']", "['i']", "['ng', 'n']", "['_']"]
		SPLIT: ['þ', 'i', '_', '_', 'n', 'ch']
		['þ', 'i', '_', '_', 'n', 'ch']
		['þ', 'i', '_', '_', 'n', 'ch']
		SPLIT: ['þ', 'i', '_', '_', 'n', 'k']
		['þ', 'i', '_', '_', 'n', 'k']
		['þ', 'i', '_', '_', 'n', 'k']
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['n']", "['k']"]
		SPLIT: ['þ', '_', 'o', '_', '_', 'ð']
		['þ', '_', 'o', '_', '_', 'ð']
		SPLIT: ['þ', '_', 'o', '_', 'g', 'h']
		['þ', '_', 'o', '_', 'g', 'h']
		SPLIT: ['þ', '_', 'o', '_', '_', 'h']
		['þ', '_', 'o', '_', '_', 'h']
		SPLIT: ['_', 'y', 'o', '_', '_', 'h']
		['_', 'y', 'o', '_', '_', 'h']
		['_', 'y', 'o', '_', '_', 'h']
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['h']"]
		SPLIT: ['þ', '_', 'o', '_', '_', 'ch']
		['þ', '_', 'o', '_', '_', 'ch']
		SPLIT: ['þ', '_', 'o', 'u', '_', '_']
		['þ', '_', 'o', 'u', '_', '_']
		['þ', '_', 'o', 'u', '_', '_']
		SPLIT: ['þ', '_', 'o', 'u', '_', 'c']
		['þ', '_', 'o', 'u', '_', 'c']
		['þ', '_', 'o', 'u', '_', 'c']
		SPLIT: ['þ', '_', 'o', 'u', '_', 'h']
		['þ', '_', 'o', 'u', '_', 'h']
		['þ', '_', 'o', 'u', '_', 'h']
		SPLIT: ['_', 'y', 'o', 'u', '_', 'h']
		['_', 'y', 'o', 'u', '_', 'h']
		['_', 'y', 'o', 'u', '_', 'h']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['h']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['u']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', 'u', 'n', '_']
		['þ', '_', '_', 'u', 'n', '_']
		['þ', '_', '_', 'u', 'n', '_']
		SPLIT: ['þ', '_', '_', 'u', 'n', 'ch']
		['þ', '_', '_', 'u', 'n', 'ch']
		['þ', '_', '_', 'u', 'n', 'ch']
		SPLIT: ['þ', 'y', '_', '_', 'n', 'k']
		['þ', 'y', '_', '_', 'n', 'k']
		['þ', 'y', '_', '_', 'n', 'k']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVVCC is INVALID
		[]
		21
		OVERVIEW: version for pattern CCVVCC

faulty splits: 21
['ð']['']['e']['']['n']['k'] <-! ðenke
['ð']['']['o'][''][''][''] <-! ðod
['']['']['e'][''][''][''] <-! es
[''][''][''][''][''][''] <-! s
['t']['h']['e']['']['n']['k'] <-! thenke
['t']['h']['o'][''][''][''] <-! thowth
['þ']['']['e']['']['n']['c'] <-! þencke
['þ']['']['e']['']['ng', 'n'][''] <-! þenge
['þ']['']['e']['']['n']['c', 'ch'] <-! þenche
['þ']['']['e']['']['n']['k'] <-! þenke
['']['y']['e']['']['n']['k'] <-! yenke
['']['y']['']['i']['ng', 'n'][''] <-! yinge
['þ']['i']['']['']['n']['k'] <-! þinke
['þ']['']['o']['']['']['h'] <-! þohh
['þ']['']['o', 'ou']['u']['']['h'] <-! þouht
['þ']['']['o', 'ou']['u'][''][''] <-! þous
['þ']['']['o', 'ou']['u'][''][''] <-! þouth
['þ']['']['o', 'ou']['u'][''][''] <-! þouȝ
['þ']['']['o'][''][''][''] <-! þowth
['þ']['']['o'][''][''][''] <-! þoȝ
[''][''][''][''][''][''] <-! zenke
t | h | o | u | g | h
ð | _ | e | _ | n | _
ð | _ | e | _ | n | c
ð | _ | e | _ | n | ch
['ð'] | ['_'] | ['e'] | ['_'] | ['n'] | ['k']
ð | h | e | _ | n | k
ð | h | o | _ | g | _
ð | i | _ | _ | ng | _
['ð'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
ð | _ | o | _ | g | _
ð | _ | o | _ | _ | h
ð | _ | oƿ | _ | g | _
['_'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['e'] | ['_'] | ['n'] | ['k']
t | h | _ | i | n | k
t | h | _ | _ | n | k
t | h | o | _ | _ | _
t | h | o | _ | g | h
t | h | o | _ | _ | h
['t'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
t | h | _ | y | n | k
t | _ | o | _ | _ | h
þ | _ | _ | _ | _ | _
þ | _ | e | i | n | k
þ | _ | e | _ | n | _
þ | _ | e | _ | n | c
['þ'] | ['_'] | ['e'] | ['_'] | ['n'] | ['c']
þ | _ | e | _ | ng | _
['þ'] | ['_'] | ['e'] | ['_'] | ['ng', 'n'] | ['_']
þ | _ | e | _ | n | ch
['þ'] | ['_'] | ['e'] | ['_'] | ['n'] | ['c', 'ch']
þ | _ | e | _ | n | k
['þ'] | ['_'] | ['e'] | ['_'] | ['n'] | ['k']
['_'] | ['y'] | ['e'] | ['_'] | ['n'] | ['k']
þ | _ | e | o | _ | h
þ | i | _ | _ | n | c
['_'] | ['y'] | ['_'] | ['i'] | ['ng', 'n'] | ['_']
þ | i | _ | _ | n | ch
þ | i | _ | _ | n | k
['þ'] | ['i'] | ['_'] | ['_'] | ['n'] | ['k']
þ | _ | o | _ | _ | ð
þ | _ | o | _ | g | h
þ | _ | o | _ | _ | h
_ | y | o | _ | _ | h
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['h']
þ | _ | o | _ | _ | ch
þ | _ | o | u | _ | _
þ | _ | o | u | _ | c
þ | _ | o | u | _ | h
_ | y | o | u | _ | h
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['h']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['u'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
þ | _ | _ | u | n | _
þ | _ | _ | u | n | ch
þ | y | _ | _ | n | k
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', '_', 's', 'h'},{'i', 'y', 'h', 'u', '_'}
2 : {'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'oƿ', 'o'}
4 : {'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', 'th', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', '_', 'ng', 'c'},{'g', 'ng', 'n', 'd'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', '_', 'ng', 'z'},{'n', 'g', '_', 'ng', 'c'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'w', '_', 'ng'},{'n', 'ð', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', '_', 'ng', 'ch'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'c'}
5 : {'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'z', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 's', 'k', 'ch'},{'h', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', '_', 'th', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 's', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 'd', 'k', 'ch'},{'h', 'ð', '_', 'th', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'k', 't', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'k', 't', 'ch'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CCVCC
	Selection for pattern: CCVCC completed
	Making a version for pattern: CCVCC
			___CCVCC : 0___
				ANALYSING: ðhenk
				adding littera based on matching pattern
				ANALYSING: think
				adding littera based on matching pattern
				ANALYSING: thogh
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: thynk
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> ð, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: thenke
					resolving (2)
					> version: t/h/e/n/k/e
					TRYING: t
					> version: th/e/n/k/e
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'e', 'n', 'k', 'e']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'e', 'n', 'k', 'e']
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o']
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'h']
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['t']
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCC : 1___
				ANALYSING: ðhenk
				adding littera based on matching pattern
				ANALYSING: think
				adding littera based on matching pattern
				ANALYSING: thogh
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: thynk
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n']
				ð/e/n(CVC)
ð/_/e/n(CAVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
ð/_/e/n/c(CAVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/_/e/n/k/e(CAVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'd']
				ð/o/d(CVC)
ð/_/o/d(CAVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g']
				ð/o/g(CVC)
ð/_/o/g(CAVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h']
				ð/o/h(CVC)
ð/_/o/h(CAVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 's']
				_/e/s(AVC)
_/_/e/s(AAVC)
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h']
				t/o/h(CVC)
t/_/o/h(CAVC)
				version split: ['t', 'o', 'h']
				{'string': 't/o', 'rgx': '((t))/((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_', 'rgx': '((t))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n']
				þ/e/n(CVC)
þ/_/e/n(CAVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
þ/_/e/n/c(CAVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
þ/_/e/n/k(CAVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/_/e/n/k/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ð']
				þ/o/ð(CVC)
þ/_/o/ð(CAVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h']
				þ/o/h(CVC)
þ/_/o/h(CAVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
þ/_/o/h/h(CAVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					> version: þ/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					> version: þ/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ']
				þ/o/ȝ(CVC)
þ/_/o/ȝ(CAVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, y, h, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVCC : 2___
				ANALYSING: ðhenk
				adding littera based on matching pattern
				ANALYSING: think
				adding littera based on matching pattern
				ANALYSING: thogh
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: thynk
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'e', 'n']
				ð/_/e/n(CAVC)
ð/_/_/e/n(CAAVC)
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n']
				version split: ['ð', '_', '_', 'e', 'n']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'e', 'n', 'c']
				ð/_/e/n/c(CAVCC)
ð/_/_/e/n/c(CAAVCC)
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c']
				version split: ['ð', '_', '_', 'e', 'n', 'c']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: ð/_/e/n/ch
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', '_', 'e', 'n', 'ch']
				ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
ð/_/_/e/n/c/h(CAAVCCC)
ð/_/_/e/n/ch(CAAVCC)
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				version split: ['ð', '_', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'e', 'n', 'k', 'e']
				ð/_/e/n/k/e(CAVCCV)
ð/_/_/e/n/k/e(CAAVCCV)
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', '_', 'o', 'g']
				ð/h/o/g(CCVC)
ð/h/_/o/g(CCAVC)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o', 'rgx': '((ð))/((h))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', 'h', '_', 'o', 'g']
				{'string': 'ð/h/_', 'rgx': '((ð))/((h))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'o', 'd']
				ð/_/o/d(CAVC)
ð/_/_/o/d(CAAVC)
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'd']
				version split: ['ð', '_', '_', 'o', 'd']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'o', 'g']
				ð/_/o/g(CAVC)
ð/_/_/o/g(CAAVC)
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g']
				version split: ['ð', '_', '_', 'o', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'o', 'h']
				ð/_/o/h(CAVC)
ð/_/_/o/h(CAAVC)
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h']
				version split: ['ð', '_', '_', 'o', 'h']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: ð/_/oƿ/g
					TRYING: oƿ
					adding blocked set: V = V >> i, ow, y, e, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', '_', 'oƿ', 'g']
				ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
ð/_/_/o/ƿ/g(CAAVCC)
ð/_/_/oƿ/g(CAAVC)
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ', 'rgx': '((ð))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g']
				version split: ['ð', '_', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				version split: ['ð', '_', '_', 'oƿ', 'g']
				{'string': 'ð/_/_', 'rgx': '((ð))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'e', 's']
				_/_/e/s(AAVC)
_/_/_/e/s(AAAVC)
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', 's']
				version split: ['_', '_', '_', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/e/n/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'e', 'n', 'k', 'e']
				t/h/e/n/k/e(CCVCCV)
t/h/_/e/n/k/e(CCAVCCV)
				version split: ['t', 'h', 'e', 'n', 'k', 'e']
				{'string': 't/h/e', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', '_', 'e', 'n', 'k', 'e']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k']
				t/h/n/k(CCCC)
t/h/_/n/k(CCACC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h/n', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'o']
				t/h/o(CCV)
t/h/_/o(CCAV)
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['t', 'h', '_', 'o']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'o', 'h']
				t/h/o/h(CCVC)
t/h/_/o/h(CCAVC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['t', 'h', '_', 'o', 'h']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', '_', 'o', 'h']
				t/_/o/h(CAVC)
t/_/_/o/h(CAAVC)
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o', 'rgx': '((t))/((_))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h']
				version split: ['t', '_', '_', 'o', 'h']
				{'string': 't/_/_', 'rgx': '((t))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/e/i/n/k
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/i/n/k
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> i, ow, y, e, _, ei, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', 'ei', 'n', 'k']
				þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
þ/_/_/e/i/n/k(CAAVACC)
þ/_/_/e/i/n/k(CAAVACC)
þ/_/_/ei/n/k(CAAVCC)
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ei', 'n', 'k']
				version split: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n']
				þ/_/e/n(CAVC)
þ/_/_/e/n(CAAVC)
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n']
				version split: ['þ', '_', '_', 'e', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'c']
				þ/_/e/n/c(CAVCC)
þ/_/_/e/n/c(CAAVCC)
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c']
				version split: ['þ', '_', '_', 'e', 'n', 'c']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/n/ck/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'ck', 'e']
				þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
þ/_/_/e/n/c/k/e(CAAVCCCV)
þ/_/_/e/n/ck/e(CAAVCCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/ng
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', '_', 'e', 'ng']
				þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
þ/_/_/e/n/g(CAAVCC)
þ/_/_/e/ng(CAAVC)
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g']
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng']
				version split: ['þ', '_', '_', 'e', 'n', 'g']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'ng']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/ng/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', '_', 'e', 'ng', 'e']
				þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
þ/_/_/e/n/g/e(CAAVCCV)
þ/_/_/e/ng/e(CAAVCV)
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/n/ch
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'ch']
				þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
þ/_/_/e/n/c/h(CAAVCCC)
þ/_/_/e/n/ch(CAAVCC)
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/e/n/ch/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'ch', 'e']
				þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
þ/_/_/e/n/c/h/e(CAAVCCCV)
þ/_/_/e/n/ch/e(CAAVCCV)
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'k']
				þ/_/e/n/k(CAVCC)
þ/_/_/e/n/k(CAAVCC)
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k']
				version split: ['þ', '_', '_', 'e', 'n', 'k']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'n', 'k', 'e']
				þ/_/e/n/k/e(CAVCCV)
þ/_/_/e/n/k/e(CAAVCCV)
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/e/n/k/e
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/e/o/h
					TRYING: e
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/eo/h
					TRYING: eo
					adding blocked set: V = V >> i, ow, y, e, _, ou, eo, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', '_', 'eo', 'h']
				þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
þ/_/_/e/o/h(CAAVVC)
þ/_/_/eo/h(CAAVC)
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', 'h']
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_/eo', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'eo', 'h']
				version split: ['þ', '_', '_', 'e', 'o', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'eo', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'ð']
				þ/_/o/ð(CAVC)
þ/_/_/o/ð(CAAVC)
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ð']
				version split: ['þ', '_', '_', 'o', 'ð']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/gh
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'gh']
				þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
þ/_/_/o/g/h(CAAVCC)
þ/_/_/o/gh(CAAVC)
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'g', 'h']
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'gh']
				version split: ['þ', '_', '_', 'o', 'g', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'gh']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'h']
				þ/_/o/h(CAVC)
þ/_/_/o/h(CAAVC)
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h']
				version split: ['þ', '_', '_', 'o', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/o/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'h', 'h']
				þ/_/o/h/h(CAVCC)
þ/_/_/o/h/h(CAAVCC)
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', 'h']
				version split: ['þ', '_', '_', 'o', 'h', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/ch
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'ch']
				þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
þ/_/_/o/c/h(CAAVCC)
þ/_/_/o/ch(CAAVC)
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'c', 'h']
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ch']
				version split: ['þ', '_', '_', 'o', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', 'ou']
				þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
þ/_/_/o/u(CAAVA)
þ/_/_/o/u(CAAVA)
þ/_/_/ou(CAAV)
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou']
				version split: ['þ', '_', '_', 'o', 'u']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/c
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/c
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', 'ou', 'c']
				þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
þ/_/_/o/u/c(CAAVAC)
þ/_/_/o/u/c(CAAVAC)
þ/_/_/ou/c(CAAVC)
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'c']
				version split: ['þ', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 'c']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', 'ou', 'h']
				þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
þ/_/_/o/u/h(CAAVAC)
þ/_/_/o/u/h(CAAVAC)
þ/_/_/ou/h(CAAVC)
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h']
				version split: ['þ', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/o/u/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: _/y/ou/h
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', 'ou', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', 'ou', 'h', 't']
				þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
þ/_/_/o/u/h/t(CAAVACC)
þ/_/_/o/u/h/t(CAAVACC)
þ/_/_/ou/h/t(CAAVCC)
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', 't']
				version split: ['þ', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 'h', 't']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/s
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/s
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', 'ou', 's']
				þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
þ/_/_/o/u/s(CAAVAC)
þ/_/_/o/u/s(CAAVAC)
þ/_/_/ou/s(CAAVC)
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 's']
				version split: ['þ', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 's']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/th
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/th
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/th
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', 'ou', 'th']
				þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
þ/_/_/o/u/t/h(CAAVACC)
þ/_/_/o/u/t/h(CAAVACC)
þ/_/_/o/u/th(CAAVAC)
þ/_/_/o/u/th(CAAVAC)
þ/_/_/ou/t/h(CAAVCC)
þ/_/_/ou/th(CAAVC)
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 't', 'h']
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'th']
				version split: ['þ', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 't', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 'th']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/u/ȝ
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ou/ȝ
					TRYING: ou
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', 'ou', 'ȝ']
				þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
þ/_/_/o/u/ȝ(CAAVAC)
þ/_/_/o/u/ȝ(CAAVAC)
þ/_/_/ou/ȝ(CAAVC)
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ']
				version split: ['þ', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ou', 'ȝ']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/o/w/t/h
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/o/w/th
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					> version: þ/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', 'ow', 'th']
				þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
þ/_/_/o/w/t/h(CAAVCCC)
þ/_/_/o/w/th(CAAVCC)
þ/_/_/ow/t/h(CAAVCC)
þ/_/_/ow/th(CAAVC)
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 'th']
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ow', 't', 'h']
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ow', 'th']
				version split: ['þ', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'o', 'w', 'th']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ow', 't', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'ow', 'th']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: o
					adding blocked set: V = V >> i, ow, y, e, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'o', 'ȝ']
				þ/_/o/ȝ(CAVC)
þ/_/_/o/ȝ(CAAVC)
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ']
				version split: ['þ', '_', '_', 'o', 'ȝ']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> i, ow, y, e, u, _, ou, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVCC : 3___
				ANALYSING: ðhenk
				adding littera based on matching pattern
				ANALYSING: think
				adding littera based on matching pattern
				ANALYSING: thogh
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: thynk
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'e', 'n']
				ð/_/_/e/n(CAAVC)
ð/_/_/_/e/n(CAAAVC)
				version split: ['ð', '_', '_', 'e', 'n']
				{'string': 'ð/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'e', 'n']
				version split: ['ð', '_', '_', '_', 'e', 'n']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/_/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'e', 'n', 'c']
				ð/_/_/e/n/c(CAAVCC)
ð/_/_/_/e/n/c(CAAAVCC)
				version split: ['ð', '_', '_', 'e', 'n', 'c']
				{'string': 'ð/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'e', 'n', 'c']
				version split: ['ð', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/_/e/n/c/h
					TRYING: e
					> version: ð/_/_/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', '_', '_', 'e', 'n', 'ch']
				ð/_/_/e/n/c/h(CAAVCCC)
ð/_/_/e/n/ch(CAAVCC)
ð/_/_/_/e/n/c/h(CAAAVCCC)
ð/_/_/_/e/n/ch(CAAAVCC)
				version split: ['ð', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				version split: ['ð', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'e', 'n', 'k', 'e']
				ð/_/_/e/n/k/e(CAAVCCV)
ð/_/_/_/e/n/k/e(CAAAVCCV)
				version split: ['ð', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/_/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', '_', '_', 'o', 'g']
				ð/h/_/o/g(CCAVC)
ð/h/_/_/o/g(CCAAVC)
				version split: ['ð', 'h', '_', 'o', 'g']
				{'string': 'ð/h/_/o', 'rgx': '((ð))/((h))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', '_', 'o', 'g']
				version split: ['ð', 'h', '_', '_', 'o', 'g']
				{'string': 'ð/h/_/_', 'rgx': '((ð))/((h))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: ð/i/_/n/g
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, g, _, ng, t
					> version: ð/i/_/ng
					TRYING: ng
					adding blocked set: C = C >> n, g, _, ng, t
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', 'ng']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_', 'rgx': '((ð))/((i))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'o', 'd']
				ð/_/_/o/d(CAAVC)
ð/_/_/_/o/d(CAAAVC)
				version split: ['ð', '_', '_', 'o', 'd']
				{'string': 'ð/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'o', 'd']
				version split: ['ð', '_', '_', '_', 'o', 'd']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/_/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'o', 'g']
				ð/_/_/o/g(CAAVC)
ð/_/_/_/o/g(CAAAVC)
				version split: ['ð', '_', '_', 'o', 'g']
				{'string': 'ð/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'o', 'g']
				version split: ['ð', '_', '_', '_', 'o', 'g']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'o', 'h']
				ð/_/_/o/h(CAAVC)
ð/_/_/_/o/h(CAAAVC)
				version split: ['ð', '_', '_', 'o', 'h']
				{'string': 'ð/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'o', 'h']
				version split: ['ð', '_', '_', '_', 'o', 'h']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/_/o/ƿ/g
					TRYING: o
					> version: ð/_/_/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', '_', '_', 'oƿ', 'g']
				ð/_/_/o/ƿ/g(CAAVCC)
ð/_/_/oƿ/g(CAAVC)
ð/_/_/_/o/ƿ/g(CAAAVCC)
ð/_/_/_/oƿ/g(CAAAVC)
				version split: ['ð', '_', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', '_', 'oƿ', 'g']
				{'string': 'ð/_/_/oƿ', 'rgx': '((ð))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', 'oƿ', 'g']
				version split: ['ð', '_', '_', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				version split: ['ð', '_', '_', '_', 'oƿ', 'g']
				{'string': 'ð/_/_/_', 'rgx': '((ð))/((_))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/_/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'e', 's']
				_/_/_/e/s(AAAVC)
_/_/_/_/e/s(AAAAVC)
				version split: ['_', '_', '_', 'e', 's']
				{'string': '_/_/_/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'e', 's']
				version split: ['_', '_', '_', '_', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: thenke
					resolving (1)
					> version: t/h/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'e', 'n', 'k', 'e']
				t/h/_/e/n/k/e(CCAVCCV)
t/h/_/_/e/n/k/e(CCAAVCCV)
				version split: ['t', 'h', '_', 'e', 'n', 'k', 'e']
				{'string': 't/h/_/e', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'n', 'k']
				t/h/_/n/k(CCACC)
t/h/_/_/n/k(CCAACC)
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'o']
				t/h/_/o(CCAV)
t/h/_/_/o(CCAAV)
				version split: ['t', 'h', '_', 'o']
				{'string': 't/h/_/o', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'o']
				version split: ['t', 'h', '_', '_', 'o']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'o', 'h']
				t/h/_/o/h(CCAVC)
t/h/_/_/o/h(CCAAVC)
				version split: ['t', 'h', '_', 'o', 'h']
				{'string': 't/h/_/o', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'o', 'h']
				version split: ['t', 'h', '_', '_', 'o', 'h']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', '_', '_', 'o', 'h']
				t/_/_/o/h(CAAVC)
t/_/_/_/o/h(CAAAVC)
				version split: ['t', '_', '_', 'o', 'h']
				{'string': 't/_/_/o', 'rgx': '((t))/((_))/((_))/((_))$'}
				_____REMOVING________['t', '_', '_', 'o', 'h']
				version split: ['t', '_', '_', '_', 'o', 'h']
				{'string': 't/_/_/_', 'rgx': '((t))/((_))/((_))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/_/e/i/n/k
					TRYING: e
					> version: þ/_/_/e/i/n/k
					TRYING: e
					> version: þ/_/_/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', '_', 'ei', 'n', 'k']
				þ/_/_/e/i/n/k(CAAVACC)
þ/_/_/e/i/n/k(CAAVACC)
þ/_/_/ei/n/k(CAAVCC)
þ/_/_/_/e/i/n/k(CAAAVACC)
þ/_/_/_/e/i/n/k(CAAAVACC)
þ/_/_/_/ei/n/k(CAAAVCC)
				version split: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/_/ei', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ei', 'n', 'k']
				version split: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n']
				þ/_/_/e/n(CAAVC)
þ/_/_/_/e/n(CAAAVC)
				version split: ['þ', '_', '_', 'e', 'n']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n']
				version split: ['þ', '_', '_', '_', 'e', 'n']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/_/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'c']
				þ/_/_/e/n/c(CAAVCC)
þ/_/_/_/e/n/c(CAAAVCC)
				version split: ['þ', '_', '_', 'e', 'n', 'c']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'c']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/_/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'ck', 'e']
				þ/_/_/e/n/c/k/e(CAAVCCCV)
þ/_/_/e/n/ck/e(CAAVCCV)
þ/_/_/_/e/n/c/k/e(CAAAVCCCV)
þ/_/_/_/e/n/ck/e(CAAAVCCV)
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/_/e/n/g
					TRYING: e
					> version: þ/_/_/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'ng']
				þ/_/_/e/n/g(CAAVCC)
þ/_/_/e/ng(CAAVC)
þ/_/_/_/e/n/g(CAAAVCC)
þ/_/_/_/e/ng(CAAAVC)
				version split: ['þ', '_', '_', 'e', 'n', 'g']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'g']
				version split: ['þ', '_', '_', 'e', 'ng']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'ng']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'g']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'ng']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/_/e/n/g/e
					TRYING: e
					> version: þ/_/_/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'ng', 'e']
				þ/_/_/e/n/g/e(CAAVCCV)
þ/_/_/e/ng/e(CAAVCV)
þ/_/_/_/e/n/g/e(CAAAVCCV)
þ/_/_/_/e/ng/e(CAAAVCV)
				version split: ['þ', '_', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/_/e/n/c/h
					TRYING: e
					> version: þ/_/_/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'ch']
				þ/_/_/e/n/c/h(CAAVCCC)
þ/_/_/e/n/ch(CAAVCC)
þ/_/_/_/e/n/c/h(CAAAVCCC)
þ/_/_/_/e/n/ch(CAAAVCC)
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/_/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'ch', 'e']
				þ/_/_/e/n/c/h/e(CAAVCCCV)
þ/_/_/e/n/ch/e(CAAVCCV)
þ/_/_/_/e/n/c/h/e(CAAAVCCCV)
þ/_/_/_/e/n/ch/e(CAAAVCCV)
				version split: ['þ', '_', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/_/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'k']
				þ/_/_/e/n/k(CAAVCC)
þ/_/_/_/e/n/k(CAAAVCC)
				version split: ['þ', '_', '_', 'e', 'n', 'k']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'k']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'k']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'n', 'k', 'e']
				þ/_/_/e/n/k/e(CAAVCCV)
þ/_/_/_/e/n/k/e(CAAAVCCV)
				version split: ['þ', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/e/n/k/e
					TRYING: e
					> version: _/y/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/e/n/k/e(AAAVCCV)
_/y/_/e/n/k/e(AAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/e', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/_/e/o/h
					TRYING: e
					> version: þ/_/_/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'eo', 'h']
				þ/_/_/e/o/h(CAAVVC)
þ/_/_/eo/h(CAAVC)
þ/_/_/_/e/o/h(CAAAVVC)
þ/_/_/_/eo/h(CAAAVC)
				version split: ['þ', '_', '_', 'e', 'o', 'h']
				{'string': 'þ/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'e', 'o', 'h']
				version split: ['þ', '_', '_', 'eo', 'h']
				{'string': 'þ/_/_/eo', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'eo', 'h']
				version split: ['þ', '_', '_', '_', 'e', 'o', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'eo', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/c
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, t
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, t
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, t
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/ch
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'ch']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/i/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_', 'rgx': '((þ))/((i))/((_))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'ð']
				þ/_/_/o/ð(CAAVC)
þ/_/_/_/o/ð(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'ð']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'ð']
				version split: ['þ', '_', '_', '_', 'o', 'ð']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/_/o/g/h
					TRYING: o
					> version: þ/_/_/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'gh']
				þ/_/_/o/g/h(CAAVCC)
þ/_/_/o/gh(CAAVC)
þ/_/_/_/o/g/h(CAAAVCC)
þ/_/_/_/o/gh(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'g', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'g', 'h']
				version split: ['þ', '_', '_', 'o', 'gh']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'gh']
				version split: ['þ', '_', '_', '_', 'o', 'g', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'gh']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'h']
				þ/_/_/o/h(CAAVC)
þ/_/_/_/o/h(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/o/h
					TRYING: o
					> version: _/y/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'h']
				_/y/_/o/h(AAAVC)
_/y/_/o/h(AAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', 'o', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/_/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'h', 'h']
				þ/_/_/o/h/h(CAAVCC)
þ/_/_/_/o/h/h(CAAAVCC)
				version split: ['þ', '_', '_', 'o', 'h', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'h', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'h', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/_/o/c/h
					TRYING: o
					> version: þ/_/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'ch']
				þ/_/_/o/c/h(CAAVCC)
þ/_/_/o/ch(CAAVC)
þ/_/_/_/o/c/h(CAAAVCC)
þ/_/_/_/o/ch(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'c', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'c', 'h']
				version split: ['þ', '_', '_', 'o', 'ch']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'ch']
				version split: ['þ', '_', '_', '_', 'o', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/_/o/u
					TRYING: o
					> version: þ/_/_/o/u
					TRYING: o
					> version: þ/_/_/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou']
				þ/_/_/o/u(CAAVA)
þ/_/_/o/u(CAAVA)
þ/_/_/ou(CAAV)
þ/_/_/_/o/u(CAAAVA)
þ/_/_/_/o/u(CAAAVA)
þ/_/_/_/ou(CAAAV)
				version split: ['þ', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', 'ou']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou']
				version split: ['þ', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/_/o/u/c
					TRYING: o
					> version: þ/_/_/o/u/c
					TRYING: o
					> version: þ/_/_/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 'c']
				þ/_/_/o/u/c(CAAVAC)
þ/_/_/o/u/c(CAAVAC)
þ/_/_/ou/c(CAAVC)
þ/_/_/_/o/u/c(CAAAVAC)
þ/_/_/_/o/u/c(CAAAVAC)
þ/_/_/_/ou/c(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', 'ou', 'c']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 'c']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 'c']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/_/o/u/h
					TRYING: o
					> version: þ/_/_/o/u/h
					TRYING: o
					> version: þ/_/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 'h']
				þ/_/_/o/u/h(CAAVAC)
þ/_/_/o/u/h(CAAVAC)
þ/_/_/ou/h(CAAVC)
þ/_/_/_/o/u/h(CAAAVAC)
þ/_/_/_/o/u/h(CAAAVAC)
þ/_/_/_/ou/h(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', 'ou', 'h']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/o/u/h
					TRYING: o
					> version: _/y/_/ou/h
					TRYING: ou
					> version: _/y/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', 'ou', 'h']
				_/y/_/o/u/h(AAAVAC)
_/y/_/o/u/h(AAAVAC)
_/y/_/ou/h(AAAVC)
_/y/_/ou/h(AAAVC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'o', 'u', 'h']
				{'string': '_/y/_/o', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', 'ou', 'h']
				{'string': '_/y/_/ou', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/_/o/u/h/t
					TRYING: o
					> version: þ/_/_/o/u/h/t
					TRYING: o
					> version: þ/_/_/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 'h', 't']
				þ/_/_/o/u/h/t(CAAVACC)
þ/_/_/o/u/h/t(CAAVACC)
þ/_/_/ou/h/t(CAAVCC)
þ/_/_/_/o/u/h/t(CAAAVACC)
þ/_/_/_/o/u/h/t(CAAAVACC)
þ/_/_/_/ou/h/t(CAAAVCC)
				version split: ['þ', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', 'ou', 'h', 't']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 'h', 't']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 'h', 't']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/_/o/u/s
					TRYING: o
					> version: þ/_/_/o/u/s
					TRYING: o
					> version: þ/_/_/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 's']
				þ/_/_/o/u/s(CAAVAC)
þ/_/_/o/u/s(CAAVAC)
þ/_/_/ou/s(CAAVC)
þ/_/_/_/o/u/s(CAAAVAC)
þ/_/_/_/o/u/s(CAAAVAC)
þ/_/_/_/ou/s(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', 'ou', 's']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 's']
				version split: ['þ', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 's']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/_/o/u/t/h
					TRYING: o
					> version: þ/_/_/o/u/t/h
					TRYING: o
					> version: þ/_/_/o/u/th
					TRYING: o
					> version: þ/_/_/o/u/th
					TRYING: o
					> version: þ/_/_/ou/t/h
					TRYING: ou
					> version: þ/_/_/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 'th']
				þ/_/_/o/u/t/h(CAAVACC)
þ/_/_/o/u/t/h(CAAVACC)
þ/_/_/o/u/th(CAAVAC)
þ/_/_/o/u/th(CAAVAC)
þ/_/_/ou/t/h(CAAVCC)
þ/_/_/ou/th(CAAVC)
þ/_/_/_/o/u/t/h(CAAAVACC)
þ/_/_/_/o/u/t/h(CAAAVACC)
þ/_/_/_/o/u/th(CAAAVAC)
þ/_/_/_/o/u/th(CAAAVAC)
þ/_/_/_/ou/t/h(CAAAVCC)
þ/_/_/_/ou/th(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', 'ou', 't', 'h']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 't', 'h']
				version split: ['þ', '_', '_', 'ou', 'th']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 'th']
				version split: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 't', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 'th']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/_/o/u/ȝ
					TRYING: o
					> version: þ/_/_/o/u/ȝ
					TRYING: o
					> version: þ/_/_/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', '_', 'ou', 'ȝ']
				þ/_/_/o/u/ȝ(CAAVAC)
þ/_/_/o/u/ȝ(CAAVAC)
þ/_/_/ou/ȝ(CAAVC)
þ/_/_/_/o/u/ȝ(CAAAVAC)
þ/_/_/_/o/u/ȝ(CAAAVAC)
þ/_/_/_/ou/ȝ(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', 'ou', 'ȝ']
				{'string': 'þ/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ou', 'ȝ']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ou', 'ȝ']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/_/o/w/t/h
					TRYING: o
					> version: þ/_/_/o/w/th
					TRYING: o
					> version: þ/_/_/ow/t/h
					TRYING: ow
					> version: þ/_/_/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'ow', 'th']
				þ/_/_/o/w/t/h(CAAVCCC)
þ/_/_/o/w/th(CAAVCC)
þ/_/_/ow/t/h(CAAVCC)
þ/_/_/ow/th(CAAVC)
þ/_/_/_/o/w/t/h(CAAAVCCC)
þ/_/_/_/o/w/th(CAAAVCC)
þ/_/_/_/ow/t/h(CAAAVCC)
þ/_/_/_/ow/th(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', '_', 'o', 'w', 'th']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'w', 'th']
				version split: ['þ', '_', '_', 'ow', 't', 'h']
				{'string': 'þ/_/_/ow', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ow', 't', 'h']
				version split: ['þ', '_', '_', 'ow', 'th']
				{'string': 'þ/_/_/ow', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'ow', 'th']
				version split: ['þ', '_', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'o', 'w', 'th']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ow', 't', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'ow', 'th']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/_/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'o', 'ȝ']
				þ/_/_/o/ȝ(CAAVC)
þ/_/_/_/o/ȝ(CAAAVC)
				version split: ['þ', '_', '_', 'o', 'ȝ']
				{'string': 'þ/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'o', 'ȝ']
				version split: ['þ', '_', '_', '_', 'o', 'ȝ']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					> version: þ/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n']
				þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/u/n(CAAAAC)
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					> version: þ/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					> version: þ/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					> version: þ/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/u/n/ch(CAAAACC)
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					> version: þ/y/_/n/k
					TRYING: n
					adding blocked set: C = C >> g, n, t, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', 'n', 'k']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_', 'rgx': '((þ))/((y))/((_))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, g, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVCC : 4___
				ANALYSING: ðhenk
				adding littera based on matching pattern
				ANALYSING: think
				adding littera based on matching pattern
				ANALYSING: thogh
				adding littera based on matching pattern
				ANALYSING: though
				adding littera based on matching pattern
				ANALYSING: thowth
				adding littera based on matching pattern
				ANALYSING: thynk
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/_/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'e', 'n']
				ð/_/_/_/e/n(CAAAVC)
ð/_/_/_/_/e/n(CAAAAVC)
				version split: ['ð', '_', '_', '_', 'e', 'n']
				{'string': 'ð/_/_/_/e/n', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'e', 'n']
				version split: ['ð', '_', '_', '_', '_', 'e', 'n']
				{'string': 'ð/_/_/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'e', 'n']
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/_/_/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'e', 'n', 'c']
				ð/_/_/_/e/n/c(CAAAVCC)
ð/_/_/_/_/e/n/c(CAAAAVCC)
				version split: ['ð', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'ð/_/_/_/e/n', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'e', 'n', 'c']
				version split: ['ð', '_', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'ð/_/_/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'e', 'n', 'c']
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/_/_/e/n/c/h
					TRYING: e
					> version: ð/_/_/_/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'e', 'n', 'ch']
				ð/_/_/_/e/n/c/h(CAAAVCCC)
ð/_/_/_/e/n/ch(CAAAVCC)
ð/_/_/_/_/e/n/c/h(CAAAAVCCC)
ð/_/_/_/_/e/n/ch(CAAAAVCC)
				version split: ['ð', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/_/_/e/n', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/_/_/e/n', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/_/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/_/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'e', 'n', 'ch']
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				ð/_/_/_/e/n/k/e(CAAAVCCV)
ð/_/_/_/_/e/n/k/e(CAAAAVCCV)
				version split: ['ð', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/_/_/e/n', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/_/_/_/e', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/_/_/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', '_', '_', '_', 'o', 'g']
				ð/h/_/_/o/g(CCAAVC)
ð/h/_/_/_/o/g(CCAAAVC)
				version split: ['ð', 'h', '_', '_', 'o', 'g']
				{'string': 'ð/h/_/_/o/g', 'rgx': '((ð))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', '_', '_', 'o', 'g']
				version split: ['ð', 'h', '_', '_', '_', 'o', 'g']
				{'string': 'ð/h/_/_/_/o', 'rgx': '((ð))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', '_', '_', '_', 'o', 'g']
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: ð/i/_/_/n/g
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, k, _, h
					> version: ð/i/_/_/ng
					TRYING: ng
					adding blocked set: C = C >> ng, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', '_', '_', 'ng']
				ð/i/_/_/n/g(CAAACC)
ð/i/_/_/n/g(CAAACC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/ng(CAAAC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/n/g(CAAAACC)
ð/i/_/_/_/ng(CAAAAC)
ð/i/_/_/_/ng(CAAAAC)
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/n/g', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', 'ng']
				{'string': 'ð/i/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'n', 'g']
				{'string': 'ð/i/_/_/_/n', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'n', 'g']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				version split: ['ð', 'i', '_', '_', '_', 'ng']
				{'string': 'ð/i/_/_/_/ng', 'rgx': '((ð))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', '_', '_', 'ng']
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/_/_/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'o', 'd']
				ð/_/_/_/o/d(CAAAVC)
ð/_/_/_/_/o/d(CAAAAVC)
				version split: ['ð', '_', '_', '_', 'o', 'd']
				{'string': 'ð/_/_/_/o/d', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'o', 'd']
				version split: ['ð', '_', '_', '_', '_', 'o', 'd']
				{'string': 'ð/_/_/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'o', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/_/_/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'o', 'g']
				ð/_/_/_/o/g(CAAAVC)
ð/_/_/_/_/o/g(CAAAAVC)
				version split: ['ð', '_', '_', '_', 'o', 'g']
				{'string': 'ð/_/_/_/o/g', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'o', 'g']
				version split: ['ð', '_', '_', '_', '_', 'o', 'g']
				{'string': 'ð/_/_/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'o', 'g']
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'o', 'h']
				ð/_/_/_/o/h(CAAAVC)
ð/_/_/_/_/o/h(CAAAAVC)
				version split: ['ð', '_', '_', '_', 'o', 'h']
				{'string': 'ð/_/_/_/o/h', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'o', 'h']
				version split: ['ð', '_', '_', '_', '_', 'o', 'h']
				{'string': 'ð/_/_/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'o', 'h']
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/_/_/o/ƿ/g
					TRYING: o
					> version: ð/_/_/_/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', '_', '_', '_', 'oƿ', 'g']
				ð/_/_/_/o/ƿ/g(CAAAVCC)
ð/_/_/_/oƿ/g(CAAAVC)
ð/_/_/_/_/o/ƿ/g(CAAAAVCC)
ð/_/_/_/_/oƿ/g(CAAAAVC)
				version split: ['ð', '_', '_', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/_/_/o/ƿ', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', '_', '_', 'oƿ', 'g']
				{'string': 'ð/_/_/_/oƿ/g', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', 'oƿ', 'g']
				version split: ['ð', '_', '_', '_', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/_/_/_/o', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', '_', '_', '_', 'oƿ', 'g']
				{'string': 'ð/_/_/_/_/oƿ', 'rgx': '((ð))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', '_', '_', '_', 'oƿ', 'g']
				ANALYSING: es
					resolving (1)
					> version: _/_/_/_/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'e', 's']
				_/_/_/_/e/s(AAAAVC)
_/_/_/_/_/e/s(AAAAAVC)
				version split: ['_', '_', '_', '_', 'e', 's']
				{'string': '_/_/_/_/e/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'e', 's']
				{'string': '_/_/_/_/_/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'e', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> k, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				ANALYSING: thenke
					resolving (1)
					> version: t/h/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'e', 'n', 'k', 'e']
				t/h/_/_/e/n/k/e(CCAAVCCV)
t/h/_/_/_/e/n/k/e(CCAAAVCCV)
				version split: ['t', 'h', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 't/h/_/_/e/n', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['t', 'h', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 't/h/_/_/_/e', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'n', 'k']
				t/h/_/_/n/k(CCAACC)
t/h/_/_/_/n/k(CCAAACC)
				version split: ['t', 'h', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/n/k', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'n', 'k']
				{'string': 't/h/_/_/_/n', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'n', 'k']
				ANALYSING: tho
					resolving (1)
					> version: t/h/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'o']
				t/h/_/_/o(CCAAV)
t/h/_/_/_/o(CCAAAV)
				version split: ['t', 'h', '_', '_', 'o']
				{'string': 't/h/_/_/o', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'o']
				version split: ['t', 'h', '_', '_', '_', 'o']
				{'string': 't/h/_/_/_/o', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'o']
				ANALYSING: thoh
					resolving (1)
					> version: t/h/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'o', 'h']
				t/h/_/_/o/h(CCAAVC)
t/h/_/_/_/o/h(CCAAAVC)
				version split: ['t', 'h', '_', '_', 'o', 'h']
				{'string': 't/h/_/_/o/h', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'o', 'h']
				version split: ['t', 'h', '_', '_', '_', 'o', 'h']
				{'string': 't/h/_/_/_/o', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'o', 'h']
				ANALYSING: toh
					resolving (1)
					> version: t/_/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', '_', '_', '_', 'o', 'h']
				t/_/_/_/o/h(CAAAVC)
t/_/_/_/_/o/h(CAAAAVC)
				version split: ['t', '_', '_', '_', 'o', 'h']
				{'string': 't/_/_/_/o/h', 'rgx': '((t))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', '_', '_', '_', 'o', 'h']
				version split: ['t', '_', '_', '_', '_', 'o', 'h']
				{'string': 't/_/_/_/_/o', 'rgx': '((t))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['t', '_', '_', '_', '_', 'o', 'h']
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/_/_/e/i/n/k
					TRYING: e
					> version: þ/_/_/_/e/i/n/k
					TRYING: e
					> version: þ/_/_/_/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ei', 'n', 'k']
				þ/_/_/_/e/i/n/k(CAAAVACC)
þ/_/_/_/e/i/n/k(CAAAVACC)
þ/_/_/_/ei/n/k(CAAAVCC)
þ/_/_/_/_/e/i/n/k(CAAAAVACC)
þ/_/_/_/_/e/i/n/k(CAAAAVACC)
þ/_/_/_/_/ei/n/k(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_/e/i', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_/e/i', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/_/_/ei/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ei', 'n', 'k']
				version split: ['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', '_', '_', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/_/_/_/ei', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/_/_/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n']
				þ/_/_/_/e/n(CAAAVC)
þ/_/_/_/_/e/n(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'e', 'n']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n']
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/_/_/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'c']
				þ/_/_/_/e/n/c(CAAAVCC)
þ/_/_/_/_/e/n/c(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'c']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'c']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'c']
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/_/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/_/_/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'ck', 'e']
				þ/_/_/_/e/n/c/k/e(CAAAVCCCV)
þ/_/_/_/e/n/ck/e(CAAAVCCV)
þ/_/_/_/_/e/n/c/k/e(CAAAAVCCCV)
þ/_/_/_/_/e/n/ck/e(CAAAAVCCV)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/_/_/e/n/g
					TRYING: e
					> version: þ/_/_/_/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'ng']
				þ/_/_/_/e/n/g(CAAAVCC)
þ/_/_/_/e/ng(CAAAVC)
þ/_/_/_/_/e/n/g(CAAAAVCC)
þ/_/_/_/_/e/ng(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'g']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'g']
				version split: ['þ', '_', '_', '_', 'e', 'ng']
				{'string': 'þ/_/_/_/e/ng', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'ng']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'g']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'g']
				version split: ['þ', '_', '_', '_', '_', 'e', 'ng']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'ng']
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/_/_/e/n/g/e
					TRYING: e
					> version: þ/_/_/_/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'ng', 'e']
				þ/_/_/_/e/n/g/e(CAAAVCCV)
þ/_/_/_/e/ng/e(CAAAVCV)
þ/_/_/_/_/e/n/g/e(CAAAAVCCV)
þ/_/_/_/_/e/ng/e(CAAAAVCV)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/_/_/e/ng', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'ng', 'e']
				ANALYSING: þench
					resolving (2)
					> version: þ/_/_/_/e/n/c/h
					TRYING: e
					> version: þ/_/_/_/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'ch']
				þ/_/_/_/e/n/c/h(CAAAVCCC)
þ/_/_/_/e/n/ch(CAAAVCC)
þ/_/_/_/_/e/n/c/h(CAAAAVCCC)
þ/_/_/_/_/e/n/ch(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'ch']
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/_/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/_/_/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'ch', 'e']
				þ/_/_/_/e/n/c/h/e(CAAAVCCCV)
þ/_/_/_/e/n/ch/e(CAAAVCCV)
þ/_/_/_/_/e/n/c/h/e(CAAAAVCCCV)
þ/_/_/_/_/e/n/ch/e(CAAAAVCCV)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', '_', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'ch', 'e']
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/_/_/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'k']
				þ/_/_/_/e/n/k(CAAAVCC)
þ/_/_/_/_/e/n/k(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'k']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'k']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'k']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'k']
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				þ/_/_/_/e/n/k/e(CAAAVCCV)
þ/_/_/_/_/e/n/k/e(CAAAAVCCV)
				version split: ['þ', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/_/_/e/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: yenke
					resolving (2)
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					> version: _/y/_/_/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/e/n/k/e(AAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
_/y/_/_/_/e/n/k/e(AAAAAVCCV)
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/e/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				version split: ['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				{'string': '_/y/_/_/_/e', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'e', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/_/_/e/o/h
					TRYING: e
					> version: þ/_/_/_/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'eo', 'h']
				þ/_/_/_/e/o/h(CAAAVVC)
þ/_/_/_/eo/h(CAAAVC)
þ/_/_/_/_/e/o/h(CAAAAVVC)
þ/_/_/_/_/eo/h(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'e', 'o', 'h']
				{'string': 'þ/_/_/_/e/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'e', 'o', 'h']
				version split: ['þ', '_', '_', '_', 'eo', 'h']
				{'string': 'þ/_/_/_/eo/h', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'eo', 'h']
				version split: ['þ', '_', '_', '_', '_', 'e', 'o', 'h']
				{'string': 'þ/_/_/_/_/e', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'e', 'o', 'h']
				version split: ['þ', '_', '_', '_', '_', 'eo', 'h']
				{'string': 'þ/_/_/_/_/eo', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/c
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c']
				þ/i/_/_/n/c(CAAACC)
þ/i/_/_/n/c(CAAACC)
þ/i/_/_/_/n/c(CAAAACC)
þ/i/_/_/_/n/c(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c']
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, k, _, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/c/h
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/ch
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/c/h(CAAACCC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/n/ch(CAAACC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/c/h(CAAAACCC)
þ/i/_/_/_/n/ch(CAAAACC)
þ/i/_/_/_/n/ch(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/n/c', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/n/ch', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'ch']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'ch']
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k']
				þ/i/_/_/n/k(CAAACC)
þ/i/_/_/n/k(CAAACC)
þ/i/_/_/_/n/k(CAAAACC)
þ/i/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k']
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/i/_/_/n/k/e
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/n/k/e(CAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
þ/i/_/_/_/n/k/e(CAAAACCV)
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/n/k', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/_/_/n', 'rgx': '((þ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'i', '_', '_', '_', 'n', 'k', 'e']
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/_/_/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'ð']
				þ/_/_/_/o/ð(CAAAVC)
þ/_/_/_/_/o/ð(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'ð']
				{'string': 'þ/_/_/_/o/ð', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'ð']
				version split: ['þ', '_', '_', '_', '_', 'o', 'ð']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'ð']
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/_/_/o/g/h
					TRYING: o
					> version: þ/_/_/_/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'gh']
				þ/_/_/_/o/g/h(CAAAVCC)
þ/_/_/_/o/gh(CAAAVC)
þ/_/_/_/_/o/g/h(CAAAAVCC)
þ/_/_/_/_/o/gh(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'g', 'h']
				{'string': 'þ/_/_/_/o/g', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'g', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'gh']
				{'string': 'þ/_/_/_/o/gh', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'gh']
				version split: ['þ', '_', '_', '_', '_', 'o', 'g', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'g', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'gh']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'h']
				þ/_/_/_/o/h(CAAAVC)
þ/_/_/_/_/o/h(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'h']
				{'string': 'þ/_/_/_/o/h', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'h']
				ANALYSING: yoh
					resolving (2)
					> version: _/y/_/_/o/h
					TRYING: o
					> version: _/y/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'h']
				_/y/_/_/o/h(AAAAVC)
_/y/_/_/o/h(AAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
_/y/_/_/_/o/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/o/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'h']
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/_/_/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'h', 'h']
				þ/_/_/_/o/h/h(CAAAVCC)
þ/_/_/_/_/o/h/h(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'o', 'h', 'h']
				{'string': 'þ/_/_/_/o/h', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'h', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'h', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'h', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/_/_/o/c/h
					TRYING: o
					> version: þ/_/_/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'ch']
				þ/_/_/_/o/c/h(CAAAVCC)
þ/_/_/_/o/ch(CAAAVC)
þ/_/_/_/_/o/c/h(CAAAAVCC)
þ/_/_/_/_/o/ch(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'c', 'h']
				{'string': 'þ/_/_/_/o/c', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'ch']
				{'string': 'þ/_/_/_/o/ch', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'o', 'c', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'ch']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'ch']
				ANALYSING: þou
					resolving (3)
					> version: þ/_/_/_/o/u
					TRYING: o
					> version: þ/_/_/_/o/u
					TRYING: o
					> version: þ/_/_/_/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou']
				þ/_/_/_/o/u(CAAAVA)
þ/_/_/_/o/u(CAAAVA)
þ/_/_/_/ou(CAAAV)
þ/_/_/_/_/o/u(CAAAAVA)
þ/_/_/_/_/o/u(CAAAAVA)
þ/_/_/_/_/ou(CAAAAV)
				version split: ['þ', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', '_', 'ou']
				{'string': 'þ/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u']
				version split: ['þ', '_', '_', '_', '_', 'ou']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou']
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/_/_/o/u/c
					TRYING: o
					> version: þ/_/_/_/o/u/c
					TRYING: o
					> version: þ/_/_/_/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 'c']
				þ/_/_/_/o/u/c(CAAAVAC)
þ/_/_/_/o/u/c(CAAAVAC)
þ/_/_/_/ou/c(CAAAVC)
þ/_/_/_/_/o/u/c(CAAAAVAC)
þ/_/_/_/_/o/u/c(CAAAAVAC)
þ/_/_/_/_/ou/c(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', '_', 'ou', 'c']
				{'string': 'þ/_/_/_/ou/c', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 'c']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'c']
				version split: ['þ', '_', '_', '_', '_', 'ou', 'c']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 'c']
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/_/_/o/u/h
					TRYING: o
					> version: þ/_/_/_/o/u/h
					TRYING: o
					> version: þ/_/_/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 'h']
				þ/_/_/_/o/u/h(CAAAVAC)
þ/_/_/_/o/u/h(CAAAVAC)
þ/_/_/_/ou/h(CAAAVC)
þ/_/_/_/_/o/u/h(CAAAAVAC)
þ/_/_/_/_/o/u/h(CAAAAVAC)
þ/_/_/_/_/ou/h(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', '_', 'ou', 'h']
				{'string': 'þ/_/_/_/ou/h', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'h']
				version split: ['þ', '_', '_', '_', '_', 'ou', 'h']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 'h']
				ANALYSING: youh
					resolving (4)
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/o/u/h
					TRYING: o
					> version: _/y/_/_/ou/h
					TRYING: ou
					> version: _/y/_/_/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'ou', 'h']
				_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/o/u/h(AAAAVAC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/ou/h(AAAAVC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/o/u/h(AAAAAVAC)
_/y/_/_/_/ou/h(AAAAAVC)
_/y/_/_/_/ou/h(AAAAAVC)
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/o/u', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/ou/h', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				{'string': '_/y/_/_/_/o', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'o', 'u', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				version split: ['_', 'y', '_', '_', '_', 'ou', 'h']
				{'string': '_/y/_/_/_/ou', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'ou', 'h']
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/_/_/o/u/h/t
					TRYING: o
					> version: þ/_/_/_/o/u/h/t
					TRYING: o
					> version: þ/_/_/_/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 'h', 't']
				þ/_/_/_/o/u/h/t(CAAAVACC)
þ/_/_/_/o/u/h/t(CAAAVACC)
þ/_/_/_/ou/h/t(CAAAVCC)
þ/_/_/_/_/o/u/h/t(CAAAAVACC)
þ/_/_/_/_/o/u/h/t(CAAAAVACC)
þ/_/_/_/_/ou/h/t(CAAAAVCC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', '_', 'ou', 'h', 't']
				{'string': 'þ/_/_/_/ou/h', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 'h', 't']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', '_', '_', '_', 'ou', 'h', 't']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 'h', 't']
				ANALYSING: þous
					resolving (3)
					> version: þ/_/_/_/o/u/s
					TRYING: o
					> version: þ/_/_/_/o/u/s
					TRYING: o
					> version: þ/_/_/_/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 's']
				þ/_/_/_/o/u/s(CAAAVAC)
þ/_/_/_/o/u/s(CAAAVAC)
þ/_/_/_/ou/s(CAAAVC)
þ/_/_/_/_/o/u/s(CAAAAVAC)
þ/_/_/_/_/o/u/s(CAAAAVAC)
þ/_/_/_/_/ou/s(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', '_', 'ou', 's']
				{'string': 'þ/_/_/_/ou/s', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 's']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 's']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 's']
				version split: ['þ', '_', '_', '_', '_', 'ou', 's']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/_/_/o/u/t/h
					TRYING: o
					> version: þ/_/_/_/o/u/t/h
					TRYING: o
					> version: þ/_/_/_/o/u/th
					TRYING: o
					> version: þ/_/_/_/o/u/th
					TRYING: o
					> version: þ/_/_/_/ou/t/h
					TRYING: ou
					> version: þ/_/_/_/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 'th']
				þ/_/_/_/o/u/t/h(CAAAVACC)
þ/_/_/_/o/u/t/h(CAAAVACC)
þ/_/_/_/o/u/th(CAAAVAC)
þ/_/_/_/o/u/th(CAAAVAC)
þ/_/_/_/ou/t/h(CAAAVCC)
þ/_/_/_/ou/th(CAAAVC)
þ/_/_/_/_/o/u/t/h(CAAAAVACC)
þ/_/_/_/_/o/u/t/h(CAAAAVACC)
þ/_/_/_/_/o/u/th(CAAAAVAC)
þ/_/_/_/_/o/u/th(CAAAAVAC)
þ/_/_/_/_/ou/t/h(CAAAAVCC)
þ/_/_/_/_/ou/th(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', '_', 'ou', 't', 'h']
				{'string': 'þ/_/_/_/ou/t', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 't', 'h']
				version split: ['þ', '_', '_', '_', 'ou', 'th']
				{'string': 'þ/_/_/_/ou/th', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 'th']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'th']
				version split: ['þ', '_', '_', '_', '_', 'ou', 't', 'h']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 't', 'h']
				version split: ['þ', '_', '_', '_', '_', 'ou', 'th']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/_/_/o/u/ȝ
					TRYING: o
					> version: þ/_/_/_/o/u/ȝ
					TRYING: o
					> version: þ/_/_/_/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ou', 'ȝ']
				þ/_/_/_/o/u/ȝ(CAAAVAC)
þ/_/_/_/o/u/ȝ(CAAAVAC)
þ/_/_/_/ou/ȝ(CAAAVC)
þ/_/_/_/_/o/u/ȝ(CAAAAVAC)
þ/_/_/_/_/o/u/ȝ(CAAAAVAC)
þ/_/_/_/_/ou/ȝ(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_/o/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', '_', 'ou', 'ȝ']
				{'string': 'þ/_/_/_/ou/ȝ', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ou', 'ȝ']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', '_', '_', '_', 'ou', 'ȝ']
				{'string': 'þ/_/_/_/_/ou', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ou', 'ȝ']
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/_/_/o/w/t/h
					TRYING: o
					> version: þ/_/_/_/o/w/th
					TRYING: o
					> version: þ/_/_/_/ow/t/h
					TRYING: ow
					> version: þ/_/_/_/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'ow', 'th']
				þ/_/_/_/o/w/t/h(CAAAVCCC)
þ/_/_/_/o/w/th(CAAAVCC)
þ/_/_/_/ow/t/h(CAAAVCC)
þ/_/_/_/ow/th(CAAAVC)
þ/_/_/_/_/o/w/t/h(CAAAAVCCC)
þ/_/_/_/_/o/w/th(CAAAAVCC)
þ/_/_/_/_/ow/t/h(CAAAAVCC)
þ/_/_/_/_/ow/th(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/_/_/o/w', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', '_', '_', 'o', 'w', 'th']
				{'string': 'þ/_/_/_/o/w', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'w', 'th']
				version split: ['þ', '_', '_', '_', 'ow', 't', 'h']
				{'string': 'þ/_/_/_/ow/t', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ow', 't', 'h']
				version split: ['þ', '_', '_', '_', 'ow', 'th']
				{'string': 'þ/_/_/_/ow/th', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'ow', 'th']
				version split: ['þ', '_', '_', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', '_', '_', '_', 'o', 'w', 'th']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'w', 'th']
				version split: ['þ', '_', '_', '_', '_', 'ow', 't', 'h']
				{'string': 'þ/_/_/_/_/ow', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ow', 't', 'h']
				version split: ['þ', '_', '_', '_', '_', 'ow', 'th']
				{'string': 'þ/_/_/_/_/ow', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/_/_/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'o', 'ȝ']
				þ/_/_/_/o/ȝ(CAAAVC)
þ/_/_/_/_/o/ȝ(CAAAAVC)
				version split: ['þ', '_', '_', '_', 'o', 'ȝ']
				{'string': 'þ/_/_/_/o/ȝ', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'o', 'ȝ']
				version split: ['þ', '_', '_', '_', '_', 'o', 'ȝ']
				{'string': 'þ/_/_/_/_/o', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'o', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/_/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n']
				þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/_/u/n(CAAAAAC)
þ/_/_/_/_/u/n(CAAAAAC)
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/_/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/_/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					> version: þ/_/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> k, u, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/_/u/n/c/h(CAAAAACCC)
þ/_/_/_/_/u/n/c/h(CAAAAACCC)
þ/_/_/_/_/u/n/ch(CAAAAACC)
þ/_/_/_/_/u/n/ch(CAAAAACC)
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					> version: þ/y/_/_/n/k
					TRYING: n
					adding blocked set: C = C >> k, n, _, h
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', '_', '_', 'n', 'k']
				þ/y/_/_/n/k(CAAACC)
þ/y/_/_/n/k(CAAACC)
þ/y/_/_/_/n/k(CAAAACC)
þ/y/_/_/_/n/k(CAAAACC)
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/n/k', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				version split: ['þ', 'y', '_', '_', '_', 'n', 'k']
				{'string': 'þ/y/_/_/_/n', 'rgx': '((þ))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', 'y', '_', '_', '_', 'n', 'k']
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> k, _, z, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ð', 'h', 'e', 'n', 'k']
		SPLIT: ['t', 'h', 'i', 'n', 'k']
		SPLIT: ['t', 'h', 'o', 'g', 'h']
		SPLIT: ['t', 'h', 'ou', 'g', 'h']
		SPLIT: ['t', 'h', 'ow', 't', 'h']
		SPLIT: ['t', 'h', 'y', 'n', 'k']
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['ð']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['þ', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCC is INVALID
		[{'i', 'ow', 'y', 'e', '_', 'ou', 'o'}, {'g', 'n', 't', '_'}]
		54
		OVERVIEW: version for pattern CCVCC
{'i', 'ow', 'y', 'e', '_', 'ou', 'o'}, {'g', 'n', 't', '_'}
faulty splits: 54
['ð'][''][''][''][''] <-! ðen
['ð'][''][''][''][''] <-! ðenc
['ð'][''][''][''][''] <-! ðench
['ð'][''][''][''][''] <-! ðenke
['ð']['h'][''][''][''] <-! ðhog
['ð']['i'][''][''][''] <-! ðing
['ð'][''][''][''][''] <-! ðod
['ð'][''][''][''][''] <-! ðog
['ð'][''][''][''][''] <-! ðoh
['ð'][''][''][''][''] <-! ðoƿg
[''][''][''][''][''] <-! es
[''][''][''][''][''] <-! s
['t']['h'][''][''][''] <-! thenke
['t']['h'][''][''][''] <-! thnk
['t']['h'][''][''][''] <-! tho
['t']['h'][''][''][''] <-! thoh
['t'][''][''][''][''] <-! toh
['þ'][''][''][''][''] <-! þeink
['þ'][''][''][''][''] <-! þen
['þ'][''][''][''][''] <-! þenc
['þ'][''][''][''][''] <-! þencke
['þ'][''][''][''][''] <-! þeng
['þ'][''][''][''][''] <-! þenge
['þ'][''][''][''][''] <-! þench
['þ'][''][''][''][''] <-! þenche
['þ'][''][''][''][''] <-! þenk
['þ'][''][''][''][''] <-! þenke
['']['y'][''][''][''] <-! yenke
['þ'][''][''][''][''] <-! þeoh
['þ']['i'][''][''][''] <-! þinc
['']['y'][''][''][''] <-! yinge
['þ']['i'][''][''][''] <-! þinch
['þ']['i'][''][''][''] <-! þink
['þ']['i'][''][''][''] <-! þinke
['þ'][''][''][''][''] <-! þoð
['þ'][''][''][''][''] <-! þogh
['þ'][''][''][''][''] <-! þoh
['']['y'][''][''][''] <-! yoh
['þ'][''][''][''][''] <-! þohh
['þ'][''][''][''][''] <-! þoch
['þ'][''][''][''][''] <-! þou
['þ'][''][''][''][''] <-! þouc
['þ'][''][''][''][''] <-! þouh
['']['y'][''][''][''] <-! youh
['þ'][''][''][''][''] <-! þouht
['þ'][''][''][''][''] <-! þous
['þ'][''][''][''][''] <-! þouth
['þ'][''][''][''][''] <-! þouȝ
['þ'][''][''][''][''] <-! þowth
['þ'][''][''][''][''] <-! þoȝ
['þ'][''][''][''][''] <-! þun
['þ'][''][''][''][''] <-! þunch
['þ']['y'][''][''][''] <-! þynk
[''][''][''][''][''] <-! zenke
ð | h | e | n | k
t | h | i | n | k
t | h | o | g | h
t | h | ou | g | h
t | h | ow | t | h
t | h | y | n | k
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['h'] | ['_'] | ['_'] | ['_']
['ð'] | ['i'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['ð'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_']
['t'] | ['_'] | ['_'] | ['_'] | ['_']
þ | _ | _ | _ | _
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['i'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['y'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_']
['þ'] | ['y'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'},{'i', '_', 's', 'h'}
2 : {'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'eo', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'u', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'oƿ', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ei', 'ou', 'o'},{'i', 'ow', 'y', 'e', '_', 'ou', 'o'}
3 : {'n', 'g', 'u', '_', 't'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'},{'n', 'g', '_', 'ng', 't'},{'i', 'n', 'g', '_', 't'},{'i', 'n', 'g', '_', 't'},{'g', 'n', 't', '_'},{'n', 'g', 'u', '_', 't'},{'g', 'n', 't', '_'},{'n', 'g', 'u', '_', 't'},{'g', 'n', 't', '_'},{'n', 'g', 'u', '_', 't'},{'g', 'n', 't', '_'},{'n', 'g', '_', 'ng', 't'},{'g', 'n', 't', '_'},{'n', 'g', 'u', '_', 't'},{'n', 'g', '_', 'z', 't'},{'n', 'g', '_', 's', 't'},{'g', 'n', 't', '_'},{'n', 'g', 'u', '_', 't'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'},{'i', 'n', 'g', '_', 't'},{'i', 'n', 'g', '_', 't'},{'g', 'n', 't', '_'},{'g', 'n', 't', '_'}
4 : {'k', 'n', '_', 'h'},{'i', 'k', '_', 'h'},{'ng', 'k', '_', 'h'},{'k', 'n', '_', 'h'},{'i', 'k', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'i', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'k', '_', 'z', 'h'},{'k', 'u', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'u', '_', 'h'},{'ng', 'k', '_', 'h'},{'k', 'u', '_', 'h'},{'i', 'k', '_', 'h'},{'k', '_', 's', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'u', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'u', '_', 'h'},{'k', 'n', '_', 'h'},{'k', 'n', '_', 'h'}
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 3}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 3}, {'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 4}], [{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}], [{'lit': 'gh', 'ln': 2, 'index': 4}, {'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ou', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'th', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'th', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ei', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ck', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ye', 'ln': 2, 'index': 0}]]
	[[{'lit': 'eo', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	MIN pattern length=5
	Pattern CVVC is invalid
	Pattern VVC is invalid
	Pattern CVCCCV is valid
	Pattern CCC is invalid
	Pattern CVCCV is valid
	Pattern C is invalid
	Pattern CVCC is invalid
	Pattern VCCV is invalid
	Pattern VC is invalid
	Pattern CCVC is invalid
	Pattern CCCCV is invalid
	Pattern CCVCCC is valid
	Pattern CVVCC is valid
	Pattern VVCCV is valid
	Pattern CV is invalid
	Pattern CCCCC is invalid
	Pattern CVV is invalid
	Pattern CCVVC is valid
	Pattern VVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCV is invalid
	Pattern CCCC is invalid
	Pattern CCVVCC is valid
	Pattern CVC is invalid
	Pattern CCV is invalid
	Pattern CCCV is invalid
	Pattern CCVCC is valid
	Pattern CCVCCV is valid
	Pattern VVCV is invalid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: ð
					> version: ð/e/n/ch
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/n/g
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					> version: ð/i/ng
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'd']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'h']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: ð
					> version: ð/oƿ/g
					TRYING: ð
					RESULT:  ['ð']
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð', 'rgx': '((ð))$'}
				ANALYSING: es
					resolving (1)
					> version: e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'e', 's']
				e/s(VC)
_/e/s(AVC)
				version split: ['e', 's']
				{'string': 'e', 'rgx': '((_))$'}
				_____REMOVING________['e', 's']
				version split: ['_', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: s
					resolving (1)
					> version: s
					TRYING: s
					adding blocked set: C = C >> ð, _, t, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 's']
				s(C)
_/s(AC)
				version split: ['s']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s']
				version split: ['_', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: think
					resolving (4)
					> version: t/h/i/n/k
					TRYING: t
					> version: t/h/i/n/k
					TRYING: t
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/i/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				version split: ['th', 'i', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (2)
					> version: t/h/n/k
					TRYING: t
					> version: th/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'n', 'k']
				ANALYSING: tho
					resolving (2)
					> version: t/h/o
					TRYING: t
					> version: th/o
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o']
				ANALYSING: thogh
					resolving (4)
					> version: t/h/o/g/h
					TRYING: t
					> version: t/h/o/gh
					TRYING: t
					> version: th/o/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'g', 'h']
				version split: ['th', 'o', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'gh']
				ANALYSING: thoh
					resolving (2)
					> version: t/h/o/h
					TRYING: t
					> version: th/o/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'h']
				ANALYSING: though
					resolving (12)
					> version: t/h/o/u/g/h
					TRYING: t
					> version: t/h/o/u/g/h
					TRYING: t
					> version: t/h/o/u/gh
					TRYING: t
					> version: t/h/o/u/gh
					TRYING: t
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/u/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: t/h/ou/g/h
					TRYING: t
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/o/u/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: t/h/ou/gh
					TRYING: t
					> version: th/ou/g/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/ou/gh
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['th', 'o', 'u', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['th', 'o', 'u', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'u', 'gh']
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'ou', 'g', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'ou', 'g', 'h']
				version split: ['th', 'ou', 'gh']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'ou', 'gh']
				ANALYSING: thowth
					resolving (4)
					> version: t/h/o/w/t/h
					TRYING: t
					> version: th/o/w/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: t/h/ow/t/h
					TRYING: t
					> version: th/ow/t/h
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'o', 'w', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'ow', 't', 'h']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (4)
					> version: t/h/y/n/k
					TRYING: t
					> version: t/h/y/n/k
					TRYING: t
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					> version: th/y/n/k
					TRYING: th
					adding blocked set: C = C >> ð, _, t, th
					RESULT:  ['t']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't', 'rgx': '((t))$'}
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				version split: ['th', 'y', 'n', 'k']
				{'string': 'th', 'rgx': '((t))$'}
				_____REMOVING________['th', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: t
					RESULT:  ['t']
				version split: ['t', 'o', 'h']
				{'string': 't', 'rgx': '((t))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/e/i/n/k
					TRYING: þ
					> version: þ/ei/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: þ
					> version: þ/e/n/ck/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: þ
					> version: þ/e/ng
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: þ
					> version: þ/e/ng/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: þ
					> version: þ/e/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: þ
					> version: þ/e/n/ch/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yenke
					resolving (3)
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/e/n/k/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: ye/n/k/e
					TRYING: ye
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'y', 'e', 'n', 'k', 'e']
				adding dashed alternative: ['_', 'ye', 'n', 'k', 'e']
				y/e/n/k/e(CVCCV)
y/e/n/k/e(VVCCV)
ye/n/k/e(VCCV)
_/y/e/n/k/e(AAVCCV)
_/y/e/n/k/e(AAVCCV)
_/ye/n/k/e(AVCCV)
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['y', 'e', 'n', 'k', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'e', 'n', 'k', 'e']
				version split: ['ye', 'n', 'k', 'e']
				{'string': 'ye', 'rgx': '((_))$'}
				_____REMOVING________['ye', 'n', 'k', 'e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: þ
					> version: þ/eo/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'eo', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: þ
					> version: þ/i/n/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yinge
					resolving (4)
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/n/g/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/i/ng/e
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', 'i', 'ng', 'e']
				y/i/n/g/e(CCCCV)
y/i/n/g/e(VVCCV)
y/i/ng/e(CCCV)
y/i/ng/e(VVCV)
_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'n', 'g', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'n', 'g', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['y', 'i', 'ng', 'e']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/c/h
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					> version: þ/i/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: þ
					> version: þ/i/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: þ
					> version: þ/i/n/k/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ð']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: þ
					> version: þ/o/gh
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'gh']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: yoh
					resolving (2)
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'h']
				y/o/h(CVC)
y/o/h(VVC)
_/y/o/h(AAVC)
_/y/o/h(AAVC)
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['y', 'o', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: þ
					> version: þ/o/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: þ
					> version: þ/o/u
					TRYING: þ
					> version: þ/ou
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/o/u/c
					TRYING: þ
					> version: þ/ou/c
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'c']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/o/u/h
					TRYING: þ
					> version: þ/ou/h
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: youh
					resolving (4)
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/o/u/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					> version: y/ou/h
					TRYING: y
					adding blocked set: C = C >> y, þ, ð, _, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				adding dashed alternative: ['_', 'y', 'ou', 'h']
				y/o/u/h(CVCC)
y/o/u/h(VVVC)
y/ou/h(CVC)
y/ou/h(VVC)
_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'o', 'u', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'o', 'u', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['y', 'ou', 'h']
				{'string': 'y', 'rgx': '((_))$'}
				_____REMOVING________['y', 'ou', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/o/u/h/t
					TRYING: þ
					> version: þ/ou/h/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/o/u/s
					TRYING: þ
					> version: þ/ou/s
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 's']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/t/h
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/o/u/th
					TRYING: þ
					> version: þ/ou/t/h
					TRYING: þ
					> version: þ/ou/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/o/u/ȝ
					TRYING: þ
					> version: þ/ou/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: þ
					> version: þ/o/w/th
					TRYING: þ
					> version: þ/ow/t/h
					TRYING: þ
					> version: þ/ow/th
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'ow', 'th']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: þ
					> version: þ/u/n
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/c/h
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					> version: þ/u/n/ch
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: þ
					> version: þ/y/n/k
					TRYING: þ
					RESULT:  ['þ']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ', 'rgx': '((þ))$'}
				ANALYSING: zenke
					resolving (1)
					> version: z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> þ, ð, _, z, t
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'e', 'n', 'k', 'e']
				z/e/n/k/e(CVCCV)
_/z/e/n/k/e(ACVCCV)
				version split: ['z', 'e', 'n', 'k', 'e']
				{'string': 'z', 'rgx': '((_))$'}
				_____REMOVING________['z', 'e', 'n', 'k', 'e']
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCCV : 1___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n']
				ð/e/n(CVC)
ð/_/e/n(CAVC)
				version split: ['ð', 'e', 'n']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c']
				ð/e/n/c(CVCC)
ð/_/e/n/c(CAVCC)
				version split: ['ð', 'e', 'n', 'c']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/e/n/c/h
					TRYING: e
					> version: ð/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch']
				ð/e/n/c/h(CVCCC)
ð/e/n/ch(CVCC)
ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
				version split: ['ð', 'e', 'n', 'c', 'h']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'c', 'h']
				version split: ['ð', 'e', 'n', 'ch']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'k', 'e']
				ð/e/n/k/e(CVCCV)
ð/_/e/n/k/e(CAVCCV)
				version split: ['ð', 'e', 'n', 'k', 'e']
				{'string': 'ð/e', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'e', 'n', 'k', 'e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h', 'rgx': '((ð))/((h))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/n/g
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					> version: ð/i/ng
					TRYING: i
					RESULT:  ['i']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i', 'rgx': '((ð))/((i))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/o/d
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'd']
				ð/o/d(CVC)
ð/_/o/d(CAVC)
				version split: ['ð', 'o', 'd']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'd']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/o/g
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g']
				ð/o/g(CVC)
ð/_/o/g(CAVC)
				version split: ['ð', 'o', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'h']
				ð/o/h(CVC)
ð/_/o/h(CAVC)
				version split: ['ð', 'o', 'h']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'h']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/o/ƿ/g
					TRYING: o
					> version: ð/oƿ/g
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'ƿ', 'g']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g']
				ð/o/ƿ/g(CVCC)
ð/oƿ/g(CVC)
ð/_/o/ƿ/g(CAVCC)
ð/_/oƿ/g(CAVC)
				version split: ['ð', 'o', 'ƿ', 'g']
				{'string': 'ð/o', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'o', 'ƿ', 'g']
				version split: ['ð', 'oƿ', 'g']
				{'string': 'ð/oƿ', 'rgx': '((ð))/((_))$'}
				_____REMOVING________['ð', 'oƿ', 'g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_', 'rgx': '((ð))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/e/s
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', 's']
				_/e/s(AVC)
_/_/e/s(AAVC)
				version split: ['_', 'e', 's']
				{'string': '_/e', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'e', 's']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/s
					TRYING: s
					adding blocked set: C = C >> i, _, s, h
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's']
				_/s(AC)
_/_/s(AAC)
				version split: ['_', 's']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's']
				version split: ['_', '_', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: h
					> version: t/h/i/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: h
					> version: t/h/o/gh
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: though
					resolving (6)
					> version: t/h/o/u/g/h
					TRYING: h
					> version: t/h/o/u/g/h
					TRYING: h
					> version: t/h/o/u/gh
					TRYING: h
					> version: t/h/o/u/gh
					TRYING: h
					> version: t/h/ou/g/h
					TRYING: h
					> version: t/h/ou/gh
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: h
					> version: t/h/ow/t/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: h
					> version: t/h/y/n/k
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h', 'rgx': '((t))/((h))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', 'h']
				t/o/h(CVC)
t/_/o/h(CAVC)
				version split: ['t', 'o', 'h']
				{'string': 't/o', 'rgx': '((t))/((_))$'}
				_____REMOVING________['t', 'o', 'h']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_', 'rgx': '((t))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_']
				þ(C)
þ/_(CA)
				version split: ['þ']
				{'string': 'þ', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ']
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/e/i/n/k
					TRYING: e
					> version: þ/ei/n/k
					TRYING: ei
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'ei', 'n', 'k']
				þ/e/i/n/k(CVCCC)
þ/e/i/n/k(CVVCC)
þ/ei/n/k(CVCC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/ei/n/k(CAVCC)
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'e', 'i', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'i', 'n', 'k']
				version split: ['þ', 'ei', 'n', 'k']
				{'string': 'þ/ei', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ei', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/e/n
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n']
				þ/e/n(CVC)
þ/_/e/n(CAVC)
				version split: ['þ', 'e', 'n']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/e/n/c
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c']
				þ/e/n/c(CVCC)
þ/_/e/n/c(CAVCC)
				version split: ['þ', 'e', 'n', 'c']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/e/n/c/k/e
					TRYING: e
					> version: þ/e/n/ck/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ck', 'e']
				þ/e/n/c/k/e(CVCCCV)
þ/e/n/ck/e(CVCCV)
þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/ck/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', 'e', 'n', 'ck', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ck', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/e/n/g
					TRYING: e
					> version: þ/e/ng
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng']
				þ/e/n/g(CVCC)
þ/e/ng(CVC)
þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
				version split: ['þ', 'e', 'n', 'g']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g']
				version split: ['þ', 'e', 'ng']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/e/n/g/e
					TRYING: e
					> version: þ/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', 'e']
				þ/e/n/g/e(CVCCV)
þ/e/ng/e(CVCV)
þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
				version split: ['þ', 'e', 'n', 'g', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'g', 'e']
				version split: ['þ', 'e', 'ng', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/e/n/c/h
					TRYING: e
					> version: þ/e/n/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch']
				þ/e/n/c/h(CVCCC)
þ/e/n/ch(CVCC)
þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
				version split: ['þ', 'e', 'n', 'c', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h']
				version split: ['þ', 'e', 'n', 'ch']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/e/n/c/h/e
					TRYING: e
					> version: þ/e/n/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', 'e']
				þ/e/n/c/h/e(CVCCCV)
þ/e/n/ch/e(CVCCV)
þ/_/e/n/c/h/e(CAVCCCV)
þ/_/e/n/ch/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', 'e', 'n', 'ch', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'ch', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/e/n/k
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k']
				þ/e/n/k(CVCC)
þ/_/e/n/k(CAVCC)
				version split: ['þ', 'e', 'n', 'k']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/e/n/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', 'e']
				þ/e/n/k/e(CVCCV)
þ/_/e/n/k/e(CAVCCV)
				version split: ['þ', 'e', 'n', 'k', 'e']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'n', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yenke
					resolving (3)
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/y/e/n/k/e
					TRYING: y
					> version: _/ye/n/k/e
					TRYING: ye
					RESULT:  ['y']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'ye', 'n', 'k', 'e']
				{'string': '_/ye', 'rgx': '((_))/((y))$'}
				_____REMOVING________['_', 'ye', 'n', 'k', 'e']
				ANALYSING: þeoh
					resolving (2)
					> version: þ/e/o/h
					TRYING: e
					> version: þ/eo/h
					TRYING: eo
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'o', 'h']
				adding dashed alternative: ['þ', '_', 'eo', 'h']
				þ/e/o/h(CVVC)
þ/eo/h(CVC)
þ/_/e/o/h(CAVVC)
þ/_/eo/h(CAVC)
				version split: ['þ', 'e', 'o', 'h']
				{'string': 'þ/e', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'e', 'o', 'h']
				version split: ['þ', 'eo', 'h']
				{'string': 'þ/eo', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'eo', 'h']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: i
					> version: þ/i/n/c
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/n/g/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					> version: _/y/i/ng/e
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/c/h
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					> version: þ/i/n/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: i
					> version: þ/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: i
					> version: þ/i/n/k/e
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i', 'rgx': '((þ))/((i))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/o/ð
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ð']
				þ/o/ð(CVC)
þ/_/o/ð(CAVC)
				version split: ['þ', 'o', 'ð']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ð']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/o/g/h
					TRYING: o
					> version: þ/o/gh
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'gh']
				þ/o/g/h(CVCC)
þ/o/gh(CVC)
þ/_/o/g/h(CAVCC)
þ/_/o/gh(CAVC)
				version split: ['þ', 'o', 'g', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'g', 'h']
				version split: ['þ', 'o', 'gh']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'gh']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h']
				þ/o/h(CVC)
þ/_/o/h(CAVC)
				version split: ['þ', 'o', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: y
					> version: _/y/o/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/o/h/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'h', 'h']
				þ/o/h/h(CVCC)
þ/_/o/h/h(CAVCC)
				version split: ['þ', 'o', 'h', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/o/c/h
					TRYING: o
					> version: þ/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'ch']
				þ/o/c/h(CVCC)
þ/o/ch(CVC)
þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
				version split: ['þ', 'o', 'c', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'c', 'h']
				version split: ['þ', 'o', 'ch']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ch']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/o/u
					TRYING: o
					> version: þ/o/u
					TRYING: o
					> version: þ/ou
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'o', 'u']
				adding dashed alternative: ['þ', '_', 'ou']
				þ/o/u(CVC)
þ/o/u(CVV)
þ/ou(CV)
þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'o', 'u']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u']
				version split: ['þ', 'ou']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/o/u/c
					TRYING: o
					> version: þ/o/u/c
					TRYING: o
					> version: þ/ou/c
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', 'c']
				þ/o/u/c(CVCC)
þ/o/u/c(CVVC)
þ/ou/c(CVC)
þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'o', 'u', 'c']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'c']
				version split: ['þ', 'ou', 'c']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/o/u/h
					TRYING: o
					> version: þ/o/u/h
					TRYING: o
					> version: þ/ou/h
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'h']
				þ/o/u/h(CVCC)
þ/o/u/h(CVVC)
þ/ou/h(CVC)
þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'o', 'u', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h']
				version split: ['þ', 'ou', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/o/u/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					> version: _/y/ou/h
					TRYING: y
					RESULT:  ['y']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y', 'rgx': '((_))/((y))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/o/u/h/t
					TRYING: o
					> version: þ/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', 'h', 't']
				þ/o/u/h/t(CVCCC)
þ/o/u/h/t(CVVCC)
þ/ou/h/t(CVCC)
þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'o', 'u', 'h', 't']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'h', 't']
				version split: ['þ', 'ou', 'h', 't']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/o/u/s
					TRYING: o
					> version: þ/o/u/s
					TRYING: o
					> version: þ/ou/s
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', 's']
				þ/o/u/s(CVCC)
þ/o/u/s(CVVC)
þ/ou/s(CVC)
þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'o', 'u', 's']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 's']
				version split: ['þ', 'ou', 's']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/t/h
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/o/u/th
					TRYING: o
					> version: þ/ou/t/h
					TRYING: ou
					> version: þ/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', 'th']
				þ/o/u/t/h(CVCCC)
þ/o/u/t/h(CVVCC)
þ/o/u/th(CVCC)
þ/o/u/th(CVVC)
þ/ou/t/h(CVCC)
þ/ou/th(CVC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 't', 'h']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'o', 'u', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'th']
				version split: ['þ', 'ou', 't', 'h']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 't', 'h']
				version split: ['þ', 'ou', 'th']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'th']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/o/u/ȝ
					TRYING: o
					> version: þ/ou/ȝ
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', 'ȝ']
				þ/o/u/ȝ(CVCC)
þ/o/u/ȝ(CVVC)
þ/ou/ȝ(CVC)
þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'o', 'u', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'u', 'ȝ']
				version split: ['þ', 'ou', 'ȝ']
				{'string': 'þ/ou', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/o/w/t/h
					TRYING: o
					> version: þ/o/w/th
					TRYING: o
					> version: þ/ow/t/h
					TRYING: ow
					> version: þ/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', 'w', 'th']
				adding dashed alternative: ['þ', '_', 'ow', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ow', 'th']
				þ/o/w/t/h(CVCCC)
þ/o/w/th(CVCC)
þ/ow/t/h(CVCC)
þ/ow/th(CVC)
þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/ow/t/h(CAVCC)
þ/_/ow/th(CAVC)
				version split: ['þ', 'o', 'w', 't', 'h']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 't', 'h']
				version split: ['þ', 'o', 'w', 'th']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'w', 'th']
				version split: ['þ', 'ow', 't', 'h']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 't', 'h']
				version split: ['þ', 'ow', 'th']
				{'string': 'þ/ow', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'ow', 'th']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/o/ȝ
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'ȝ']
				þ/o/ȝ(CVC)
þ/_/o/ȝ(CAVC)
				version split: ['þ', 'o', 'ȝ']
				{'string': 'þ/o', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'o', 'ȝ']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', 'u', 'n']
				þ/u/n(CCC)
þ/u/n(CVC)
þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', 'u', 'n']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					> version: þ/u/n/ch
					TRYING: u
					adding blocked set: C = C >> i, y, h, u, _
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', 'u', 'n', 'ch']
				þ/u/n/c/h(CCCCC)
þ/u/n/c/h(CVCCC)
þ/u/n/ch(CCCC)
þ/u/n/ch(CVCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'c', 'h']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'c', 'h']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', 'u', 'n', 'ch']
				{'string': 'þ/u', 'rgx': '((þ))/((_))$'}
				_____REMOVING________['þ', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_', 'rgx': '((þ))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: y
					> version: þ/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y', 'rgx': '((þ))/((y))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> i, y, h, _, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				_/z/e/n/k/e(ACVCCV)
_/_/z/e/n/k/e(AACVCCV)
				version split: ['_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/z', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVCCV : 2___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: e
					> version: ð/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e', 'rgx': '((ð))/((_))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e', 'rgx': '((ð))/((h))/((e))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o', 'rgx': '((ð))/((h))/((o))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/n/g
					TRYING: n
					> version: ð/i/ng
					TRYING: ng
					> version: ð/i/ng
					TRYING: ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				adding dashed alternative: ['ð', 'i', '_', 'ng']
				ð/i/n/g(CCCC)
ð/i/n/g(CVCC)
ð/i/ng(CCC)
ð/i/ng(CVC)
ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'n', 'g']
				{'string': 'ð/i/n', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'n', 'g']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', 'ng']
				{'string': 'ð/i/ng', 'rgx': '((ð))/((i))/((_))$'}
				_____REMOVING________['ð', 'i', 'ng']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_', 'rgx': '((ð))/((i))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((o))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: o
					> version: ð/_/oƿ/g
					TRYING: oƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'oƿ', 'o'}
					RESULT:  ['oƿ', 'o']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e', 'rgx': '((_))/((_))/((e))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's']
				_/_/s(AAC)
_/_/_/s(AAAC)
				version split: ['_', '_', 's']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's']
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					> version: t/h/i/n/k
					TRYING: i
					adding blocked set: V = V >> i, e, _, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'i', 'n', 'k']
				t/h/i/n/k(CCCCC)
t/h/i/n/k(CCVCC)
t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', 'i', 'n', 'k']
				{'string': 't/h/i', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k']
				t/h/n/k(CCCC)
t/h/_/n/k(CCACC)
				version split: ['t', 'h', 'n', 'k']
				{'string': 't/h/n', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: o
					> version: t/h/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				ANALYSING: though
					resolving (6)
					> version: t/h/o/u/g/h
					TRYING: o
					> version: t/h/o/u/g/h
					TRYING: o
					> version: t/h/o/u/gh
					TRYING: o
					> version: t/h/o/u/gh
					TRYING: o
					> version: t/h/ou/g/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: t/h/ou/gh
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o)|(ou))$'}
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o)|(ou))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o)|(ou))$'}
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o)|(ou))$'}
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't/h/ou', 'rgx': '((t))/((h))/((o)|(ou))$'}
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't/h/ou', 'rgx': '((t))/((h))/((o)|(ou))$'}
				ANALYSING: thowth
					resolving (2)
					> version: t/h/o/w/t/h
					TRYING: o
					> version: t/h/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					RESULT:  ['o']
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))$'}
				version split: ['t', 'h', 'ow', 't', 'h']
				{'string': 't/h/ow', 'rgx': '((t))/((h))/((o))$'}
				_____REMOVING________['t', 'h', 'ow', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, ou, oƿ, o
					> version: t/h/y/n/k
					TRYING: y
					adding blocked set: V = V >> y, e, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', 'y', 'n', 'k']
				t/h/y/n/k(CCCCC)
t/h/y/n/k(CCVCC)
t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', 'y', 'n', 'k']
				{'string': 't/h/y', 'rgx': '((t))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_', 'rgx': '((t))/((h))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o', 'rgx': '((t))/((_))/((o))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_']
				þ/_(CA)
þ/_/_(CAA)
				version split: ['þ', '_']
				{'string': 'þ/_', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_']
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (3)
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/e/i/n/k
					TRYING: e
					> version: þ/_/ei/n/k
					TRYING: ei
					adding blocked set: V = V >> e, _, ei, ou, oƿ, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'ei', 'n', 'k']
				{'string': 'þ/_/ei', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'ei', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: e
					> version: þ/_/e/n/ck/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: e
					> version: þ/_/e/ng
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: e
					> version: þ/_/e/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: e
					> version: þ/_/e/n/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: e
					> version: þ/_/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e', 'rgx': '((_))/((y))/((e))$'}
				ANALYSING: þeoh
					resolving (2)
					> version: þ/_/e/o/h
					TRYING: e
					> version: þ/_/eo/h
					TRYING: eo
					adding blocked set: V = V >> e, _, ou, oƿ, eo, o
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e', 'rgx': '((þ))/((_))/((e))$'}
				version split: ['þ', '_', 'eo', 'h']
				{'string': 'þ/_/eo', 'rgx': '((þ))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'eo', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/n/c
					TRYING: n
					> version: þ/i/n/c
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c']
				þ/i/n/c(CCCC)
þ/i/n/c(CVCC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', 'n', 'c']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, ou, oƿ, o
					> version: _/y/i/n/g/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, ou, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, ou, oƿ, o
					> version: _/y/i/ng/e
					TRYING: i
					adding blocked set: V = V >> i, e, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', 'i', 'ng', 'e']
				_/y/i/n/g/e(AAACCV)
_/y/i/n/g/e(AAACCV)
_/y/i/ng/e(AAACV)
_/y/i/ng/e(AAACV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'n', 'g', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', 'i', 'ng', 'e']
				{'string': '_/y/i', 'rgx': '((_))/((y))/((_))$'}
				_____REMOVING________['_', 'y', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_', 'rgx': '((_))/((y))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/c/h
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					> version: þ/i/n/ch
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch']
				þ/i/n/c/h(CCCCC)
þ/i/n/c/h(CVCCC)
þ/i/n/ch(CCCC)
þ/i/n/ch(CVCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'c', 'h']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'c', 'h']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', 'n', 'ch']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/n/k
					TRYING: n
					> version: þ/i/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k']
				þ/i/n/k(CCCC)
þ/i/n/k(CVCC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', 'n', 'k']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/n/k/e
					TRYING: n
					> version: þ/i/n/k/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', 'e']
				þ/i/n/k/e(CCCCV)
þ/i/n/k/e(CVCCV)
þ/i/_/n/k/e(CAACCV)
þ/i/_/n/k/e(CAACCV)
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', 'n', 'k', 'e']
				{'string': 'þ/i/n', 'rgx': '((þ))/((i))/((_))$'}
				_____REMOVING________['þ', 'i', 'n', 'k', 'e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_', 'rgx': '((þ))/((i))/((_))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: o
					> version: þ/_/o/gh
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: o
					> version: _/y/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: o
					> version: þ/_/o/ch
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/o/u
					TRYING: o
					> version: þ/_/ou
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/o/u/c
					TRYING: o
					> version: þ/_/ou/c
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/o/u/h
					TRYING: o
					> version: þ/_/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/o/u/h
					TRYING: o
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: _/y/ou/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou', 'rgx': '((_))/((y))/((o)|(ou))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/o/u/h/t
					TRYING: o
					> version: þ/_/ou/h/t
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/o/u/s
					TRYING: o
					> version: þ/_/ou/s
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/t/h
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/o/u/th
					TRYING: o
					> version: þ/_/ou/t/h
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					> version: þ/_/ou/th
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/o/u/ȝ
					TRYING: o
					> version: þ/_/ou/ȝ
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'o', 'ou'}
					RESULT:  ['o', 'ou']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))$'}
				ANALYSING: þowth
					resolving (4)
					> version: þ/_/o/w/t/h
					TRYING: o
					> version: þ/_/o/w/th
					TRYING: o
					> version: þ/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					> version: þ/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, _, ou, oƿ, o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				version split: ['þ', '_', 'ow', 't', 'h']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 't', 'h']
				version split: ['þ', '_', 'ow', 'th']
				{'string': 'þ/_/ow', 'rgx': '((þ))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'ow', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o', 'rgx': '((þ))/((_))/((o))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n']
				þ/_/u/n(CAAC)
þ/_/u/n(CAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', 'u', 'n']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/c/h
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					> version: þ/_/u/n/ch
					TRYING: u
					adding blocked set: V = V >> e, u, _, ou, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', 'u', 'n', 'ch']
				þ/_/u/n/c/h(CAACCC)
þ/_/u/n/c/h(CAACCC)
þ/_/u/n/ch(CAACC)
þ/_/u/n/ch(CAACC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/u', 'rgx': '((þ))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/n/k
					TRYING: n
					> version: þ/y/n/k
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k']
				þ/y/n/k(CCCC)
þ/y/n/k(CVCC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', 'n', 'k']
				{'string': 'þ/y/n', 'rgx': '((þ))/((y))/((_))$'}
				_____REMOVING________['þ', 'y', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_', 'rgx': '((þ))/((y))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/z/e/n/k/e(AACVCCV)
_/_/_/z/e/n/k/e(AAACVCCV)
				version split: ['_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/z', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVCCV : 3___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: n
					> version: ð/_/e/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n', 'rgx': '((ð))/((h))/((e))/((n))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o/g', 'rgx': '((ð))/((h))/((o))/((g))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/n/g
					TRYING: n
					> version: ð/i/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: ð/i/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n', 'rgx': '((ð))/((i))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((ng)|(n))$'}
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((ng)|(n))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/d
					TRYING: d
					adding blocked set: C = C >> g, ng, n, d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'd']
				ð/_/o/d(CAVC)
ð/_/o/_/d(CAVAC)
				version split: ['ð', '_', 'o', 'd']
				{'string': 'ð/_/o/d', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'd']
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o/g', 'rgx': '((ð))/((_))/((o))/((g))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'h']
				ð/_/o/h(CAVC)
ð/_/o/_/h(CAVAC)
				version split: ['ð', '_', 'o', 'h']
				{'string': 'ð/_/o/h', 'rgx': '((ð))/((_))/((o))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'h']
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_', 'rgx': '((ð))/((_))/((o))/((_))$'}
				ANALYSING: ðoƿg
					resolving (2)
					> version: ð/_/o/ƿ/g
					TRYING: ƿ
					adding blocked set: C = C >> n, g, _, ƿ, ng
					> version: ð/_/oƿ/g
					TRYING: g
					RESULT:  ['g']
				version split: ['ð', '_', 'o', 'ƿ', 'g']
				{'string': 'ð/_/o/ƿ', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))$'}
				_____REMOVING________['ð', '_', 'o', 'ƿ', 'g']
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', 's']
				_/_/e/s(AAVC)
_/_/e/_/s(AAVAC)
				version split: ['_', '_', 'e', 's']
				{'string': '_/_/e/s', 'rgx': '((_))/((_))/((e))/((_))$'}
				_____REMOVING________['_', '_', 'e', 's']
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_', 'rgx': '((_))/((_))/((e))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's']
				_/_/_/s(AAAC)
_/_/_/_/s(AAAAC)
				version split: ['_', '_', '_', 's']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's']
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: t/h/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', 'i', 'n', 'k']
				t/h/_/i/n/k(CCAACC)
t/h/_/i/n/k(CCAACC)
t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/i/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', 'i', 'n', 'k']
				{'string': 't/h/_/i', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n', 'rgx': '((t))/((h))/((_))/((n))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_']
				t/h/o(CCV)
t/h/o/_(CCVA)
				version split: ['t', 'h', 'o']
				{'string': 't/h/o', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o']
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thogh
					resolving (2)
					> version: t/h/o/g/h
					TRYING: g
					> version: t/h/o/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g', 'rgx': '((t))/((h))/((o))/((g))$'}
				version split: ['t', 'h', 'o', 'gh']
				{'string': 't/h/o/gh', 'rgx': '((t))/((h))/((o))/((g))$'}
				_____REMOVING________['t', 'h', 'o', 'gh']
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'h']
				t/h/o/h(CCVC)
t/h/o/_/h(CCVAC)
				version split: ['t', 'h', 'o', 'h']
				{'string': 't/h/o/h', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'h']
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: though
					resolving (6)
					> version: t/h/o/u/g/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: t/h/o/u/g/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: t/h/o/u/gh
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: t/h/o/u/gh
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: t/h/ou/g/h
					TRYING: g
					> version: t/h/ou/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h/o/u', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'g', 'h']
				{'string': 't/h/o/u', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'g', 'h']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h/o/u', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['t', 'h', 'o', 'u', 'gh']
				{'string': 't/h/o/u', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				_____REMOVING________['t', 'h', 'o', 'u', 'gh']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't/h/ou/g', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				version split: ['t', 'h', 'ou', 'gh']
				{'string': 't/h/ou/gh', 'rgx': '((t))/((h))/((o)|(ou))/((g))$'}
				_____REMOVING________['t', 'h', 'ou', 'gh']
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'w', 't', 'h']
				t/h/o/w/t/h(CCVCCC)
t/h/o/_/w/t/h(CCVACCC)
				version split: ['t', 'h', 'o', 'w', 't', 'h']
				{'string': 't/h/o/w', 'rgx': '((t))/((h))/((o))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, n, g, _, ng
					> version: t/h/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', 'y', 'n', 'k']
				t/h/_/y/n/k(CCAACC)
t/h/_/y/n/k(CCAACC)
t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/y/n/k(CCAAACC)
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', 'y', 'n', 'k']
				{'string': 't/h/_/y', 'rgx': '((t))/((h))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_', 'rgx': '((t))/((h))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', 'h']
				t/_/o/h(CAVC)
t/_/o/_/h(CAVAC)
				version split: ['t', '_', 'o', 'h']
				{'string': 't/_/o/h', 'rgx': '((t))/((_))/((o))/((_))$'}
				_____REMOVING________['t', '_', 'o', 'h']
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_', 'rgx': '((t))/((_))/((o))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_']
				þ/_/_(CAA)
þ/_/_/_(CAAA)
				version split: ['þ', '_', '_']
				{'string': 'þ/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_']
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: þ/_/e/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				þ/_/e/i/n/k(CAVACC)
þ/_/e/i/n/k(CAVACC)
þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/i/n/k(CAVAACC)
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', 'i', 'n', 'k']
				{'string': 'þ/_/e/i', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: n
					> version: þ/_/e/n/ck/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: n
					> version: þ/_/e/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((ng)|(n))$'}
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((ng)|(n))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: n
					> version: þ/_/e/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((ng)|(n))$'}
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((ng)|(n))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: n
					> version: þ/_/e/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: n
					> version: þ/_/e/n/ch/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: n
					> version: _/y/e/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((n))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n', 'rgx': '((_))/((y))/((e))/((n))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', 'o', 'h']
				þ/_/e/o/h(CAVVC)
þ/_/e/_/o/h(CAVAVC)
				version split: ['þ', '_', 'e', 'o', 'h']
				{'string': 'þ/_/e/o', 'rgx': '((þ))/((_))/((e))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'o', 'h']
				version split: ['þ', '_', 'e', '_', 'o', 'h']
				{'string': 'þ/_/e/_', 'rgx': '((þ))/((_))/((e))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: n
					> version: þ/i/_/n/c
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					> version: _/y/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, n, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/n/g/e(AAAACCV)
_/y/_/i/ng/e(AAAACV)
_/y/_/i/ng/e(AAAACV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/i', 'rgx': '((_))/((y))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_', 'rgx': '((_))/((y))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/c/h
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					> version: þ/i/_/n/ch
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: n
					> version: þ/i/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: n
					> version: þ/i/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n', 'rgx': '((þ))/((i))/((_))/((n))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/ð
					TRYING: ð
					adding blocked set: C = C >> n, ð, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ð']
				þ/_/o/ð(CAVC)
þ/_/o/_/ð(CAVAC)
				version split: ['þ', '_', 'o', 'ð']
				{'string': 'þ/_/o/ð', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ð']
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þogh
					resolving (2)
					> version: þ/_/o/g/h
					TRYING: g
					> version: þ/_/o/gh
					TRYING: gh
					adding blocked set: C = C >> gh, n, g, _, ng
					RESULT:  ['g']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g', 'rgx': '((þ))/((_))/((o))/((g))$'}
				version split: ['þ', '_', 'o', 'gh']
				{'string': 'þ/_/o/gh', 'rgx': '((þ))/((_))/((o))/((g))$'}
				_____REMOVING________['þ', '_', 'o', 'gh']
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h']
				þ/_/o/h(CAVC)
þ/_/o/_/h(CAVAC)
				version split: ['þ', '_', 'o', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h']
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: _/y/o/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h']
				_/y/o/h(AAVC)
_/y/o/h(AAVC)
_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', 'h']
				{'string': '_/y/o/h', 'rgx': '((_))/((y))/((o))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/h/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h', 'h']
				þ/_/o/h/h(CAVCC)
þ/_/o/_/h/h(CAVACC)
				version split: ['þ', '_', 'o', 'h', 'h']
				{'string': 'þ/_/o/h', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'h', 'h']
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					> version: þ/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> n, g, _, ng, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ch']
				þ/_/o/c/h(CAVCC)
þ/_/o/ch(CAVC)
þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
				version split: ['þ', '_', 'o', 'c', 'h']
				{'string': 'þ/_/o/c', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'c', 'h']
				version split: ['þ', '_', 'o', 'ch']
				{'string': 'þ/_/o/ch', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/u
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u']
				adding dashed alternative: ['þ', '_', 'ou', '_']
				þ/_/o/u(CAVA)
þ/_/o/u(CAVA)
þ/_/ou(CAV)
þ/_/o/_/u(CAVAA)
þ/_/o/_/u(CAVAA)
þ/_/ou/_(CAVA)
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'o', 'u']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u']
				version split: ['þ', '_', 'ou']
				{'string': 'þ/_/ou', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou']
				version split: ['þ', '_', 'o', '_', 'u']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/u/c
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/c
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/c
					TRYING: c
					adding blocked set: C = C >> n, g, _, ng, c
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'c']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'c']
				þ/_/o/u/c(CAVAC)
þ/_/o/u/c(CAVAC)
þ/_/ou/c(CAVC)
þ/_/o/_/u/c(CAVAAC)
þ/_/o/_/u/c(CAVAAC)
þ/_/ou/_/c(CAVAC)
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'o', 'u', 'c']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'c']
				version split: ['þ', '_', 'ou', 'c']
				{'string': 'þ/_/ou/c', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'c']
				version split: ['þ', '_', 'o', '_', 'u', 'c']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'c']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 'c']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'h']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'h']
				þ/_/o/u/h(CAVAC)
þ/_/o/u/h(CAVAC)
þ/_/ou/h(CAVC)
þ/_/o/_/u/h(CAVAAC)
þ/_/o/_/u/h(CAVAAC)
þ/_/ou/_/h(CAVAC)
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'o', 'u', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h']
				version split: ['þ', '_', 'ou', 'h']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h']
				version split: ['þ', '_', 'o', '_', 'u', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 'h']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: _/y/o/u/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: _/y/ou/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					> version: _/y/ou/h
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'o', '_', 'u', 'h']
				adding dashed alternative: ['_', 'y', 'ou', '_', 'h']
				adding dashed alternative: ['_', 'y', 'ou', '_', 'h']
				_/y/o/u/h(AAVAC)
_/y/o/u/h(AAVAC)
_/y/ou/h(AAVC)
_/y/ou/h(AAVC)
_/y/o/_/u/h(AAVAAC)
_/y/o/_/u/h(AAVAAC)
_/y/ou/_/h(AAVAC)
_/y/ou/_/h(AAVAC)
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'o', 'u', 'h']
				{'string': '_/y/o/u', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				_____REMOVING________['_', 'y', 'o', 'u', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'ou', 'h']
				{'string': '_/y/ou/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', 'h']
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/h/t
					TRYING: h
					adding blocked set: C = C >> n, h, g, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'h', 't']
				þ/_/o/u/h/t(CAVACC)
þ/_/o/u/h/t(CAVACC)
þ/_/ou/h/t(CAVCC)
þ/_/o/_/u/h/t(CAVAACC)
þ/_/o/_/u/h/t(CAVAACC)
þ/_/ou/_/h/t(CAVACC)
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'o', 'u', 'h', 't']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'h', 't']
				version split: ['þ', '_', 'ou', 'h', 't']
				{'string': 'þ/_/ou/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'h', 't']
				version split: ['þ', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 'h', 't']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/u/s
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/s
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/s
					TRYING: s
					adding blocked set: C = C >> n, g, _, ng, s
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', '_', 's']
				þ/_/o/u/s(CAVAC)
þ/_/o/u/s(CAVAC)
þ/_/ou/s(CAVC)
þ/_/o/_/u/s(CAVAAC)
þ/_/o/_/u/s(CAVAAC)
þ/_/ou/_/s(CAVAC)
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'o', 'u', 's']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 's']
				version split: ['þ', '_', 'ou', 's']
				{'string': 'þ/_/ou/s', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 's']
				version split: ['þ', '_', 'o', '_', 'u', 's']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 's']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 's']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/t/h
					TRYING: t
					adding blocked set: C = C >> n, g, _, ng, t
					> version: þ/_/ou/th
					TRYING: th
					adding blocked set: C = C >> n, g, th, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'th']
				þ/_/o/u/t/h(CAVACC)
þ/_/o/u/t/h(CAVACC)
þ/_/o/u/th(CAVAC)
þ/_/o/u/th(CAVAC)
þ/_/ou/t/h(CAVCC)
þ/_/ou/th(CAVC)
þ/_/o/_/u/t/h(CAVAACC)
þ/_/o/_/u/t/h(CAVAACC)
þ/_/o/_/u/th(CAVAAC)
þ/_/o/_/u/th(CAVAAC)
þ/_/ou/_/t/h(CAVACC)
þ/_/ou/_/th(CAVAC)
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 't', 'h']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 't', 'h']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'o', 'u', 'th']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'th']
				version split: ['þ', '_', 'ou', 't', 'h']
				{'string': 'þ/_/ou/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 't', 'h']
				version split: ['þ', '_', 'ou', 'th']
				{'string': 'þ/_/ou/th', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'th']
				version split: ['þ', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'th']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'th']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 't', 'h']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 'th']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/o/u/ȝ
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/ou/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'ȝ']
				þ/_/o/u/ȝ(CAVAC)
þ/_/o/u/ȝ(CAVAC)
þ/_/ou/ȝ(CAVC)
þ/_/o/_/u/ȝ(CAVAAC)
þ/_/o/_/u/ȝ(CAVAAC)
þ/_/ou/_/ȝ(CAVAC)
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'o', 'u', 'ȝ']
				{'string': 'þ/_/o/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'u', 'ȝ']
				version split: ['þ', '_', 'ou', 'ȝ']
				{'string': 'þ/_/ou/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', 'ȝ']
				version split: ['þ', '_', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				version split: ['þ', '_', 'ou', '_', 'ȝ']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					> version: þ/_/o/w/th
					TRYING: w
					adding blocked set: C = C >> n, g, w, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'w', 'th']
				þ/_/o/w/t/h(CAVCCC)
þ/_/o/w/th(CAVCC)
þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
				version split: ['þ', '_', 'o', 'w', 't', 'h']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 't', 'h']
				version split: ['þ', '_', 'o', 'w', 'th']
				{'string': 'þ/_/o/w', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'w', 'th']
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> n, g, _, ȝ, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ȝ']
				þ/_/o/ȝ(CAVC)
þ/_/o/_/ȝ(CAVAC)
				version split: ['þ', '_', 'o', 'ȝ']
				{'string': 'þ/_/o/ȝ', 'rgx': '((þ))/((_))/((o))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'ȝ']
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_', 'rgx': '((þ))/((_))/((o))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n']
				þ/_/_/u/n(CAAAC)
þ/_/_/u/n(CAAAC)
þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/u/n(CAAAAC)
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					> version: þ/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> n, g, u, _, ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/c/h(CAAACCC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/u/n/ch(CAAACC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/u/n/ch(CAAAACC)
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: n
					> version: þ/y/_/n/k
					TRYING: n
					RESULT:  ['n']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((n))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n', 'rgx': '((þ))/((y))/((_))/((n))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> n, g, _, ng, z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/z/e/n/k/e(AAACVCCV)
_/_/_/_/z/e/n/k/e(AAAACVCCV)
				version split: ['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVCCV : 4___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', '_']
				ð/_/e/n(CAVC)
ð/_/e/n/_(CAVCA)
				version split: ['ð', '_', 'e', 'n']
				{'string': 'ð/_/e/n', 'rgx': '((ð))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n']
				version split: ['ð', '_', 'e', 'n', '_']
				{'string': 'ð/_/e/n/_', 'rgx': '((ð))/((_))/((e))/((n))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n/c', 'rgx': '((ð))/((_))/((e))/((n))/((c))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: c
					> version: ð/_/e/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n/c', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))$'}
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n/ch', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n/k', 'rgx': '((ð))/((_))/((e))/((n))/((k))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n/k', 'rgx': '((ð))/((h))/((e))/((n))/((k))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', 'g', '_']
				ð/h/o/g(CCVC)
ð/h/o/g/_(CCVCA)
				version split: ['ð', 'h', 'o', 'g']
				{'string': 'ð/h/o/g', 'rgx': '((ð))/((h))/((o))/((g))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g']
				version split: ['ð', 'h', 'o', 'g', '_']
				{'string': 'ð/h/o/g/_', 'rgx': '((ð))/((h))/((o))/((g))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/g
					TRYING: g
					adding blocked set: C = C >> g, _, c, k, ch
					> version: ð/i/_/n/g
					TRYING: g
					adding blocked set: C = C >> g, _, c, k, ch
					> version: ð/i/_/ng
					> version: ð/i/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng', '_']
				adding dashed alternative: ['ð', 'i', '_', 'ng', '_']
				ð/i/_/n/g(CAACC)
ð/i/_/n/g(CAACC)
ð/i/_/ng(CAAC)
ð/i/_/ng(CAAC)
ð/i/_/n/_/g(CAACAC)
ð/i/_/n/_/g(CAACAC)
ð/i/_/ng/_(CAACA)
ð/i/_/ng/_(CAACA)
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'n', 'g']
				{'string': 'ð/i/_/n/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', 'g']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'ng']
				{'string': 'ð/i/_/ng', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng']
				version split: ['ð', 'i', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/n/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/n/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', '_', 'ng', '_']
				{'string': 'ð/i/_/ng/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				version split: ['ð', 'i', '_', 'ng', '_']
				{'string': 'ð/i/_/ng/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/d
					TRYING: d
					adding blocked set: C = C >> _, c, d, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', 'd']
				ð/_/o/_/d(CAVAC)
ð/_/o/_/_/d(CAVAAC)
				version split: ['ð', '_', 'o', '_', 'd']
				{'string': 'ð/_/o/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_', 'rgx': '((ð))/((_))/((o))/((_))/((_))$'}
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g', '_']
				ð/_/o/g(CAVC)
ð/_/o/g/_(CAVCA)
				version split: ['ð', '_', 'o', 'g']
				{'string': 'ð/_/o/g', 'rgx': '((ð))/((_))/((o))/((g))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g']
				version split: ['ð', '_', 'o', 'g', '_']
				{'string': 'ð/_/o/g/_', 'rgx': '((ð))/((_))/((o))/((g))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((h))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/_/oƿ/g
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g', '_']
				ð/_/oƿ/g(CAVC)
ð/_/oƿ/g/_(CAVCA)
				version split: ['ð', '_', 'oƿ', 'g']
				{'string': 'ð/_/oƿ/g', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g']
				version split: ['ð', '_', 'oƿ', 'g', '_']
				{'string': 'ð/_/oƿ/g/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', 's']
				_/_/e/_/s(AAVAC)
_/_/e/_/_/s(AAVAAC)
				version split: ['_', '_', 'e', '_', 's']
				{'string': '_/_/e/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', 's']
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_', 'rgx': '((_))/((_))/((e))/((_))/((_))$'}
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/s
					TRYING: s
					adding blocked set: C = C >> h, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 's']
				_/_/_/_/s(AAAAC)
_/_/_/_/_/s(AAAAAC)
				version split: ['_', '_', '_', '_', 's']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: think
					resolving (2)
					> version: t/h/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: t/h/_/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/i/n/k(CCAAACC)
t/h/_/_/_/i/n/k(CCAAAACC)
t/h/_/_/_/i/n/k(CCAAAACC)
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/i', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n/k', 'rgx': '((t))/((h))/((_))/((n))/((k))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_']
				t/h/o/_(CCVA)
t/h/o/_/_(CCVAA)
				version split: ['t', 'h', 'o', '_']
				{'string': 't/h/o/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_']
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (1)
					> version: t/h/o/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g/h', 'rgx': '((t))/((h))/((o))/((g))/((h))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_/h', 'rgx': '((t))/((h))/((o))/((_))/((h))$'}
				ANALYSING: though
					resolving (1)
					> version: t/h/ou/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't/h/ou/g/h', 'rgx': '((t))/((h))/((o)|(ou))/((g))/((h))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, _, w, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				t/h/o/_/w/t/h(CCVACCC)
t/h/o/_/_/w/t/h(CCVAACCC)
				version split: ['t', 'h', 'o', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/w', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))$'}
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, h, _, c, k, ch
					> version: t/h/_/_/y/n/k
					TRYING: y
					adding blocked set: C = C >> y, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				adding dashed alternative: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/y/n/k(CCAAACC)
t/h/_/_/_/y/n/k(CCAAAACC)
t/h/_/_/_/y/n/k(CCAAAACC)
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/y', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_', 'rgx': '((t))/((h))/((_))/((_))/((_))$'}
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_/h', 'rgx': '((t))/((_))/((o))/((_))/((h))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_']
				þ/_/_/_(CAAA)
þ/_/_/_/_(CAAAA)
				version split: ['þ', '_', '_', '_']
				{'string': 'þ/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: þ/_/e/_/i/n/k
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/i/n/k(CAVAACC)
þ/_/e/_/_/i/n/k(CAVAAACC)
þ/_/e/_/_/i/n/k(CAVAAACC)
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/i', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', '_']
				þ/_/e/n(CAVC)
þ/_/e/n/_(CAVCA)
				version split: ['þ', '_', 'e', 'n']
				{'string': 'þ/_/e/n', 'rgx': '((þ))/((_))/((e))/((n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n']
				version split: ['þ', '_', 'e', 'n', '_']
				{'string': 'þ/_/e/n/_', 'rgx': '((þ))/((_))/((e))/((n))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n/c', 'rgx': '((þ))/((_))/((e))/((n))/((c))$'}
				ANALYSING: þencke
					resolving (2)
					> version: þ/_/e/n/c/k/e
					TRYING: c
					> version: þ/_/e/n/ck/e
					TRYING: ck
					adding blocked set: C = C >> ck, h, _, c, k, ch
					RESULT:  ['c']
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n/c', 'rgx': '((þ))/((_))/((e))/((n))/((c))$'}
				version split: ['þ', '_', 'e', 'n', 'ck', 'e']
				{'string': 'þ/_/e/n/ck', 'rgx': '((þ))/((_))/((e))/((n))/((c))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ck', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/g
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/_/e/ng
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', '_', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng', '_']
				þ/_/e/n/g(CAVCC)
þ/_/e/ng(CAVC)
þ/_/e/n/_/g(CAVCAC)
þ/_/e/ng/_(CAVCA)
				version split: ['þ', '_', 'e', 'n', 'g']
				{'string': 'þ/_/e/n/g', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g']
				version split: ['þ', '_', 'e', 'ng']
				{'string': 'þ/_/e/ng', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng']
				version split: ['þ', '_', 'e', 'n', '_', 'g']
				{'string': 'þ/_/e/n/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', '_']
				{'string': 'þ/_/e/ng/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/g/e
					TRYING: g
					adding blocked set: C = C >> h, g, _, c, k, ch
					> version: þ/_/e/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', '_', 'g', 'e']
				adding dashed alternative: ['þ', '_', 'e', 'ng', '_', 'e']
				þ/_/e/n/g/e(CAVCCV)
þ/_/e/ng/e(CAVCV)
þ/_/e/n/_/g/e(CAVCACV)
þ/_/e/ng/_/e(CAVCAV)
				version split: ['þ', '_', 'e', 'n', 'g', 'e']
				{'string': 'þ/_/e/n/g', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', 'e']
				{'string': 'þ/_/e/ng/e', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', 'e']
				version split: ['þ', '_', 'e', 'n', '_', 'g', 'e']
				{'string': 'þ/_/e/n/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				version split: ['þ', '_', 'e', 'ng', '_', 'e']
				{'string': 'þ/_/e/ng/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: c
					> version: þ/_/e/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n/c', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))$'}
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n/ch', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: c
					> version: þ/_/e/n/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n/c', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))$'}
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n/ch', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n/k', 'rgx': '((þ))/((_))/((e))/((n))/((k))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n/k', 'rgx': '((þ))/((_))/((e))/((n))/((k))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: k
					> version: _/y/e/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n/k', 'rgx': '((_))/((y))/((e))/((n))/((k))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n/k', 'rgx': '((_))/((y))/((e))/((n))/((k))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', '_', '_', 'o', 'h']
				þ/_/e/_/o/h(CAVAVC)
þ/_/e/_/_/o/h(CAVAAVC)
				version split: ['þ', '_', 'e', '_', 'o', 'h']
				{'string': 'þ/_/e/_/o', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', '_', 'o', 'h']
				version split: ['þ', '_', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/_/e/_/_', 'rgx': '((þ))/((_))/((e))/((_))/((_))$'}
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					TRYING: c
					> version: þ/i/_/n/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c))$'}
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/_/i/n/g/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					> version: _/y/_/_/i/ng/e
					TRYING: i
					adding blocked set: C = C >> i, h, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				adding dashed alternative: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/n/g/e(AAAAACCV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/i/ng/e(AAAAACV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/n/g/e(AAAAAACCV)
_/y/_/_/_/i/ng/e(AAAAAACV)
_/y/_/_/_/i/ng/e(AAAAAACV)
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/i', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'y', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_', 'rgx': '((_))/((y))/((_))/((_))/((_))$'}
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: c
					> version: þ/i/_/n/c/h
					TRYING: c
					> version: þ/i/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: þ/i/_/n/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n/ch', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))$'}
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n/ch', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					TRYING: k
					> version: þ/i/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))$'}
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: k
					> version: þ/i/_/n/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/ð
					TRYING: ð
					RESULT:  ['ð']
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((ð))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/_/o/g/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g/h', 'rgx': '((þ))/((_))/((o))/((g))/((h))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((h))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/h
					TRYING: h
					> version: _/y/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((h))$'}
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((h))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/_/h/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((h))$'}
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/c/h
					TRYING: c
					> version: þ/_/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_/c', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))$'}
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/_/u
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u']
				adding dashed alternative: ['þ', '_', 'ou', '_', '_']
				þ/_/o/_/u(CAVAA)
þ/_/o/_/u(CAVAA)
þ/_/ou/_(CAVA)
þ/_/o/_/_/u(CAVAAA)
þ/_/o/_/_/u(CAVAAA)
þ/_/ou/_/_(CAVAA)
				version split: ['þ', '_', 'o', '_', 'u']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u']
				version split: ['þ', '_', 'o', '_', 'u']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u']
				version split: ['þ', '_', 'ou', '_']
				{'string': 'þ/_/ou/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_']
				version split: ['þ', '_', 'o', '_', '_', 'u']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'ou', '_', '_']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				ANALYSING: þouc
					resolving (3)
					> version: þ/_/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/c
					TRYING: c
					RESULT:  ['c']
				version split: ['þ', '_', 'o', '_', 'u', 'c']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((c))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'c']
				version split: ['þ', '_', 'o', '_', 'u', 'c']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((c))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'c']
				version split: ['þ', '_', 'ou', '_', 'c']
				{'string': 'þ/_/ou/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((c))$'}
				ANALYSING: þouh
					resolving (3)
					> version: þ/_/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', 'u', 'h']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'h']
				version split: ['þ', '_', 'o', '_', 'u', 'h']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'h']
				version split: ['þ', '_', 'ou', '_', 'h']
				{'string': 'þ/_/ou/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				ANALYSING: youh
					resolving (4)
					> version: _/y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: _/y/o/_/u/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: _/y/ou/_/h
					TRYING: h
					> version: _/y/ou/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_/u', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'u', 'h']
				version split: ['_', 'y', 'o', '_', 'u', 'h']
				{'string': '_/y/o/_/u', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'u', 'h']
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))$'}
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))$'}
				ANALYSING: þouht
					resolving (3)
					> version: þ/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['þ', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'h', 't']
				version split: ['þ', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'h', 't']
				version split: ['þ', '_', 'ou', '_', 'h', 't']
				{'string': 'þ/_/ou/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))$'}
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/s
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/s
					TRYING: s
					adding blocked set: C = C >> h, ð, _, c, s, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 's']
				adding dashed alternative: ['þ', '_', 'ou', '_', '_', 's']
				þ/_/o/_/u/s(CAVAAC)
þ/_/o/_/u/s(CAVAAC)
þ/_/ou/_/s(CAVAC)
þ/_/o/_/_/u/s(CAVAAAC)
þ/_/o/_/_/u/s(CAVAAAC)
þ/_/ou/_/_/s(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'u', 's']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 's']
				version split: ['þ', '_', 'o', '_', 'u', 's']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 's']
				version split: ['þ', '_', 'ou', '_', 's']
				{'string': 'þ/_/ou/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 's']
				version split: ['þ', '_', 'o', '_', '_', 'u', 's']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u', 's']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'ou', '_', '_', 's']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/t/h
					TRYING: t
					adding blocked set: C = C >> h, ð, _, c, k, t, ch
					> version: þ/_/ou/_/th
					TRYING: th
					adding blocked set: C = C >> h, ð, _, th, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['þ', '_', 'ou', '_', '_', 't', 'h']
				adding dashed alternative: ['þ', '_', 'ou', '_', '_', 'th']
				þ/_/o/_/u/t/h(CAVAACC)
þ/_/o/_/u/t/h(CAVAACC)
þ/_/o/_/u/th(CAVAAC)
þ/_/o/_/u/th(CAVAAC)
þ/_/ou/_/t/h(CAVACC)
þ/_/ou/_/th(CAVAC)
þ/_/o/_/_/u/t/h(CAVAAACC)
þ/_/o/_/_/u/t/h(CAVAAACC)
þ/_/o/_/_/u/th(CAVAAAC)
þ/_/o/_/_/u/th(CAVAAAC)
þ/_/ou/_/_/t/h(CAVAACC)
þ/_/ou/_/_/th(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 't', 'h']
				version split: ['þ', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 't', 'h']
				version split: ['þ', '_', 'o', '_', 'u', 'th']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'th']
				version split: ['þ', '_', 'o', '_', 'u', 'th']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'th']
				version split: ['þ', '_', 'ou', '_', 't', 'h']
				{'string': 'þ/_/ou/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 't', 'h']
				version split: ['þ', '_', 'ou', '_', 'th']
				{'string': 'þ/_/ou/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'th']
				version split: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'ou', '_', '_', 't', 'h']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'ou', '_', '_', 'th']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/o/_/u/ȝ
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/ou/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				adding dashed alternative: ['þ', '_', 'ou', '_', '_', 'ȝ']
				þ/_/o/_/u/ȝ(CAVAAC)
þ/_/o/_/u/ȝ(CAVAAC)
þ/_/ou/_/ȝ(CAVAC)
þ/_/o/_/_/u/ȝ(CAVAAAC)
þ/_/o/_/_/u/ȝ(CAVAAAC)
þ/_/ou/_/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'ȝ']
				version split: ['þ', '_', 'o', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'u', 'ȝ']
				version split: ['þ', '_', 'ou', '_', 'ȝ']
				{'string': 'þ/_/ou/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				version split: ['þ', '_', 'ou', '_', '_', 'ȝ']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))$'}
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					> version: þ/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> h, ð, _, w, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'w', 'th']
				þ/_/o/_/w/t/h(CAVACCC)
þ/_/o/_/w/th(CAVACC)
þ/_/o/_/_/w/t/h(CAVAACCC)
þ/_/o/_/_/w/th(CAVAACC)
				version split: ['þ', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', 'w', 'th']
				{'string': 'þ/_/o/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'w', 'th']
				version split: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				version split: ['þ', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/_/ȝ
					TRYING: ȝ
					adding blocked set: C = C >> h, ð, _, ȝ, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', 'ȝ']
				þ/_/o/_/ȝ(CAVAC)
þ/_/o/_/_/ȝ(CAVAAC)
				version split: ['þ', '_', 'o', '_', 'ȝ']
				{'string': 'þ/_/o/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_', 'rgx': '((þ))/((_))/((o))/((_))/((_))$'}
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/_/_/u/n
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n']
				þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/u/n(CAAAAC)
þ/_/_/_/_/u/n(CAAAAAC)
þ/_/_/_/_/u/n(CAAAAAC)
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/_/_/u/n/c/h
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					> version: þ/_/_/_/u/n/ch
					TRYING: u
					adding blocked set: C = C >> h, ð, u, _, c, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				adding dashed alternative: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/c/h(CAAAACCC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/u/n/ch(CAAAACC)
þ/_/_/_/_/u/n/c/h(CAAAAACCC)
þ/_/_/_/_/u/n/c/h(CAAAAACCC)
þ/_/_/_/_/u/n/ch(CAAAAACC)
þ/_/_/_/_/u/n/ch(CAAAAACC)
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/u', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					TRYING: k
					> version: þ/y/_/n/k
					TRYING: k
					RESULT:  ['k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n/k', 'rgx': '((þ))/((y))/((_))/((n))/((k))$'}
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n/k', 'rgx': '((þ))/((y))/((_))/((n))/((k))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/z/e/n/k/e
					TRYING: z
					adding blocked set: C = C >> h, ð, _, c, z, k, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/z/e/n/k/e(AAAACVCCV)
_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
				version split: ['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVCCV : 5___
				ANALYSING: thenke
				adding littera based on matching pattern
				ANALYSING: ðen
					resolving (1)
					> version: ð/_/e/n/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', '_', '_']
				ð/_/e/n/_(CAVCA)
ð/_/e/n/_/_(CAVCAA)
				version split: ['ð', '_', 'e', 'n', '_']
				{'string': 'ð/_/e/n/_', 'rgx': '((ð))/((_))/((e))/((n))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', '_']
				version split: ['ð', '_', 'e', 'n', '_', '_']
				{'string': 'ð/_/e/n/_/_', 'rgx': '((ð))/((_))/((e))/((n))/((_))/((_))$'}
				ANALYSING: ðenc
					resolving (1)
					> version: ð/_/e/n/c
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', '_']
				ð/_/e/n/c(CAVCC)
ð/_/e/n/c/_(CAVCCA)
				version split: ['ð', '_', 'e', 'n', 'c']
				{'string': 'ð/_/e/n/c', 'rgx': '((ð))/((_))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c']
				version split: ['ð', '_', 'e', 'n', 'c', '_']
				{'string': 'ð/_/e/n/c/_', 'rgx': '((ð))/((_))/((e))/((n))/((c))/((_))$'}
				ANALYSING: ðench
					resolving (2)
					> version: ð/_/e/n/c/h
					TRYING: h
					> version: ð/_/e/n/ch
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'c', '_', 'h']
				adding dashed alternative: ['ð', '_', 'e', 'n', 'ch', '_']
				ð/_/e/n/c/h(CAVCCC)
ð/_/e/n/ch(CAVCC)
ð/_/e/n/c/_/h(CAVCCAC)
ð/_/e/n/ch/_(CAVCCA)
				version split: ['ð', '_', 'e', 'n', 'c', 'h']
				{'string': 'ð/_/e/n/c/h', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch']
				{'string': 'ð/_/e/n/ch', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'ch']
				version split: ['ð', '_', 'e', 'n', 'c', '_', 'h']
				{'string': 'ð/_/e/n/c/_/h', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['ð', '_', 'e', 'n', 'c', '_', 'h']
				version split: ['ð', '_', 'e', 'n', 'ch', '_']
				{'string': 'ð/_/e/n/ch/_', 'rgx': '((ð))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				ANALYSING: ðenke
					resolving (1)
					> version: ð/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ð', '_', 'e', 'n', 'k', 'e']
				{'string': 'ð/_/e/n/k/e', 'rgx': '((ð))/((_))/((e))/((n))/((k))/((e))$'}
				ANALYSING: ðhenk
					resolving (1)
					> version: ð/h/e/n/k
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'e', 'n', 'k', '_']
				ð/h/e/n/k(CCVCC)
ð/h/e/n/k/_(CCVCCA)
				version split: ['ð', 'h', 'e', 'n', 'k']
				{'string': 'ð/h/e/n/k', 'rgx': '((ð))/((h))/((e))/((n))/((k))/((_))$'}
				_____REMOVING________['ð', 'h', 'e', 'n', 'k']
				version split: ['ð', 'h', 'e', 'n', 'k', '_']
				{'string': 'ð/h/e/n/k/_', 'rgx': '((ð))/((h))/((e))/((n))/((k))/((_))$'}
				ANALYSING: ðhog
					resolving (1)
					> version: ð/h/o/g/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'h', 'o', 'g', '_', '_']
				ð/h/o/g/_(CCVCA)
ð/h/o/g/_/_(CCVCAA)
				version split: ['ð', 'h', 'o', 'g', '_']
				{'string': 'ð/h/o/g/_', 'rgx': '((ð))/((h))/((o))/((g))/((_))/((_))$'}
				_____REMOVING________['ð', 'h', 'o', 'g', '_']
				version split: ['ð', 'h', 'o', 'g', '_', '_']
				{'string': 'ð/h/o/g/_/_', 'rgx': '((ð))/((h))/((o))/((g))/((_))/((_))$'}
				ANALYSING: ðing
					resolving (4)
					> version: ð/i/_/n/_/g
					TRYING: g
					> version: ð/i/_/n/_/g
					TRYING: g
					> version: ð/i/_/ng/_
					> version: ð/i/_/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', 'i', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['ð', 'i', '_', 'ng', '_', '_']
				adding dashed alternative: ['ð', 'i', '_', 'ng', '_', '_']
				ð/i/_/n/_/g(CAACAC)
ð/i/_/n/_/g(CAACAC)
ð/i/_/ng/_(CAACA)
ð/i/_/ng/_(CAACA)
ð/i/_/n/_/_/g(CAACAAC)
ð/i/_/n/_/_/g(CAACAAC)
ð/i/_/ng/_/_(CAACAA)
ð/i/_/ng/_/_(CAACAA)
				version split: ['ð', 'i', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/n/_/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', '_', 'g']
				version split: ['ð', 'i', '_', 'n', '_', 'g']
				{'string': 'ð/i/_/n/_/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', '_', 'g']
				version split: ['ð', 'i', '_', 'ng', '_']
				{'string': 'ð/i/_/ng/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng', '_']
				version split: ['ð', 'i', '_', 'ng', '_']
				{'string': 'ð/i/_/ng/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'ng', '_']
				version split: ['ð', 'i', '_', 'n', '_', '_', 'g']
				{'string': 'ð/i/_/n/_/_/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', '_', '_', 'g']
				version split: ['ð', 'i', '_', 'n', '_', '_', 'g']
				{'string': 'ð/i/_/n/_/_/g', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['ð', 'i', '_', 'n', '_', '_', 'g']
				version split: ['ð', 'i', '_', 'ng', '_', '_']
				{'string': 'ð/i/_/ng/_/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				version split: ['ð', 'i', '_', 'ng', '_', '_']
				{'string': 'ð/i/_/ng/_/_', 'rgx': '((ð))/((i))/((_))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: ðod
					resolving (1)
					> version: ð/_/o/_/_/d
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', '_', '_', 'd']
				ð/_/o/_/_/d(CAVAAC)
ð/_/o/_/_/_/d(CAVAAAC)
				version split: ['ð', '_', 'o', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', 'd']
				version split: ['ð', '_', 'o', '_', '_', '_', 'd']
				{'string': 'ð/_/o/_/_/_/d', 'rgx': '((ð))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', '_', '_', 'd']
				ANALYSING: ðog
					resolving (1)
					> version: ð/_/o/g/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', 'g', '_', '_']
				ð/_/o/g/_(CAVCA)
ð/_/o/g/_/_(CAVCAA)
				version split: ['ð', '_', 'o', 'g', '_']
				{'string': 'ð/_/o/g/_', 'rgx': '((ð))/((_))/((o))/((g))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'o', 'g', '_']
				version split: ['ð', '_', 'o', 'g', '_', '_']
				{'string': 'ð/_/o/g/_/_', 'rgx': '((ð))/((_))/((o))/((g))/((_))/((_))$'}
				ANALYSING: ðoh
					resolving (1)
					> version: ð/_/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'o', '_', 'h', '_']
				ð/_/o/_/h(CAVAC)
ð/_/o/_/h/_(CAVACA)
				version split: ['ð', '_', 'o', '_', 'h']
				{'string': 'ð/_/o/_/h', 'rgx': '((ð))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['ð', '_', 'o', '_', 'h']
				version split: ['ð', '_', 'o', '_', 'h', '_']
				{'string': 'ð/_/o/_/h/_', 'rgx': '((ð))/((_))/((o))/((_))/((h))/((_))$'}
				ANALYSING: ðoƿg
					resolving (1)
					> version: ð/_/oƿ/g/_
					RESULT:  ['_']
				adding dashed alternative: ['ð', '_', 'oƿ', 'g', '_', '_']
				ð/_/oƿ/g/_(CAVCA)
ð/_/oƿ/g/_/_(CAVCAA)
				version split: ['ð', '_', 'oƿ', 'g', '_']
				{'string': 'ð/_/oƿ/g/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))/((_))/((_))$'}
				_____REMOVING________['ð', '_', 'oƿ', 'g', '_']
				version split: ['ð', '_', 'oƿ', 'g', '_', '_']
				{'string': 'ð/_/oƿ/g/_/_', 'rgx': '((ð))/((_))/((oƿ)|(o))/((g))/((_))/((_))$'}
				ANALYSING: es
					resolving (1)
					> version: _/_/e/_/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'e', '_', '_', '_', 's']
				_/_/e/_/_/s(AAVAAC)
_/_/e/_/_/_/s(AAVAAAC)
				version split: ['_', '_', 'e', '_', '_', 's']
				{'string': '_/_/e/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', '_', 's']
				version split: ['_', '_', 'e', '_', '_', '_', 's']
				{'string': '_/_/e/_/_/_/s', 'rgx': '((_))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'e', '_', '_', '_', 's']
				ANALYSING: s
					resolving (1)
					> version: _/_/_/_/_/s
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 's']
				_/_/_/_/_/s(AAAAAC)
_/_/_/_/_/_/s(AAAAAAC)
				version split: ['_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 's']
				version split: ['_', '_', '_', '_', '_', '_', 's']
				{'string': '_/_/_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 's']
				ANALYSING: think
					resolving (2)
					> version: t/h/_/_/_/i/n/k
					TRYING: i
					> version: t/h/_/_/_/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/i/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				{'string': 't/h/_/_/_/i/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'i', 'n', 'k']
				ANALYSING: thnk
					resolving (1)
					> version: t/h/_/n/k
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', '_', 'n', 'k', '_']
				t/h/_/n/k(CCACC)
t/h/_/n/k/_(CCACCA)
				version split: ['t', 'h', '_', 'n', 'k']
				{'string': 't/h/_/n/k', 'rgx': '((t))/((h))/((_))/((n))/((k))/((_))$'}
				_____REMOVING________['t', 'h', '_', 'n', 'k']
				version split: ['t', 'h', '_', 'n', 'k', '_']
				{'string': 't/h/_/n/k/_', 'rgx': '((t))/((h))/((_))/((n))/((k))/((_))$'}
				ANALYSING: tho
					resolving (1)
					> version: t/h/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_']
				t/h/o/_/_(CCVAA)
t/h/o/_/_/_(CCVAAA)
				version split: ['t', 'h', 'o', '_', '_']
				{'string': 't/h/o/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_']
				version split: ['t', 'h', 'o', '_', '_', '_']
				{'string': 't/h/o/_/_/_', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				ANALYSING: thogh
					resolving (1)
					> version: t/h/o/g/h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', 'g', 'h', '_']
				t/h/o/g/h(CCVCC)
t/h/o/g/h/_(CCVCCA)
				version split: ['t', 'h', 'o', 'g', 'h']
				{'string': 't/h/o/g/h', 'rgx': '((t))/((h))/((o))/((g))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'o', 'g', 'h']
				version split: ['t', 'h', 'o', 'g', 'h', '_']
				{'string': 't/h/o/g/h/_', 'rgx': '((t))/((h))/((o))/((g))/((h))/((_))$'}
				ANALYSING: thoh
					resolving (1)
					> version: t/h/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', 'h', '_']
				t/h/o/_/h(CCVAC)
t/h/o/_/h/_(CCVACA)
				version split: ['t', 'h', 'o', '_', 'h']
				{'string': 't/h/o/_/h', 'rgx': '((t))/((h))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', 'h']
				version split: ['t', 'h', 'o', '_', 'h', '_']
				{'string': 't/h/o/_/h/_', 'rgx': '((t))/((h))/((o))/((_))/((h))/((_))$'}
				ANALYSING: though
					resolving (1)
					> version: t/h/ou/g/h
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'ou', 'g', 'h', '_']
				t/h/ou/g/h(CCVCC)
t/h/ou/g/h/_(CCVCCA)
				version split: ['t', 'h', 'ou', 'g', 'h']
				{'string': 't/h/ou/g/h', 'rgx': '((t))/((h))/((o)|(ou))/((g))/((h))/((_))$'}
				_____REMOVING________['t', 'h', 'ou', 'g', 'h']
				version split: ['t', 'h', 'ou', 'g', 'h', '_']
				{'string': 't/h/ou/g/h/_', 'rgx': '((t))/((h))/((o)|(ou))/((g))/((h))/((_))$'}
				ANALYSING: thowth
					resolving (1)
					> version: t/h/o/_/_/w/t/h
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				t/h/o/_/_/w/t/h(CCVAACCC)
t/h/o/_/_/_/w/t/h(CCVAAACCC)
				version split: ['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_/w/t', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', 'w', 't', 'h']
				version split: ['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 't/h/o/_/_/_/w', 'rgx': '((t))/((h))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['t', 'h', 'o', '_', '_', '_', 'w', 't', 'h']
				ANALYSING: thynk
					resolving (2)
					> version: t/h/_/_/_/y/n/k
					TRYING: y
					> version: t/h/_/_/_/y/n/k
					TRYING: y
					RESULT:  ['y']
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/y/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				version split: ['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				{'string': 't/h/_/_/_/y/n', 'rgx': '((t))/((h))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['t', 'h', '_', '_', '_', 'y', 'n', 'k']
				ANALYSING: toh
					resolving (1)
					> version: t/_/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['t', '_', 'o', '_', 'h', '_']
				t/_/o/_/h(CAVAC)
t/_/o/_/h/_(CAVACA)
				version split: ['t', '_', 'o', '_', 'h']
				{'string': 't/_/o/_/h', 'rgx': '((t))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['t', '_', 'o', '_', 'h']
				version split: ['t', '_', 'o', '_', 'h', '_']
				{'string': 't/_/o/_/h/_', 'rgx': '((t))/((_))/((o))/((_))/((h))/((_))$'}
				ANALYSING: þ
					resolving (1)
					> version: þ/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', '_', '_', '_', '_']
				þ/_/_/_/_(CAAAA)
þ/_/_/_/_/_(CAAAAA)
				version split: ['þ', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', '_', '_', '_']
				version split: ['þ', '_', '_', '_', '_', '_']
				{'string': 'þ/_/_/_/_/_', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: þeink
					resolving (2)
					> version: þ/_/e/_/_/i/n/k
					TRYING: i
					> version: þ/_/e/_/_/i/n/k
					TRYING: i
					RESULT:  ['i']
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/i/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((i))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				version split: ['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				{'string': 'þ/_/e/_/_/i/n', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((i))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'i', 'n', 'k']
				ANALYSING: þen
					resolving (1)
					> version: þ/_/e/n/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', '_', '_']
				þ/_/e/n/_(CAVCA)
þ/_/e/n/_/_(CAVCAA)
				version split: ['þ', '_', 'e', 'n', '_']
				{'string': 'þ/_/e/n/_', 'rgx': '((þ))/((_))/((e))/((n))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', '_']
				version split: ['þ', '_', 'e', 'n', '_', '_']
				{'string': 'þ/_/e/n/_/_', 'rgx': '((þ))/((_))/((e))/((n))/((_))/((_))$'}
				ANALYSING: þenc
					resolving (1)
					> version: þ/_/e/n/c
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', '_']
				þ/_/e/n/c(CAVCC)
þ/_/e/n/c/_(CAVCCA)
				version split: ['þ', '_', 'e', 'n', 'c']
				{'string': 'þ/_/e/n/c', 'rgx': '((þ))/((_))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c']
				version split: ['þ', '_', 'e', 'n', 'c', '_']
				{'string': 'þ/_/e/n/c/_', 'rgx': '((þ))/((_))/((e))/((n))/((c))/((_))$'}
				ANALYSING: þencke
					resolving (1)
					> version: þ/_/e/n/c/k/e
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', '_', 'k', 'e']
				þ/_/e/n/c/k/e(CAVCCCV)
þ/_/e/n/c/_/k/e(CAVCCACV)
				version split: ['þ', '_', 'e', 'n', 'c', 'k', 'e']
				{'string': 'þ/_/e/n/c/k/e', 'rgx': '((þ))/((_))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'k', 'e']
				version split: ['þ', '_', 'e', 'n', 'c', '_', 'k', 'e']
				{'string': 'þ/_/e/n/c/_/k', 'rgx': '((þ))/((_))/((e))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', '_', 'k', 'e']
				ANALYSING: þeng
					resolving (2)
					> version: þ/_/e/n/_/g
					TRYING: g
					> version: þ/_/e/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', '_', '_', 'g']
				adding dashed alternative: ['þ', '_', 'e', 'ng', '_', '_']
				þ/_/e/n/_/g(CAVCAC)
þ/_/e/ng/_(CAVCA)
þ/_/e/n/_/_/g(CAVCAAC)
þ/_/e/ng/_/_(CAVCAA)
				version split: ['þ', '_', 'e', 'n', '_', 'g']
				{'string': 'þ/_/e/n/_/g', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', '_', 'g']
				version split: ['þ', '_', 'e', 'ng', '_']
				{'string': 'þ/_/e/ng/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'ng', '_']
				version split: ['þ', '_', 'e', 'n', '_', '_', 'g']
				{'string': 'þ/_/e/n/_/_/g', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', '_', '_', 'g']
				version split: ['þ', '_', 'e', 'ng', '_', '_']
				{'string': 'þ/_/e/ng/_/_', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: þenge
					resolving (2)
					> version: þ/_/e/n/_/g/e
					TRYING: g
					> version: þ/_/e/ng/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', '_', 'g', 'e']
				{'string': 'þ/_/e/n/_/g/e', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((e))$'}
				_____REMOVING________['þ', '_', 'e', 'n', '_', 'g', 'e']
				version split: ['þ', '_', 'e', 'ng', '_', 'e']
				{'string': 'þ/_/e/ng/_/e', 'rgx': '((þ))/((_))/((e))/((ng)|(n))/((_))/((e))$'}
				ANALYSING: þench
					resolving (2)
					> version: þ/_/e/n/c/h
					TRYING: h
					> version: þ/_/e/n/ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'c', '_', 'h']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'ch', '_']
				þ/_/e/n/c/h(CAVCCC)
þ/_/e/n/ch(CAVCC)
þ/_/e/n/c/_/h(CAVCCAC)
þ/_/e/n/ch/_(CAVCCA)
				version split: ['þ', '_', 'e', 'n', 'c', 'h']
				{'string': 'þ/_/e/n/c/h', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch']
				{'string': 'þ/_/e/n/ch', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'ch']
				version split: ['þ', '_', 'e', 'n', 'c', '_', 'h']
				{'string': 'þ/_/e/n/c/_/h', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', '_', 'h']
				version split: ['þ', '_', 'e', 'n', 'ch', '_']
				{'string': 'þ/_/e/n/ch/_', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((_))$'}
				ANALYSING: þenche
					resolving (2)
					> version: þ/_/e/n/c/h/e
					TRYING: h
					> version: þ/_/e/n/ch/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'c', 'h', 'e']
				{'string': 'þ/_/e/n/c/h/e', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((e))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'c', 'h', 'e']
				version split: ['þ', '_', 'e', 'n', 'ch', 'e']
				{'string': 'þ/_/e/n/ch/e', 'rgx': '((þ))/((_))/((e))/((n))/((c)|(ch))/((e))$'}
				ANALYSING: þenk
					resolving (1)
					> version: þ/_/e/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'e', 'n', 'k', '_']
				þ/_/e/n/k(CAVCC)
þ/_/e/n/k/_(CAVCCA)
				version split: ['þ', '_', 'e', 'n', 'k']
				{'string': 'þ/_/e/n/k', 'rgx': '((þ))/((_))/((e))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', '_', 'e', 'n', 'k']
				version split: ['þ', '_', 'e', 'n', 'k', '_']
				{'string': 'þ/_/e/n/k/_', 'rgx': '((þ))/((_))/((e))/((n))/((k))/((_))$'}
				ANALYSING: þenke
					resolving (1)
					> version: þ/_/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', '_', 'e', 'n', 'k', 'e']
				{'string': 'þ/_/e/n/k/e', 'rgx': '((þ))/((_))/((e))/((n))/((k))/((e))$'}
				ANALYSING: yenke
					resolving (2)
					> version: _/y/e/n/k/e
					TRYING: e
					> version: _/y/e/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n/k/e', 'rgx': '((_))/((y))/((e))/((n))/((k))/((e))$'}
				version split: ['_', 'y', 'e', 'n', 'k', 'e']
				{'string': '_/y/e/n/k/e', 'rgx': '((_))/((y))/((e))/((n))/((k))/((e))$'}
				ANALYSING: þeoh
					resolving (1)
					> version: þ/_/e/_/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['þ', '_', 'e', '_', '_', 'o', 'h']
				{'string': 'þ/_/e/_/_/o/h', 'rgx': '((þ))/((_))/((e))/((_))/((_))/((o))$'}
				_____REMOVING________['þ', '_', 'e', '_', '_', 'o', 'h']
				ANALYSING: þinc
					resolving (2)
					> version: þ/i/_/n/c
					> version: þ/i/_/n/c
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', '_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', '_']
				þ/i/_/n/c(CAACC)
þ/i/_/n/c(CAACC)
þ/i/_/n/c/_(CAACCA)
þ/i/_/n/c/_(CAACCA)
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c']
				{'string': 'þ/i/_/n/c', 'rgx': '((þ))/((i))/((_))/((n))/((c))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c']
				version split: ['þ', 'i', '_', 'n', 'c', '_']
				{'string': 'þ/i/_/n/c/_', 'rgx': '((þ))/((i))/((_))/((n))/((c))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'c', '_']
				{'string': 'þ/i/_/n/c/_', 'rgx': '((þ))/((i))/((_))/((n))/((c))/((_))$'}
				ANALYSING: yinge
					resolving (4)
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/_/i/n/g/e
					TRYING: i
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					> version: _/y/_/_/_/i/ng/e
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				{'string': '_/y/_/_/_/i/n', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'n', 'g', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				version split: ['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				{'string': '_/y/_/_/_/i/ng', 'rgx': '((_))/((y))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['_', 'y', '_', '_', '_', 'i', 'ng', 'e']
				ANALYSING: þinch
					resolving (4)
					> version: þ/i/_/n/c/h
					TRYING: h
					> version: þ/i/_/n/c/h
					TRYING: h
					> version: þ/i/_/n/ch
					> version: þ/i/_/n/ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', '_', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'c', '_', 'h']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch', '_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'ch', '_']
				þ/i/_/n/c/h(CAACCC)
þ/i/_/n/c/h(CAACCC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/ch(CAACC)
þ/i/_/n/c/_/h(CAACCAC)
þ/i/_/n/c/_/h(CAACCAC)
þ/i/_/n/ch/_(CAACCA)
þ/i/_/n/ch/_(CAACCA)
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n/c/h', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', 'h']
				{'string': 'þ/i/_/n/c/h', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n/ch', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'ch']
				{'string': 'þ/i/_/n/ch', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'ch']
				version split: ['þ', 'i', '_', 'n', 'c', '_', 'h']
				{'string': 'þ/i/_/n/c/_/h', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', '_', 'h']
				version split: ['þ', 'i', '_', 'n', 'c', '_', 'h']
				{'string': 'þ/i/_/n/c/_/h', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'c', '_', 'h']
				version split: ['þ', 'i', '_', 'n', 'ch', '_']
				{'string': 'þ/i/_/n/ch/_', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'ch', '_']
				{'string': 'þ/i/_/n/ch/_', 'rgx': '((þ))/((i))/((_))/((n))/((c)|(ch))/((_))$'}
				ANALYSING: þink
					resolving (2)
					> version: þ/i/_/n/k
					> version: þ/i/_/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', '_']
				adding dashed alternative: ['þ', 'i', '_', 'n', 'k', '_']
				þ/i/_/n/k(CAACC)
þ/i/_/n/k(CAACC)
þ/i/_/n/k/_(CAACCA)
þ/i/_/n/k/_(CAACCA)
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k']
				{'string': 'þ/i/_/n/k', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'i', '_', 'n', 'k']
				version split: ['þ', 'i', '_', 'n', 'k', '_']
				{'string': 'þ/i/_/n/k/_', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((_))$'}
				version split: ['þ', 'i', '_', 'n', 'k', '_']
				{'string': 'þ/i/_/n/k/_', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((_))$'}
				ANALYSING: þinke
					resolving (2)
					> version: þ/i/_/n/k/e
					TRYING: e
					> version: þ/i/_/n/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n/k/e', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((e))$'}
				version split: ['þ', 'i', '_', 'n', 'k', 'e']
				{'string': 'þ/i/_/n/k/e', 'rgx': '((þ))/((i))/((_))/((n))/((k))/((e))$'}
				ANALYSING: þoð
					resolving (1)
					> version: þ/_/o/_/ð
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ð', '_']
				þ/_/o/_/ð(CAVAC)
þ/_/o/_/ð/_(CAVACA)
				version split: ['þ', '_', 'o', '_', 'ð']
				{'string': 'þ/_/o/_/ð', 'rgx': '((þ))/((_))/((o))/((_))/((ð))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ð']
				version split: ['þ', '_', 'o', '_', 'ð', '_']
				{'string': 'þ/_/o/_/ð/_', 'rgx': '((þ))/((_))/((o))/((_))/((ð))/((_))$'}
				ANALYSING: þogh
					resolving (1)
					> version: þ/_/o/g/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', 'g', 'h', '_']
				þ/_/o/g/h(CAVCC)
þ/_/o/g/h/_(CAVCCA)
				version split: ['þ', '_', 'o', 'g', 'h']
				{'string': 'þ/_/o/g/h', 'rgx': '((þ))/((_))/((o))/((g))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', 'g', 'h']
				version split: ['þ', '_', 'o', 'g', 'h', '_']
				{'string': 'þ/_/o/g/h/_', 'rgx': '((þ))/((_))/((o))/((g))/((h))/((_))$'}
				ANALYSING: þoh
					resolving (1)
					> version: þ/_/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h', '_']
				þ/_/o/_/h(CAVAC)
þ/_/o/_/h/_(CAVACA)
				version split: ['þ', '_', 'o', '_', 'h']
				{'string': 'þ/_/o/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h']
				version split: ['þ', '_', 'o', '_', 'h', '_']
				{'string': 'þ/_/o/_/h/_', 'rgx': '((þ))/((_))/((o))/((_))/((h))/((_))$'}
				ANALYSING: yoh
					resolving (2)
					> version: _/y/o/_/h
					> version: _/y/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h', '_']
				adding dashed alternative: ['_', 'y', 'o', '_', 'h', '_']
				_/y/o/_/h(AAVAC)
_/y/o/_/h(AAVAC)
_/y/o/_/h/_(AAVACA)
_/y/o/_/h/_(AAVACA)
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', 'h']
				{'string': '_/y/o/_/h', 'rgx': '((_))/((y))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'o', '_', 'h']
				version split: ['_', 'y', 'o', '_', 'h', '_']
				{'string': '_/y/o/_/h/_', 'rgx': '((_))/((y))/((o))/((_))/((h))/((_))$'}
				version split: ['_', 'y', 'o', '_', 'h', '_']
				{'string': '_/y/o/_/h/_', 'rgx': '((_))/((y))/((o))/((_))/((h))/((_))$'}
				ANALYSING: þohh
					resolving (1)
					> version: þ/_/o/_/h/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'h', '_', 'h']
				þ/_/o/_/h/h(CAVACC)
þ/_/o/_/h/_/h(CAVACAC)
				version split: ['þ', '_', 'o', '_', 'h', 'h']
				{'string': 'þ/_/o/_/h/h', 'rgx': '((þ))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h', 'h']
				version split: ['þ', '_', 'o', '_', 'h', '_', 'h']
				{'string': 'þ/_/o/_/h/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'h', '_', 'h']
				ANALYSING: þoch
					resolving (2)
					> version: þ/_/o/_/c/h
					TRYING: h
					> version: þ/_/o/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', 'c', '_', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', 'ch', '_']
				þ/_/o/_/c/h(CAVACC)
þ/_/o/_/ch(CAVAC)
þ/_/o/_/c/_/h(CAVACAC)
þ/_/o/_/ch/_(CAVACA)
				version split: ['þ', '_', 'o', '_', 'c', 'h']
				{'string': 'þ/_/o/_/c/h', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'c', 'h']
				version split: ['þ', '_', 'o', '_', 'ch']
				{'string': 'þ/_/o/_/ch', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'ch']
				version split: ['þ', '_', 'o', '_', 'c', '_', 'h']
				{'string': 'þ/_/o/_/c/_/h', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', 'c', '_', 'h']
				version split: ['þ', '_', 'o', '_', 'ch', '_']
				{'string': 'þ/_/o/_/ch/_', 'rgx': '((þ))/((_))/((o))/((_))/((c)|(ch))/((_))$'}
				ANALYSING: þou
					resolving (3)
					> version: þ/_/o/_/_/u
					TRYING: u
					> version: þ/_/o/_/_/u
					TRYING: u
					> version: þ/_/ou/_/_
					RESULT:  ['u']
				version split: ['þ', '_', 'o', '_', '_', 'u']
				{'string': 'þ/_/o/_/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				version split: ['þ', '_', 'o', '_', '_', 'u']
				{'string': 'þ/_/o/_/_/u', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				version split: ['þ', '_', 'ou', '_', '_']
				{'string': 'þ/_/ou/_/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', '_', '_']
				ANALYSING: þouc
					resolving (1)
					> version: þ/_/ou/_/c
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'c', '_']
				þ/_/ou/_/c(CAVAC)
þ/_/ou/_/c/_(CAVACA)
				version split: ['þ', '_', 'ou', '_', 'c']
				{'string': 'þ/_/ou/_/c', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((c))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'c']
				version split: ['þ', '_', 'ou', '_', 'c', '_']
				{'string': 'þ/_/ou/_/c/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((c))/((_))$'}
				ANALYSING: þouh
					resolving (1)
					> version: þ/_/ou/_/h
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'h', '_']
				þ/_/ou/_/h(CAVAC)
þ/_/ou/_/h/_(CAVACA)
				version split: ['þ', '_', 'ou', '_', 'h']
				{'string': 'þ/_/ou/_/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'h']
				version split: ['þ', '_', 'ou', '_', 'h', '_']
				{'string': 'þ/_/ou/_/h/_', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))/((_))$'}
				ANALYSING: youh
					resolving (2)
					> version: _/y/ou/_/h
					> version: _/y/ou/_/h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'y', 'ou', '_', 'h', '_']
				adding dashed alternative: ['_', 'y', 'ou', '_', 'h', '_']
				_/y/ou/_/h(AAVAC)
_/y/ou/_/h(AAVAC)
_/y/ou/_/h/_(AAVACA)
_/y/ou/_/h/_(AAVACA)
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', '_', 'h']
				version split: ['_', 'y', 'ou', '_', 'h']
				{'string': '_/y/ou/_/h', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))/((_))$'}
				_____REMOVING________['_', 'y', 'ou', '_', 'h']
				version split: ['_', 'y', 'ou', '_', 'h', '_']
				{'string': '_/y/ou/_/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))/((_))$'}
				version split: ['_', 'y', 'ou', '_', 'h', '_']
				{'string': '_/y/ou/_/h/_', 'rgx': '((_))/((y))/((o)|(ou))/((_))/((h))/((_))$'}
				ANALYSING: þouht
					resolving (1)
					> version: þ/_/ou/_/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'ou', '_', 'h', '_', 't']
				þ/_/ou/_/h/t(CAVACC)
þ/_/ou/_/h/_/t(CAVACAC)
				version split: ['þ', '_', 'ou', '_', 'h', 't']
				{'string': 'þ/_/ou/_/h/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'h', 't']
				version split: ['þ', '_', 'ou', '_', 'h', '_', 't']
				{'string': 'þ/_/ou/_/h/_/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((h))/((_))$'}
				_____REMOVING________['þ', '_', 'ou', '_', 'h', '_', 't']
				ANALYSING: þous
					resolving (3)
					> version: þ/_/o/_/_/u/s
					TRYING: u
					> version: þ/_/o/_/_/u/s
					TRYING: u
					> version: þ/_/ou/_/_/s
					TRYING: s
					RESULT:  ['u']
				version split: ['þ', '_', 'o', '_', '_', 'u', 's']
				{'string': 'þ/_/o/_/_/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 's']
				version split: ['þ', '_', 'o', '_', '_', 'u', 's']
				{'string': 'þ/_/o/_/_/u/s', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 's']
				version split: ['þ', '_', 'ou', '_', '_', 's']
				{'string': 'þ/_/ou/_/_/s', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', '_', '_', 's']
				ANALYSING: þouth
					resolving (6)
					> version: þ/_/o/_/_/u/t/h
					TRYING: u
					> version: þ/_/o/_/_/u/t/h
					TRYING: u
					> version: þ/_/o/_/_/u/th
					TRYING: u
					> version: þ/_/o/_/_/u/th
					TRYING: u
					> version: þ/_/ou/_/_/t/h
					TRYING: t
					> version: þ/_/ou/_/_/th
					TRYING: th
					RESULT:  ['u']
				version split: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/_/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'þ/_/o/_/_/u/t', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/_/o/_/_/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 'th']
				version split: ['þ', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'þ/_/o/_/_/u/th', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 'th']
				version split: ['þ', '_', 'ou', '_', '_', 't', 'h']
				{'string': 'þ/_/ou/_/_/t/h', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', '_', '_', 't', 'h']
				version split: ['þ', '_', 'ou', '_', '_', 'th']
				{'string': 'þ/_/ou/_/_/th', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', '_', '_', 'th']
				ANALYSING: þouȝ
					resolving (3)
					> version: þ/_/o/_/_/u/ȝ
					TRYING: u
					> version: þ/_/o/_/_/u/ȝ
					TRYING: u
					> version: þ/_/ou/_/_/ȝ
					TRYING: ȝ
					RESULT:  ['u']
				version split: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/_/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				{'string': 'þ/_/o/_/_/u/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'u', 'ȝ']
				version split: ['þ', '_', 'ou', '_', '_', 'ȝ']
				{'string': 'þ/_/ou/_/_/ȝ', 'rgx': '((þ))/((_))/((o)|(ou))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', 'ou', '_', '_', 'ȝ']
				ANALYSING: þowth
					resolving (2)
					> version: þ/_/o/_/_/w/t/h
					TRYING: w
					> version: þ/_/o/_/_/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				þ/_/o/_/_/w/t/h(CAVAACCC)
þ/_/o/_/_/w/th(CAVAACC)
þ/_/o/_/_/_/w/t/h(CAVAAACCC)
þ/_/o/_/_/_/w/th(CAVAAACC)
				version split: ['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_/w/t', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_/w/th', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'w', 'th']
				version split: ['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'þ/_/o/_/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'þ/_/o/_/_/_/w', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: þoȝ
					resolving (1)
					> version: þ/_/o/_/_/ȝ
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['þ', '_', 'o', '_', '_', '_', 'ȝ']
				þ/_/o/_/_/ȝ(CAVAAC)
þ/_/o/_/_/_/ȝ(CAVAAAC)
				version split: ['þ', '_', 'o', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', 'ȝ']
				version split: ['þ', '_', 'o', '_', '_', '_', 'ȝ']
				{'string': 'þ/_/o/_/_/_/ȝ', 'rgx': '((þ))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['þ', '_', 'o', '_', '_', '_', 'ȝ']
				ANALYSING: þun
					resolving (2)
					> version: þ/_/_/_/_/u/n
					TRYING: u
					> version: þ/_/_/_/_/u/n
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n']
				ANALYSING: þunch
					resolving (4)
					> version: þ/_/_/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/_/_/u/n/c/h
					TRYING: u
					> version: þ/_/_/_/_/u/n/ch
					TRYING: u
					> version: þ/_/_/_/_/u/n/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'c', 'h']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				version split: ['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				{'string': 'þ/_/_/_/_/u/n', 'rgx': '((þ))/((_))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['þ', '_', '_', '_', '_', 'u', 'n', 'ch']
				ANALYSING: þynk
					resolving (2)
					> version: þ/y/_/n/k
					> version: þ/y/_/n/k
					RESULT:  ['_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k', '_']
				adding dashed alternative: ['þ', 'y', '_', 'n', 'k', '_']
				þ/y/_/n/k(CAACC)
þ/y/_/n/k(CAACC)
þ/y/_/n/k/_(CAACCA)
þ/y/_/n/k/_(CAACCA)
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n/k', 'rgx': '((þ))/((y))/((_))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k']
				{'string': 'þ/y/_/n/k', 'rgx': '((þ))/((y))/((_))/((n))/((k))/((_))$'}
				_____REMOVING________['þ', 'y', '_', 'n', 'k']
				version split: ['þ', 'y', '_', 'n', 'k', '_']
				{'string': 'þ/y/_/n/k/_', 'rgx': '((þ))/((y))/((_))/((n))/((k))/((_))$'}
				version split: ['þ', 'y', '_', 'n', 'k', '_']
				{'string': 'þ/y/_/n/k/_', 'rgx': '((þ))/((y))/((_))/((n))/((k))/((_))$'}
				ANALYSING: zenke
					resolving (1)
					> version: _/_/_/_/_/z/e/n/k/e
					TRYING: z
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				_/_/_/_/_/z/e/n/k/e(AAAAACVCCV)
_/_/_/_/_/_/z/e/n/k/e(AAAAAACVCCV)
				version split: ['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/z/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
				{'string': '_/_/_/_/_/_/z', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'z', 'e', 'n', 'k', 'e']
		FAIL: 
		only one version left: ['ð', '_', 'e', 'n', '_', '_']
		only one version left: ['ð', '_', 'e', 'n', 'c', '_']
		only one version left: ['ð', '_', 'e', 'n', 'ch', '_']
		only one version left: ['ð', '_', 'e', 'n', 'k', 'e']
		only one version left: ['ð', 'h', 'e', 'n', 'k', '_']
		only one version left: ['ð', 'h', 'o', 'g', '_', '_']
		only one version left: ['ð', 'i', '_', 'ng', '_', '_']
		FAIL: 
		only one version left: ['ð', '_', 'o', 'g', '_', '_']
		only one version left: ['ð', '_', 'o', '_', 'h', '_']
		only one version left: ['ð', '_', 'oƿ', 'g', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'h', '_', 'n', 'k', '_']
		only one version left: ['t', 'h', 'o', '_', '_', '_']
		only one version left: ['t', 'h', 'o', 'g', 'h', '_']
		only one version left: ['t', 'h', 'o', '_', 'h', '_']
		only one version left: ['t', 'h', 'ou', 'g', 'h', '_']
		FAIL: 
		FAIL: 
		only one version left: ['t', '_', 'o', '_', 'h', '_']
		only one version left: ['þ', '_', '_', '_', '_', '_']
		FAIL: 
		only one version left: ['þ', '_', 'e', 'n', '_', '_']
		only one version left: ['þ', '_', 'e', 'n', 'c', '_']
		FAIL: 
		only one version left: ['þ', '_', 'e', 'ng', '_', '_']
		only one version left: ['þ', '_', 'e', 'ng', '_', 'e']
		only one version left: ['þ', '_', 'e', 'n', 'ch', '_']
		only one version left: ['þ', '_', 'e', 'n', 'ch', 'e']
		only one version left: ['þ', '_', 'e', 'n', 'k', '_']
		only one version left: ['þ', '_', 'e', 'n', 'k', 'e']
		only one version left: ['_', 'y', 'e', 'n', 'k', 'e']
		FAIL: 
		only one version left: ['þ', 'i', '_', 'n', 'c', '_']
		FAIL: 
		only one version left: ['þ', 'i', '_', 'n', 'ch', '_']
		only one version left: ['þ', 'i', '_', 'n', 'k', '_']
		only one version left: ['þ', 'i', '_', 'n', 'k', 'e']
		only one version left: ['þ', '_', 'o', '_', 'ð', '_']
		only one version left: ['þ', '_', 'o', 'g', 'h', '_']
		only one version left: ['þ', '_', 'o', '_', 'h', '_']
		only one version left: ['_', 'y', 'o', '_', 'h', '_']
		FAIL: 
		only one version left: ['þ', '_', 'o', '_', 'ch', '_']
		only one version left: ['þ', '_', 'o', '_', '_', 'u']
		only one version left: ['þ', '_', 'ou', '_', 'c', '_']
		only one version left: ['þ', '_', 'ou', '_', 'h', '_']
		only one version left: ['_', 'y', 'ou', '_', 'h', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['þ', 'y', '_', 'n', 'k', '_']
		FAIL: 
		SPLIT: ['t', 'h', 'e', 'n', 'k', 'e']
		SPLIT: ['ð', '_', 'e', 'n', '_', '_']
		['ð', '_', 'e', 'n', '_', '_']
		SPLIT: ['ð', '_', 'e', 'n', 'c', '_']
		['ð', '_', 'e', 'n', 'c', '_']
		SPLIT: ['ð', '_', 'e', 'n', 'ch', '_']
		['ð', '_', 'e', 'n', 'ch', '_']
		SPLIT: ['ð', '_', 'e', 'n', 'k', 'e']
		['ð', '_', 'e', 'n', 'k', 'e']
		SPLIT: ['ð', 'h', 'e', 'n', 'k', '_']
		['ð', 'h', 'e', 'n', 'k', '_']
		SPLIT: ['ð', 'h', 'o', 'g', '_', '_']
		['ð', 'h', 'o', 'g', '_', '_']
		SPLIT: ['ð', 'i', '_', 'ng', '_', '_']
		['ð', 'i', '_', 'ng', '_', '_']
		['ð', 'i', '_', 'ng', '_', '_']
		SPLIT: ["['ð']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['ð', '_', 'o', 'g', '_', '_']
		['ð', '_', 'o', 'g', '_', '_']
		SPLIT: ['ð', '_', 'o', '_', 'h', '_']
		['ð', '_', 'o', '_', 'h', '_']
		SPLIT: ['ð', '_', 'oƿ', 'g', '_', '_']
		['ð', '_', 'oƿ', 'g', '_', '_']
		SPLIT: ["['_']", "['_']", "['e']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ['t', 'h', '_', 'n', 'k', '_']
		['t', 'h', '_', 'n', 'k', '_']
		SPLIT: ['t', 'h', 'o', '_', '_', '_']
		['t', 'h', 'o', '_', '_', '_']
		SPLIT: ['t', 'h', 'o', 'g', 'h', '_']
		['t', 'h', 'o', 'g', 'h', '_']
		SPLIT: ['t', 'h', 'o', '_', 'h', '_']
		['t', 'h', 'o', '_', 'h', '_']
		SPLIT: ['t', 'h', 'ou', 'g', 'h', '_']
		['t', 'h', 'ou', 'g', 'h', '_']
		SPLIT: ["['t']", "['h']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['t']", "['h']", "['_']", "['_']", "['_']", "['y']"]
		SPLIT: ['t', '_', 'o', '_', 'h', '_']
		['t', '_', 'o', '_', 'h', '_']
		SPLIT: ['þ', '_', '_', '_', '_', '_']
		['þ', '_', '_', '_', '_', '_']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['i']"]
		SPLIT: ['þ', '_', 'e', 'n', '_', '_']
		['þ', '_', 'e', 'n', '_', '_']
		SPLIT: ['þ', '_', 'e', 'n', 'c', '_']
		['þ', '_', 'e', 'n', 'c', '_']
		SPLIT: ["['þ']", "['_']", "['e']", "['n']", "['c']", "['_']"]
		SPLIT: ['þ', '_', 'e', 'ng', '_', '_']
		['þ', '_', 'e', 'ng', '_', '_']
		SPLIT: ['þ', '_', 'e', 'ng', '_', 'e']
		['þ', '_', 'e', 'ng', '_', 'e']
		SPLIT: ['þ', '_', 'e', 'n', 'ch', '_']
		['þ', '_', 'e', 'n', 'ch', '_']
		SPLIT: ['þ', '_', 'e', 'n', 'ch', 'e']
		['þ', '_', 'e', 'n', 'ch', 'e']
		SPLIT: ['þ', '_', 'e', 'n', 'k', '_']
		['þ', '_', 'e', 'n', 'k', '_']
		SPLIT: ['þ', '_', 'e', 'n', 'k', 'e']
		['þ', '_', 'e', 'n', 'k', 'e']
		SPLIT: ['_', 'y', 'e', 'n', 'k', 'e']
		['_', 'y', 'e', 'n', 'k', 'e']
		['_', 'y', 'e', 'n', 'k', 'e']
		SPLIT: ["['þ']", "['_']", "['e']", "['_']", "['_']", "['o']"]
		SPLIT: ['þ', 'i', '_', 'n', 'c', '_']
		['þ', 'i', '_', 'n', 'c', '_']
		['þ', 'i', '_', 'n', 'c', '_']
		SPLIT: ["['_']", "['y']", "['_']", "['_']", "['_']", "['i']"]
		SPLIT: ['þ', 'i', '_', 'n', 'ch', '_']
		['þ', 'i', '_', 'n', 'ch', '_']
		['þ', 'i', '_', 'n', 'ch', '_']
		SPLIT: ['þ', 'i', '_', 'n', 'k', '_']
		['þ', 'i', '_', 'n', 'k', '_']
		['þ', 'i', '_', 'n', 'k', '_']
		SPLIT: ['þ', 'i', '_', 'n', 'k', 'e']
		['þ', 'i', '_', 'n', 'k', 'e']
		['þ', 'i', '_', 'n', 'k', 'e']
		SPLIT: ['þ', '_', 'o', '_', 'ð', '_']
		['þ', '_', 'o', '_', 'ð', '_']
		SPLIT: ['þ', '_', 'o', 'g', 'h', '_']
		['þ', '_', 'o', 'g', 'h', '_']
		SPLIT: ['þ', '_', 'o', '_', 'h', '_']
		['þ', '_', 'o', '_', 'h', '_']
		SPLIT: ['_', 'y', 'o', '_', 'h', '_']
		['_', 'y', 'o', '_', 'h', '_']
		['_', 'y', 'o', '_', 'h', '_']
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['h']", "['_']"]
		SPLIT: ['þ', '_', 'o', '_', 'ch', '_']
		['þ', '_', 'o', '_', 'ch', '_']
		SPLIT: ['þ', '_', 'o', '_', '_', 'u']
		['þ', '_', 'o', '_', '_', 'u']
		['þ', '_', 'o', '_', '_', 'u']
		SPLIT: ['þ', '_', 'ou', '_', 'c', '_']
		['þ', '_', 'ou', '_', 'c', '_']
		SPLIT: ['þ', '_', 'ou', '_', 'h', '_']
		['þ', '_', 'ou', '_', 'h', '_']
		SPLIT: ['_', 'y', 'ou', '_', 'h', '_']
		['_', 'y', 'ou', '_', 'h', '_']
		['_', 'y', 'ou', '_', 'h', '_']
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['_']", "['h']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['_']", "['o', 'ou']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['þ']", "['_']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ['þ', 'y', '_', 'n', 'k', '_']
		['þ', 'y', '_', 'n', 'k', '_']
		['þ', 'y', '_', 'n', 'k', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCCV is INVALID
		[]
		20
		OVERVIEW: version for pattern CCVCCV

faulty splits: 20
['ð']['']['o'][''][''][''] <-! ðod
['']['']['e'][''][''][''] <-! es
[''][''][''][''][''][''] <-! s
['t']['h']['']['']['']['i'] <-! think
['t']['h']['o'][''][''][''] <-! thowth
['t']['h']['']['']['']['y'] <-! thynk
['þ']['']['e']['']['']['i'] <-! þeink
['þ']['']['e']['n']['c'][''] <-! þencke
['þ']['']['e']['']['']['o'] <-! þeoh
['']['y']['']['']['']['i'] <-! yinge
['þ']['']['o']['']['h'][''] <-! þohh
['þ']['']['o', 'ou']['']['h'][''] <-! þouht
['þ']['']['o', 'ou']['']['']['u'] <-! þous
['þ']['']['o', 'ou']['']['']['u'] <-! þouth
['þ']['']['o', 'ou']['']['']['u'] <-! þouȝ
['þ']['']['o'][''][''][''] <-! þowth
['þ']['']['o'][''][''][''] <-! þoȝ
['þ']['']['']['']['']['u'] <-! þun
['þ']['']['']['']['']['u'] <-! þunch
[''][''][''][''][''][''] <-! zenke
t | h | e | n | k | e
ð | _ | e | n | _ | _
ð | _ | e | n | c | _
ð | _ | e | n | ch | _
ð | _ | e | n | k | e
ð | h | e | n | k | _
ð | h | o | g | _ | _
ð | i | _ | ng | _ | _
['ð'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
ð | _ | o | g | _ | _
ð | _ | o | _ | h | _
ð | _ | oƿ | g | _ | _
['_'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['i']
t | h | _ | n | k | _
t | h | o | _ | _ | _
t | h | o | g | h | _
t | h | o | _ | h | _
t | h | ou | g | h | _
['t'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['y']
t | _ | o | _ | h | _
þ | _ | _ | _ | _ | _
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['i']
þ | _ | e | n | _ | _
þ | _ | e | n | c | _
['þ'] | ['_'] | ['e'] | ['n'] | ['c'] | ['_']
þ | _ | e | ng | _ | _
þ | _ | e | ng | _ | e
þ | _ | e | n | ch | _
þ | _ | e | n | ch | e
þ | _ | e | n | k | _
þ | _ | e | n | k | e
_ | y | e | n | k | e
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['o']
þ | i | _ | n | c | _
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['i']
þ | i | _ | n | ch | _
þ | i | _ | n | k | _
þ | i | _ | n | k | e
þ | _ | o | _ | ð | _
þ | _ | o | g | h | _
þ | _ | o | _ | h | _
_ | y | o | _ | h | _
['þ'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
þ | _ | o | _ | ch | _
þ | _ | o | _ | _ | u
þ | _ | ou | _ | c | _
þ | _ | ou | _ | h | _
_ | y | ou | _ | h | _
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['h'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
þ | y | _ | n | k | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', '_', 's', 'h'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'}
2 : {'i', 'e', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'}
3 : {'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'y', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'ð', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'c'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'z'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'y', 'n', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'g', 'ng', 'n', 'd'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'ch'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', '_', 'ng', 'c'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'i', 'n', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'}
4 : {'h', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'_', 'c', 'd', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'th', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'y', 'h', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'k', 't', 'ch'},{'y', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'g', '_', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'g', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'z', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCVCCV

faulty splits: 20
['ð']['']['o'][''][''][''] <-! ðod
['']['']['e'][''][''][''] <-! es
[''][''][''][''][''][''] <-! s
['t']['h']['']['']['']['i'] <-! think
['t']['h']['o'][''][''][''] <-! thowth
['t']['h']['']['']['']['y'] <-! thynk
['þ']['']['e']['']['']['i'] <-! þeink
['þ']['']['e']['n']['c'][''] <-! þencke
['þ']['']['e']['']['']['o'] <-! þeoh
['']['y']['']['']['']['i'] <-! yinge
['þ']['']['o']['']['h'][''] <-! þohh
['þ']['']['o', 'ou']['']['h'][''] <-! þouht
['þ']['']['o', 'ou']['']['']['u'] <-! þous
['þ']['']['o', 'ou']['']['']['u'] <-! þouth
['þ']['']['o', 'ou']['']['']['u'] <-! þouȝ
['þ']['']['o'][''][''][''] <-! þowth
['þ']['']['o'][''][''][''] <-! þoȝ
['þ']['']['']['']['']['u'] <-! þun
['þ']['']['']['']['']['u'] <-! þunch
[''][''][''][''][''][''] <-! zenke
t | h | e | n | k | e
ð | _ | e | n | _ | _
ð | _ | e | n | c | _
ð | _ | e | n | ch | _
ð | _ | e | n | k | e
ð | h | e | n | k | _
ð | h | o | g | _ | _
ð | i | _ | ng | _ | _
['ð'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
ð | _ | o | g | _ | _
ð | _ | o | _ | h | _
ð | _ | oƿ | g | _ | _
['_'] | ['_'] | ['e'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['i']
t | h | _ | n | k | _
t | h | o | _ | _ | _
t | h | o | g | h | _
t | h | o | _ | h | _
t | h | ou | g | h | _
['t'] | ['h'] | ['o'] | ['_'] | ['_'] | ['_']
['t'] | ['h'] | ['_'] | ['_'] | ['_'] | ['y']
t | _ | o | _ | h | _
þ | _ | _ | _ | _ | _
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['i']
þ | _ | e | n | _ | _
þ | _ | e | n | c | _
['þ'] | ['_'] | ['e'] | ['n'] | ['c'] | ['_']
þ | _ | e | ng | _ | _
þ | _ | e | ng | _ | e
þ | _ | e | n | ch | _
þ | _ | e | n | ch | e
þ | _ | e | n | k | _
þ | _ | e | n | k | e
_ | y | e | n | k | e
['þ'] | ['_'] | ['e'] | ['_'] | ['_'] | ['o']
þ | i | _ | n | c | _
['_'] | ['y'] | ['_'] | ['_'] | ['_'] | ['i']
þ | i | _ | n | ch | _
þ | i | _ | n | k | _
þ | i | _ | n | k | e
þ | _ | o | _ | ð | _
þ | _ | o | g | h | _
þ | _ | o | _ | h | _
_ | y | o | _ | h | _
['þ'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
þ | _ | o | _ | ch | _
þ | _ | o | _ | _ | u
þ | _ | ou | _ | c | _
þ | _ | ou | _ | h | _
_ | y | ou | _ | h | _
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['h'] | ['_']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o', 'ou'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['þ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
['þ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['u']
þ | y | _ | n | k | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'þ', 'ð', '_', 'z', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'ð', '_', 't', 's'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'},{'y', 'þ', 'ð', '_', 't'}
1 : {'i', '_', 's', 'h'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', 'u', '_'},{'i', 'y', 'h', '_', 'z'},{'i', 'y', 'h', 'u', '_'}
2 : {'i', 'e', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'i', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'i', 'e', '_', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'ou', 'oƿ', 'o'},{'y', 'e', '_', 'ou', 'oƿ', 'o'},{'e', 'u', '_', 'ou', 'oƿ', 'o'}
3 : {'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'y', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'ð', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'c'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'z'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'y', 'n', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 't'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'th', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'w', '_', 'ng'},{'g', 'ng', 'n', 'd'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ȝ', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'n', 'g', '_', 'ng', 'ch'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'n', 'g', '_', 'ng', 'c'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', '_', 'ng', 's'},{'i', 'n', 'g', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'g', 'u', '_', 'ng'},{'n', 'h', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'},{'i', 'n', 'g', '_', 'ng'}
4 : {'h', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', '_', 'c', 's', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'_', 'c', 'd', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'th', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'y', 'h', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'k', 't', 'ch'},{'y', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'w', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'g', '_', 'c', 'k', 'ch'},{'h', 'g', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'ȝ', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'i', 'h', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'g', '_', 'c', 'k', 'ch'},{'h', 'ð', '_', 'c', 'z', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'},{'h', 'ð', 'u', '_', 'c', 'k', 'ch'}
	{'CVCCCC', 'CCVCCVC', 'CVVCCC', 'CCVCCCC', 'CVCCCVC', 'CCCVVC', 'VVCCCV', 'CVCVCC', 'CVCCCV', 'VCVCCV', 'CVCCVC', 'VVCCVC', 'CCVCVCC', 'CCCVCCV', 'CCVCCC', 'CCVCVC', 'CCCVCC', 'CCCVCCC', 'CVCCCCV', 'CCVVCCC', 'CCVVCC', 'CCCVVCC', 'CCVCCCV'}
