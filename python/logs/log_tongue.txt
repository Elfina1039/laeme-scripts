Analysis object initialized
{'ton': 1, 'tong': 14, 'tonge': 29, 'tongue': 1, 'toung': 1, 'tounge': 1, 'toungue': 2, 'tun': 2, 'tung': 34, 'tunge': 113, 'tunke': 2, 'tunȝe': 1}
Lexel initialized
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
MIN pattern length=4
Pattern CVCVV is invalid
Pattern CCC is invalid
Pattern CVVCV is invalid
Pattern CVCC is valid
Pattern CVC is invalid
Pattern CVVCCV is invalid
Pattern CVVC is invalid
Pattern CVVCVV is invalid
Pattern CCCC is invalid
Pattern CCCCV is invalid
Pattern CVCCCCV is invalid
Pattern CVVCCVV is invalid
Pattern CVCCVV is invalid
Pattern CVVCC is invalid
Pattern CVCV is valid
Pattern CVCCC is valid
Pattern CCCV is valid
Pattern CVCCV is valid
Pattern CVCCCV is valid
{'value': 7, 'patterns': ['CVCCV']}
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CVCCCV is valid
	Pattern CCCV is valid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: tong
				adding littera based on matching pattern
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: tung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: t
					> version: t/o/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/g/ue
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/ou/n/g/e
					TRYING: t
					> version: t/ou/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/g/ue
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: t
					> version: t/u/n/k/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: t
					> version: t/u/n/ȝ/e
					TRYING: t
					RESULT:  ['t']
			___CVCC : 1___
				ANALYSING: tong
				adding littera based on matching pattern
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: tung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: o
					> version: t/o/ng/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/g/ue
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/ou/n/g/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/ou/n/g/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/g/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/g/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/g/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/u/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/u/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/gu/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/gu/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/gu/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/g/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/gu/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: u
					> version: t/u/n/k/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: u
					> version: t/u/n/ȝ/e
					TRYING: u
					RESULT:  ['u']
			___CVCC : 2___
				ANALYSING: tong
				adding littera based on matching pattern
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: tung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: n
					> version: t/o/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: n
					> version: t/o/n/g/u/e
					TRYING: n
					> version: t/o/n/gu/e
					TRYING: n
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g/e
					TRYING: n
					> version: t/ou/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g/u/e
					TRYING: n
					> version: t/ou/n/g/u/e
					TRYING: n
					> version: t/o/u/n/g/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					> version: t/u/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: n
					> version: t/u/n/g/e
					TRYING: n
					> version: t/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: n
					> version: t/u/n/k/e
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: n
					> version: t/u/n/ȝ/e
					TRYING: n
					RESULT:  ['n']
			___CVCC : 3___
				ANALYSING: tong
				adding littera based on matching pattern
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: tung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				t/o/n(CVC)
t/o/n/_(CVCA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((n))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((n))/((_))$'}
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: g
					> version: t/o/ng/e
					TRYING: e
					RESULT:  ['g']
				version split: ['t', 'o', 'n', 'g', 'e']
				{'string': 't/o/n/g/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'e']
				version split: ['t', 'o', 'ng', 'e']
				{'string': 't/o/ng/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'e']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/n/g/ue
					TRYING: g
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/ng/ue
					TRYING: ue
					> version: t/o/ng/ue
					TRYING: ue
					RESULT:  ['g']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'ue']
				{'string': 't/o/n/g/ue', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'ue']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'ue']
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'ue']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'ou', 'n', 'g', 'e']
				{'string': 't/ou/n/g/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'e']
				version split: ['t', 'ou', 'ng', 'e']
				{'string': 't/ou/ng/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'e']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/u/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/g/u/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> n, _, g, ng, gu
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, n, _, g, ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, n, _, g, ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/g/ue
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, n, _, g, ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, n, _, g, ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> n, _, g, ng, gu
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'g', 'ue']
				{'string': 't/ou/n/g/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'ue']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((ng)|(n)|(g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					> version: t/u/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/n/_(CACA)
t/u/n/_(CACA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/ng/e
					TRYING: e
					> version: t/u/ng/e
					TRYING: e
					RESULT:  ['g']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((ng)|(n))/((g))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> k, n, _, g, ng
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> k, n, _, g, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/n/_/k/e(CACACV)
t/u/n/_/k/e(CACACV)
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, g, ng
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, g, ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/n/_/ȝ/e(CACACV)
t/u/n/_/ȝ/e(CACACV)
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
		only one version left: ['t', 'o', 'n', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'u', 'n', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'o', 'n', 'g']
		SPLIT: ['t', 'ou', 'n', 'g']
		SPLIT: ['t', 'u', 'n', 'g']
		SPLIT: ['t', 'o', 'n', '_']
		['t', 'o', 'n', '_']
		SPLIT: ['t', 'o', 'ng.n', 'g', '----!']
		SPLIT: ['t', 'o', 'ng.n', 'g', '----!']
		SPLIT: ['t', 'ou.o', 'ng.n', 'ng.n.g', '----!']
		SPLIT: ['t', 'ou.o', 'ng.n', 'ng.n.g', '----!']
		SPLIT: ['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		SPLIT: ['t', 'u', 'ng.n', 'g', '----!']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		version for pattern CVCC is INVALID
		[{'ou', 'u', 'o'}]
		7
		OVERVIEW: version for pattern CVCC
{'ou', 'u', 'o'}
faulty splits: 7
tong.ng----! <-! tonge
tong.ng----! <-! tongue
tou.ong.nng.n.g----! <-! tounge
tou.ong.nng.n.g----! <-! toungue
tung.ng----! <-! tunge
tun----! <-! tunke
tun----! <-! tunȝe
t | o | n | g
t | ou | n | g
t | u | n | g
t | o | n | _
t | o | ng.n | g | ----!
t | o | ng.n | g | ----!
t | ou.o | ng.n | ng.n.g | ----!
t | ou.o | ng.n | ng.n.g | ----!
t | u | n | _
t | u | ng.n | g | ----!
t | u | n | _ | ----!
t | u | n | _ | ----!
3 : {'k', 'n', '_', 'g', 'ng'},{'n', 'ȝ', '_', 'g', 'ng'}
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CCCV is valid
	Pattern CVCCCV is valid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: t
					> version: t/o/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/ou/n/g
					TRYING: t
					> version: t/ou/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: t
					> version: t/u/n/g
					TRYING: t
					> version: t/u/ng
					TRYING: t
					> version: t/u/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: t
					> version: t/u/n/k/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: t
					> version: t/u/n/ȝ/e
					TRYING: t
					RESULT:  ['t']
			___CVCV : 1___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: o
					> version: t/o/ng
					TRYING: o
					RESULT:  ['o']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/ou/n/g
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: u
					> version: t/u/n/g
					TRYING: u
					> version: t/u/ng
					TRYING: u
					> version: t/u/ng
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: u
					> version: t/u/n/k/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: u
					> version: t/u/n/ȝ/e
					TRYING: u
					RESULT:  ['u']
			___CVCV : 2___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: n
					> version: t/o/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g
					TRYING: n
					> version: t/ou/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					> version: t/u/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: n
					> version: t/u/n/g
					TRYING: n
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: n
					> version: t/u/n/k/e
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: n
					> version: t/u/n/ȝ/e
					TRYING: n
					RESULT:  ['n']
			___CVCV : 3___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				t/o/n(CVC)
t/o/n/_(CVCA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((n))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((n))/((_))$'}
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: g
					> version: t/o/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/n/_/g(CVCAC)
t/o/ng/_(CVCA)
				version split: ['t', 'o', 'n', 'g']
				{'string': 't/o/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g']
				version split: ['t', 'o', 'ng']
				{'string': 't/o/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'ng']
				version split: ['t', 'o', 'n', '_', 'g']
				{'string': 't/o/n/_/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_', 'g']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/ng
					TRYING: ng
					> version: t/o/u/ng
					TRYING: ng
					> version: t/ou/n/g
					TRYING: g
					> version: t/ou/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'ou', 'n', '_', 'g']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/ng(CVAAC)
t/o/u/_/ng(CVAAC)
t/ou/n/_/g(CVCAC)
t/ou/ng/_(CVCA)
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'ou', 'n', 'g']
				{'string': 't/ou/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g']
				version split: ['t', 'ou', 'ng']
				{'string': 't/ou/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'ou', 'n', '_', 'g']
				{'string': 't/ou/n/_/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', '_', 'g']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))$'}
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					> version: t/u/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/n/_(CACA)
t/u/n/_(CACA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: g
					> version: t/u/n/g
					TRYING: g
					> version: t/u/ng
					> version: t/u/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/n/_/g(CACAC)
t/u/n/_/g(CACAC)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: k
					> version: t/u/n/k/e
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/n/_/k/e(CACACV)
t/u/n/_/k/e(CACACV)
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/n/_/ȝ/e(CACACV)
t/u/n/_/ȝ/e(CACACV)
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
		only one version left: ['t', 'o', 'n', '_']
		only one version left: ['t', 'o', 'ng', '_']
		only one version left: ['t', 'ou', 'ng', '_']
		only one version left: ['t', 'u', 'n', '_']
		only one version left: ['t', 'u', 'ng', '_']
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'o', 'ng', 'e']
		SPLIT: ['t', 'o', 'ng', 'ue']
		SPLIT: ['t', 'ou', 'ng', 'e']
		SPLIT: ['t', 'ou', 'ng', 'ue']
		SPLIT: ['t', 'u', 'ng', 'e']
		SPLIT: ['t', 'o', 'n', '_']
		['t', 'o', 'n', '_']
		SPLIT: ['t', 'o', 'ng', '_']
		['t', 'o', 'ng', '_']
		SPLIT: ['t', 'ou', 'ng', '_']
		['t', 'ou', 'ng', '_']
		SPLIT: ['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		SPLIT: ['t', 'u', 'ng', '_']
		['t', 'u', 'ng', '_']
		['t', 'u', 'ng', '_']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		version for pattern CVCV is INVALID
		[{'ou', 'u', 'o'}]
		2
		OVERVIEW: version for pattern CVCV
{'ou', 'u', 'o'}
faulty splits: 2
tun----! <-! tunke
tun----! <-! tunȝe
t | o | ng | e
t | o | ng | ue
t | ou | ng | e
t | ou | ng | ue
t | u | ng | e
t | o | n | _
t | o | ng | _
t | ou | ng | _
t | u | n | _
t | u | ng | _
t | u | n | _ | ----!
t | u | n | _ | ----!
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CVCCCV is valid
	Pattern CCCV is valid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: t
					> version: t/o/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: t
					> version: t/o/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/g/ue
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/ou/n/g/e
					TRYING: t
					> version: t/ou/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/g/ue
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: t
					> version: t/u/n/g
					TRYING: t
					> version: t/u/ng
					TRYING: t
					> version: t/u/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: t
					> version: t/u/n/k/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: t
					> version: t/u/n/ȝ/e
					TRYING: t
					RESULT:  ['t']
			___CVCCC : 1___
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: o
					> version: t/o/ng
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: o
					> version: t/o/ng/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/g/ue
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/ou/n/g/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/ou/n/g/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/g/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/g/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/g/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/u/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/u/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/gu/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/gu/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/n/gu/e
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/g/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/u/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/o/u/ng/ue
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/n/gu/e
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng/ue
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: u
					> version: t/u/n/g
					TRYING: u
					> version: t/u/ng
					TRYING: u
					> version: t/u/ng
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: u
					> version: t/u/n/k/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: u
					> version: t/u/n/ȝ/e
					TRYING: u
					RESULT:  ['u']
			___CVCCC : 2___
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					adding blocked set: C = C >> u, n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n']
				t/o/n(CVC)
t/o/_/n(CVAC)
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'ng']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/_/n/g(CVACC)
t/o/_/ng(CVAC)
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'e']
				t/o/n/g/e(CVCCV)
t/o/ng/e(CVCV)
t/o/_/n/g/e(CVACCV)
t/o/_/ng/e(CVACV)
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/n/g/u/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/n/gu/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/n/g/ue
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/n/gu/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng/ue
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/ng/ue
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'n', 'gu', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', 'ue']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'u', 'e']
				adding dashed alternative: ['t', 'o', '_', 'n', 'gu', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'ue']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'ue']
				t/o/n/g/u/e(CVCCCV)
t/o/n/g/u/e(CVCCVV)
t/o/n/gu/e(CVCCV)
t/o/ng/u/e(CVCCV)
t/o/ng/u/e(CVCVV)
t/o/n/g/ue(CVCCV)
t/o/ng/u/e(CVCCV)
t/o/ng/u/e(CVCVV)
t/o/n/gu/e(CVCCV)
t/o/ng/ue(CVCV)
t/o/ng/ue(CVCV)
t/o/_/n/g/u/e(CVACCAV)
t/o/_/n/g/u/e(CVACCAV)
t/o/_/n/gu/e(CVACCV)
t/o/_/ng/u/e(CVACAV)
t/o/_/ng/u/e(CVACAV)
t/o/_/n/g/ue(CVACCV)
t/o/_/ng/u/e(CVACAV)
t/o/_/ng/u/e(CVACAV)
t/o/_/n/gu/e(CVACCV)
t/o/_/ng/ue(CVACV)
t/o/_/ng/ue(CVACV)
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: u
					> version: t/o/u/n/g/e
					TRYING: u
					> version: t/o/u/ng/e
					TRYING: u
					> version: t/o/u/ng/e
					TRYING: u
					> version: t/ou/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/ou/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['u']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: u
					> version: t/o/u/n/g/u/e
					TRYING: u
					> version: t/o/u/n/gu/e
					TRYING: u
					> version: t/o/u/n/gu/e
					TRYING: u
					> version: t/o/u/ng/u/e
					TRYING: u
					> version: t/o/u/ng/u/e
					TRYING: u
					> version: t/ou/n/g/u/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/ou/n/g/u/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/u/n/g/ue
					TRYING: u
					> version: t/o/u/n/g/ue
					TRYING: u
					> version: t/o/u/ng/u/e
					TRYING: u
					> version: t/o/u/ng/u/e
					TRYING: u
					> version: t/ou/n/gu/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/u/n/gu/e
					TRYING: u
					> version: t/o/u/n/gu/e
					TRYING: u
					> version: t/ou/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/ou/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/u/ng/ue
					TRYING: u
					> version: t/o/u/ng/ue
					TRYING: u
					> version: t/ou/n/g/ue
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/ou/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/ou/ng/u/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/o/u/ng/ue
					TRYING: u
					> version: t/o/u/ng/ue
					TRYING: u
					> version: t/ou/n/gu/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/ou/ng/ue
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/ou/ng/ue
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['u']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n']
				adding dashed alternative: ['t', 'u', '_', 'n']
				t/u/n(CCC)
t/u/n(CVC)
t/u/_/n(CAAC)
t/u/_/n(CAAC)
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'u', '_', 'ng']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/_/n/g(CAACC)
t/u/_/n/g(CAACC)
t/u/_/ng(CAAC)
t/u/_/ng(CAAC)
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					> version: t/u/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', 'e']
				t/u/n/g/e(CCCCV)
t/u/n/g/e(CVCCV)
t/u/ng/e(CCCV)
t/u/ng/e(CVCV)
t/u/_/n/g/e(CAACCV)
t/u/_/n/g/e(CAACCV)
t/u/_/ng/e(CAACV)
t/u/_/ng/e(CAACV)
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/k/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'k', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/_/n/k/e(CAACCV)
t/u/_/n/k/e(CAACCV)
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/ȝ/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/_/n/ȝ/e(CAACCV)
t/u/_/n/ȝ/e(CAACCV)
			___CVCCC : 3___
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (2)
					> version: t/o/n
					> version: t/o/_/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tong
					resolving (4)
					> version: t/o/n/g
					TRYING: g
					> version: t/o/ng
					> version: t/o/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tonge
					resolving (4)
					> version: t/o/n/g/e
					TRYING: g
					> version: t/o/ng/e
					TRYING: e
					> version: t/o/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tongue
					resolving (22)
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> ng, n, g, gu
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					> version: t/o/n/g/ue
					TRYING: g
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					> version: t/o/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					> version: t/o/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> ng, n, g, gu
					> version: t/o/ng/ue
					TRYING: ue
					> version: t/o/ng/ue
					TRYING: ue
					> version: t/o/_/n/g/u/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/n/g/u/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/u/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/g/u/e
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> ng, n, g, gu
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/g/ue
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/u/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> ng, n, g, gu
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tun
					resolving (4)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/_/n
					TRYING: n
					> version: t/u/_/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tung
					resolving (8)
					> version: t/u/n/g
					TRYING: g
					> version: t/u/n/g
					TRYING: g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/u/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tunge
					resolving (8)
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/ng/e
					TRYING: e
					> version: t/u/ng/e
					TRYING: e
					> version: t/u/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/u/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tunke
					resolving (4)
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> ng, k, n, g
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> ng, k, n, g
					> version: t/u/_/n/k/e
					TRYING: n
					> version: t/u/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunȝe
					resolving (4)
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> ng, n, g, ȝ
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> ng, n, g, ȝ
					> version: t/u/_/n/ȝ/e
					TRYING: n
					> version: t/u/_/n/ȝ/e
					TRYING: n
					RESULT:  ['n']
			___CVCCC : 4___
				ANALYSING: toung
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (2)
					> version: t/o/n
					> version: t/o/_/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_']
				t/o/n(CVC)
t/o/_/n(CVAC)
t/o/n/_(CVCA)
t/o/_/n/_(CVACA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', '_', 'n']
				{'string': 't/o/_/n', 'rgx': '((t))/((o))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_']
				version split: ['t', 'o', '_', 'n', '_']
				{'string': 't/o/_/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))$'}
				ANALYSING: tong
					resolving (4)
					> version: t/o/n/g
					> version: t/o/ng
					> version: t/o/_/n/g
					TRYING: g
					> version: t/o/_/ng
					RESULT:  ['g']
				version split: ['t', 'o', 'n', 'g']
				{'string': 't/o/n/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g']
				version split: ['t', 'o', 'ng']
				{'string': 't/o/ng', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng']
				version split: ['t', 'o', '_', 'n', 'g']
				{'string': 't/o/_/n/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				version split: ['t', 'o', '_', 'ng']
				{'string': 't/o/_/ng', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng']
				ANALYSING: tonge
					resolving (4)
					> version: t/o/n/g/e
					TRYING: e
					> version: t/o/ng/e
					> version: t/o/_/n/g/e
					TRYING: g
					> version: t/o/_/ng/e
					TRYING: e
					RESULT:  ['g']
				version split: ['t', 'o', 'n', 'g', 'e']
				{'string': 't/o/n/g/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'e']
				version split: ['t', 'o', 'ng', 'e']
				{'string': 't/o/ng/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'e']
				version split: ['t', 'o', '_', 'n', 'g', 'e']
				{'string': 't/o/_/n/g/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', 'e']
				version split: ['t', 'o', '_', 'ng', 'e']
				{'string': 't/o/_/ng/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'e']
				ANALYSING: tongue
					resolving (22)
					> version: t/o/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/n/gu/e
					TRYING: e
					> version: t/o/ng/u/e
					TRYING: e
					> version: t/o/ng/u/e
					TRYING: e
					> version: t/o/n/g/ue
					TRYING: ue
					> version: t/o/ng/u/e
					TRYING: e
					> version: t/o/ng/u/e
					TRYING: e
					> version: t/o/n/gu/e
					TRYING: e
					> version: t/o/ng/ue
					> version: t/o/ng/ue
					> version: t/o/_/n/g/u/e
					TRYING: g
					> version: t/o/_/n/g/u/e
					TRYING: g
					> version: t/o/_/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/_/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/_/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/_/n/g/ue
					TRYING: g
					> version: t/o/_/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/_/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/_/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/_/ng/ue
					TRYING: ue
					> version: t/o/_/ng/ue
					TRYING: ue
					RESULT:  ['g']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'ue']
				{'string': 't/o/n/g/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'ue']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'ue']
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'ng', 'ue']
				version split: ['t', 'o', '_', 'n', 'g', 'u', 'e']
				{'string': 't/o/_/n/g/u', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', '_', 'n', 'g', 'u', 'e']
				{'string': 't/o/_/n/g/u', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', '_', 'n', 'gu', 'e']
				{'string': 't/o/_/n/gu/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'gu', 'e']
				version split: ['t', 'o', '_', 'ng', 'u', 'e']
				{'string': 't/o/_/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'u', 'e']
				version split: ['t', 'o', '_', 'ng', 'u', 'e']
				{'string': 't/o/_/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'u', 'e']
				version split: ['t', 'o', '_', 'n', 'g', 'ue']
				{'string': 't/o/_/n/g/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', 'ue']
				version split: ['t', 'o', '_', 'ng', 'u', 'e']
				{'string': 't/o/_/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'u', 'e']
				version split: ['t', 'o', '_', 'ng', 'u', 'e']
				{'string': 't/o/_/ng/u/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'u', 'e']
				version split: ['t', 'o', '_', 'n', 'gu', 'e']
				{'string': 't/o/_/n/gu/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'gu', 'e']
				version split: ['t', 'o', '_', 'ng', 'ue']
				{'string': 't/o/_/ng/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'ue']
				version split: ['t', 'o', '_', 'ng', 'ue']
				{'string': 't/o/_/ng/ue', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'ue']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: g
					> version: t/o/u/n/g/e
					TRYING: g
					> version: t/o/u/ng/e
					TRYING: e
					> version: t/o/u/ng/e
					TRYING: e
					> version: t/ou/n/g/e
					TRYING: e
					> version: t/ou/ng/e
					RESULT:  ['g']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'ou', 'n', 'g', 'e']
				{'string': 't/ou/n/g/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'e']
				version split: ['t', 'ou', 'ng', 'e']
				{'string': 't/ou/ng/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'e']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: g
					> version: t/o/u/n/g/u/e
					TRYING: g
					> version: t/o/u/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/u/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/ou/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/ou/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/u/n/g/ue
					TRYING: g
					> version: t/o/u/n/g/ue
					TRYING: g
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> u, g, _
					> version: t/ou/n/gu/e
					TRYING: e
					> version: t/o/u/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/o/u/n/gu/e
					TRYING: gu
					adding blocked set: C = C >> g, gu, _
					> version: t/ou/ng/u/e
					TRYING: e
					> version: t/ou/ng/u/e
					TRYING: e
					> version: t/o/u/ng/ue
					TRYING: ue
					> version: t/o/u/ng/ue
					TRYING: ue
					> version: t/ou/n/g/ue
					TRYING: ue
					> version: t/ou/ng/u/e
					TRYING: e
					> version: t/ou/ng/u/e
					TRYING: e
					> version: t/o/u/ng/ue
					TRYING: ue
					> version: t/o/u/ng/ue
					TRYING: ue
					> version: t/ou/n/gu/e
					TRYING: e
					> version: t/ou/ng/ue
					> version: t/ou/ng/ue
					RESULT:  ['g']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g/u', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g/u', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'g', 'ue']
				{'string': 't/ou/n/g/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'ue']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((ou)|(o))/((u))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				ANALYSING: tun
					resolving (4)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/_/n
					> version: t/u/_/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/_/n(CAAC)
t/u/_/n(CAAC)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/_/n/_(CAACA)
t/u/_/n/_(CAACA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', '_', 'n']
				{'string': 't/u/_/n', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n']
				version split: ['t', 'u', '_', 'n']
				{'string': 't/u/_/n', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				ANALYSING: tung
					resolving (8)
					> version: t/u/n/g
					> version: t/u/n/g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/_/n/g
					TRYING: g
					> version: t/u/_/n/g
					TRYING: g
					> version: t/u/_/ng
					> version: t/u/_/ng
					RESULT:  ['g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', '_', 'n', 'g']
				{'string': 't/u/_/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				version split: ['t', 'u', '_', 'n', 'g']
				{'string': 't/u/_/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				version split: ['t', 'u', '_', 'ng']
				{'string': 't/u/_/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'ng']
				version split: ['t', 'u', '_', 'ng']
				{'string': 't/u/_/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'ng']
				ANALYSING: tunge
					resolving (8)
					> version: t/u/n/g/e
					TRYING: e
					> version: t/u/n/g/e
					TRYING: e
					> version: t/u/ng/e
					> version: t/u/ng/e
					> version: t/u/_/n/g/e
					TRYING: g
					> version: t/u/_/n/g/e
					TRYING: g
					> version: t/u/_/ng/e
					TRYING: e
					> version: t/u/_/ng/e
					TRYING: e
					RESULT:  ['g']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				version split: ['t', 'u', '_', 'n', 'g', 'e']
				{'string': 't/u/_/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', 'e']
				version split: ['t', 'u', '_', 'n', 'g', 'e']
				{'string': 't/u/_/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', 'e']
				version split: ['t', 'u', '_', 'ng', 'e']
				{'string': 't/u/_/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'ng', 'e']
				version split: ['t', 'u', '_', 'ng', 'e']
				{'string': 't/u/_/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((g))$'}
				_____REMOVING________['t', 'u', '_', 'ng', 'e']
				ANALYSING: tunke
					resolving (4)
					> version: t/u/n/k/e
					TRYING: e
					> version: t/u/n/k/e
					TRYING: e
					> version: t/u/_/n/k/e
					TRYING: k
					adding blocked set: C = C >> k, g, _
					> version: t/u/_/n/k/e
					TRYING: k
					adding blocked set: C = C >> k, g, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'k', '_', 'e']
				adding dashed alternative: ['t', 'u', 'n', 'k', '_', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'k', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/_/n/k/e(CAACCV)
t/u/_/n/k/e(CAACCV)
t/u/n/k/_/e(CACCAV)
t/u/n/k/_/e(CACCAV)
t/u/_/n/_/k/e(CAACACV)
t/u/_/n/_/k/e(CAACACV)
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', '_', 'n', 'k', 'e']
				{'string': 't/u/_/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'k', 'e']
				version split: ['t', 'u', '_', 'n', 'k', 'e']
				{'string': 't/u/_/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', '_', 'e']
				{'string': 't/u/n/k/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', '_', 'e']
				version split: ['t', 'u', 'n', 'k', '_', 'e']
				{'string': 't/u/n/k/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', '_', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'k', 'e']
				{'string': 't/u/_/n/_/k', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'k', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'k', 'e']
				{'string': 't/u/_/n/_/k', 'rgx': '((t))/((u))/((_))/((n))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'k', 'e']
				ANALYSING: tunȝe
					resolving (4)
					> version: t/u/n/ȝ/e
					TRYING: e
					> version: t/u/n/ȝ/e
					TRYING: e
					> version: t/u/_/n/ȝ/e
					TRYING: ȝ
					> version: t/u/_/n/ȝ/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((ȝ))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((ȝ))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', '_', 'n', 'ȝ', 'e']
				{'string': 't/u/_/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((ȝ))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'ȝ', 'e']
				version split: ['t', 'u', '_', 'n', 'ȝ', 'e']
				{'string': 't/u/_/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((ȝ))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'ȝ', 'e']
		only one version left: ['t', 'o', '_', 'n', '_']
		only one version left: ['t', 'o', '_', 'n', 'g']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'u', '_', 'n', '_']
		only one version left: ['t', 'u', '_', 'n', 'g']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'o', 'u', 'n', 'g']
		SPLIT: ['t', 'o', '_', 'n', '_']
		['t', 'o', '_', 'n', '_']
		SPLIT: ['t', 'o', '_', 'n', 'g']
		['t', 'o', '_', 'n', 'g']
		SPLIT: ['t', 'o', '_', 'ng.n.g', 'g', '----!']
		SPLIT: ['t', 'o', '_', 'ng.n.g', 'g', '----!']
		SPLIT: ['t', 'ou.o', 'u', 'ng.n.g', 'g', '----!']
		SPLIT: ['t', 'ou.o', 'u', 'ng.n.g', 'g', '----!']
		SPLIT: ['t', 'u', '_', 'n', '_']
		['t', 'u', '_', 'n', '_']
		['t', 'u', '_', 'n', '_']
		SPLIT: ['t', 'u', '_', 'n', 'g']
		['t', 'u', '_', 'n', 'g']
		['t', 'u', '_', 'n', 'g']
		SPLIT: ['t', 'u', '_', 'ng.n.g', 'g', '----!']
		SPLIT: ['t', 'u', '_', 'n', '_', '----!']
		SPLIT: ['t', 'u', '_', 'n', 'ȝ', '----!']
		version for pattern CVCCC is INVALID
		[{'ou', 'u', 'o'}]
		7
		OVERVIEW: version for pattern CVCCC
{'ou', 'u', 'o'}
faulty splits: 7
tong.n.gg----! <-! tonge
tong.n.gg----! <-! tongue
tou.oung.n.gg----! <-! tounge
tou.oung.n.gg----! <-! toungue
tung.n.gg----! <-! tunge
tun----! <-! tunke
tunȝ----! <-! tunȝe
t | o | u | n | g
t | o | _ | n | _
t | o | _ | n | g
t | o | _ | ng.n.g | g | ----!
t | o | _ | ng.n.g | g | ----!
t | ou.o | u | ng.n.g | g | ----!
t | ou.o | u | ng.n.g | g | ----!
t | u | _ | n | _
t | u | _ | n | g
t | u | _ | ng.n.g | g | ----!
t | u | _ | n | _ | ----!
t | u | _ | n | ȝ | ----!
2 : {'u', 'n'},{'u', 'ng', '_'},{'u', 'n', '_'}
4 : {'k', 'g', '_'}
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CCCV is valid
	Pattern CVCCCV is valid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: t
					> version: t/o/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: t
					> version: t/o/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/g/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/g/ue
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/ng/u/e
					TRYING: t
					> version: t/o/n/gu/e
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					> version: t/o/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/ou/n/g
					TRYING: t
					> version: t/ou/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/n/g/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/o/u/ng/e
					TRYING: t
					> version: t/ou/n/g/e
					TRYING: t
					> version: t/ou/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/u/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/ou/n/g/u/e
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/n/g/ue
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/o/u/ng/u/e
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/o/u/n/gu/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/g/ue
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/ou/ng/u/e
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/o/u/ng/ue
					TRYING: t
					> version: t/ou/n/gu/e
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					> version: t/ou/ng/ue
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: t
					> version: t/u/n/g
					TRYING: t
					> version: t/u/ng
					TRYING: t
					> version: t/u/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: t
					> version: t/u/n/k/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: t
					> version: t/u/n/ȝ/e
					TRYING: t
					RESULT:  ['t']
			___CCCV : 1___
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: o
					> version: t/o/ng
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: o
					> version: t/o/ng/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/g/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/g/ue
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/ng/u/e
					TRYING: o
					> version: t/o/n/gu/e
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					> version: t/o/ng/ue
					TRYING: o
					RESULT:  ['o']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/ou/n/g
					TRYING: ou
					> version: t/ou/ng
					TRYING: ou
					RESULT:  ['o']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/n/g/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/o/u/ng/e
					TRYING: o
					> version: t/ou/n/g/e
					TRYING: ou
					> version: t/ou/ng/e
					TRYING: ou
					RESULT:  ['o']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/g/u/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/ou/n/g/u/e
					TRYING: ou
					> version: t/ou/n/g/u/e
					TRYING: ou
					> version: t/o/u/n/g/ue
					TRYING: o
					> version: t/o/u/n/g/ue
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/o/u/ng/u/e
					TRYING: o
					> version: t/ou/n/gu/e
					TRYING: ou
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/o/u/n/gu/e
					TRYING: o
					> version: t/ou/ng/u/e
					TRYING: ou
					> version: t/ou/ng/u/e
					TRYING: ou
					> version: t/o/u/ng/ue
					TRYING: o
					> version: t/o/u/ng/ue
					TRYING: o
					> version: t/ou/n/g/ue
					TRYING: ou
					> version: t/ou/ng/u/e
					TRYING: ou
					> version: t/ou/ng/u/e
					TRYING: ou
					> version: t/o/u/ng/ue
					TRYING: o
					> version: t/o/u/ng/ue
					TRYING: o
					> version: t/ou/n/gu/e
					TRYING: ou
					> version: t/ou/ng/ue
					TRYING: ou
					> version: t/ou/ng/ue
					TRYING: ou
					RESULT:  ['o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: u
					> version: t/u/n/g
					TRYING: u
					> version: t/u/ng
					TRYING: u
					> version: t/u/ng
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: u
					> version: t/u/n/k/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: u
					> version: t/u/n/ȝ/e
					TRYING: u
					RESULT:  ['u']
			___CCCV : 2___
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: n
					> version: t/o/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: n
					> version: t/o/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: n
					> version: t/o/n/g/u/e
					TRYING: n
					> version: t/o/n/gu/e
					TRYING: n
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g
					TRYING: n
					> version: t/ou/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g/e
					TRYING: n
					> version: t/ou/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g/u/e
					TRYING: n
					> version: t/ou/n/g/u/e
					TRYING: n
					> version: t/o/u/n/g/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng/u/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/gu/e
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g/ue
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/u/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng/ue
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/gu/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/ng/ue
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					> version: t/u/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: n
					> version: t/u/n/g
					TRYING: n
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: n
					> version: t/u/n/k/e
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: n
					> version: t/u/n/ȝ/e
					TRYING: n
					RESULT:  ['n']
			___CCCV : 3___
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				t/o/n(CVC)
t/o/n/_(CVCA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((n))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((n))/((_))$'}
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: g
					> version: t/o/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/n/_/g(CVCAC)
t/o/ng/_(CVCA)
				version split: ['t', 'o', 'n', 'g']
				{'string': 't/o/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g']
				version split: ['t', 'o', 'ng']
				{'string': 't/o/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'ng']
				version split: ['t', 'o', 'n', '_', 'g']
				{'string': 't/o/n/_/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_', 'g']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: g
					> version: t/o/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'o', 'n', 'g', 'e']
				{'string': 't/o/n/g/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'e']
				version split: ['t', 'o', 'ng', 'e']
				{'string': 't/o/ng/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				ANALYSING: tongue
					resolving (11)
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/g/u/e
					TRYING: g
					> version: t/o/n/gu/e
					TRYING: gu
					> version: t/o/ng/u/e
					TRYING: u
					> version: t/o/ng/u/e
					TRYING: u
					> version: t/o/n/g/ue
					TRYING: g
					> version: t/o/ng/u/e
					TRYING: u
					> version: t/o/ng/u/e
					TRYING: u
					> version: t/o/n/gu/e
					TRYING: gu
					> version: t/o/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					> version: t/o/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'u', 'e']
				{'string': 't/o/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'g', 'ue']
				{'string': 't/o/n/g/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'ue']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'ng', 'u', 'e']
				{'string': 't/o/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'ng', 'u', 'e']
				version split: ['t', 'o', 'n', 'gu', 'e']
				{'string': 't/o/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'n', 'gu', 'e']
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				version split: ['t', 'o', 'ng', 'ue']
				{'string': 't/o/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/ng
					TRYING: ng
					> version: t/o/u/ng
					TRYING: ng
					> version: t/ou/n/g
					TRYING: g
					> version: t/ou/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'ou', 'n', '_', 'g']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/ng(CVAAC)
t/o/u/_/ng(CVAAC)
t/ou/n/_/g(CVCAC)
t/ou/ng/_(CVCA)
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'ou', 'n', 'g']
				{'string': 't/ou/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g']
				version split: ['t', 'ou', 'ng']
				{'string': 't/ou/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'ou', 'n', '_', 'g']
				{'string': 't/ou/n/_/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', '_', 'g']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_']
				ANALYSING: tounge
					resolving (6)
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/n/g/e
					TRYING: n
					> version: t/o/u/ng/e
					TRYING: ng
					> version: t/o/u/ng/e
					TRYING: ng
					> version: t/ou/n/g/e
					TRYING: g
					> version: t/ou/ng/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'o', 'u', 'ng', 'e']
				{'string': 't/o/u/ng/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'e']
				version split: ['t', 'ou', 'n', 'g', 'e']
				{'string': 't/ou/n/g/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'e']
				version split: ['t', 'ou', 'ng', 'e']
				{'string': 't/ou/ng/e', 'rgx': '((t))/((o))/((ng)|(n))/((e))$'}
				_____REMOVING________['t', 'ou', 'ng', 'e']
				ANALYSING: toungue
					resolving (27)
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/g/u/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/ng/u/e
					TRYING: ng
					> version: t/o/u/ng/u/e
					TRYING: ng
					> version: t/ou/n/g/u/e
					TRYING: g
					> version: t/ou/n/g/u/e
					TRYING: g
					> version: t/o/u/n/g/ue
					TRYING: n
					> version: t/o/u/n/g/ue
					TRYING: n
					> version: t/o/u/ng/u/e
					TRYING: ng
					> version: t/o/u/ng/u/e
					TRYING: ng
					> version: t/ou/n/gu/e
					TRYING: gu
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/o/u/n/gu/e
					TRYING: n
					> version: t/ou/ng/u/e
					TRYING: u
					> version: t/ou/ng/u/e
					TRYING: u
					> version: t/o/u/ng/ue
					TRYING: ng
					> version: t/o/u/ng/ue
					TRYING: ng
					> version: t/ou/n/g/ue
					TRYING: g
					> version: t/ou/ng/u/e
					TRYING: u
					> version: t/ou/ng/u/e
					TRYING: u
					> version: t/o/u/ng/ue
					TRYING: ng
					> version: t/o/u/ng/ue
					TRYING: ng
					> version: t/ou/n/gu/e
					TRYING: gu
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					> version: t/ou/ng/ue
					TRYING: ue
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ue'}
					RESULT:  ['u', 'ue']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'u', 'e']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'ou', 'n', 'g', 'u', 'e']
				{'string': 't/ou/n/g/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'u', 'e']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'n', 'g', 'ue']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'u', 'e']
				{'string': 't/o/u/ng/u', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'o', 'u', 'n', 'gu', 'e']
				{'string': 't/o/u/n/gu', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'g', 'ue']
				{'string': 't/ou/n/g/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', 'ue']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'ou', 'ng', 'u', 'e']
				{'string': 't/ou/ng/u/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'u', 'e']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'o', 'u', 'ng', 'ue']
				{'string': 't/o/u/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', 'ue']
				version split: ['t', 'ou', 'n', 'gu', 'e']
				{'string': 't/ou/n/gu/e', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'n', 'gu', 'e']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				version split: ['t', 'ou', 'ng', 'ue']
				{'string': 't/ou/ng/ue', 'rgx': '((t))/((o))/((ng)|(n))/((u)|(ue))$'}
				_____REMOVING________['t', 'ou', 'ng', 'ue']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					> version: t/u/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/n/_(CACA)
t/u/n/_(CACA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))$'}
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: g
					> version: t/u/n/g
					TRYING: g
					> version: t/u/ng
					> version: t/u/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/n/_/g(CACAC)
t/u/n/_/g(CACAC)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))$'}
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: k
					> version: t/u/n/k/e
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/n/_/k/e(CACACV)
t/u/n/_/k/e(CACACV)
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				version split: ['t', 'u', 'n', '_', 'k', 'e']
				{'string': 't/u/n/_/k', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'k', 'e']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', 'n', '_', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/n/_/ȝ/e(CACACV)
t/u/n/_/ȝ/e(CACACV)
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
				version split: ['t', 'u', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/n/_/ȝ', 'rgx': '((t))/((u))/((n))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'ȝ', 'e']
		only one version left: ['t', 'o', 'n', '_']
		only one version left: ['t', 'o', 'ng', '_']
		only one version left: ['t', 'o', 'ng', 'e']
		only one version left: ['t', 'o', 'ng', 'ue']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['t', 'u', 'n', '_']
		only one version left: ['t', 'u', 'ng', '_']
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'u', 'ng', 'e']
		SPLIT: ['t', 'o', 'n', '_']
		['t', 'o', 'n', '_']
		SPLIT: ['t', 'o', 'ng', '_']
		['t', 'o', 'ng', '_']
		SPLIT: ['t', 'o', 'ng', 'e']
		['t', 'o', 'ng', 'e']
		SPLIT: ['t', 'o', 'ng', 'ue']
		['t', 'o', 'ng', 'ue']
		['t', 'o', 'ng', 'ue']
		SPLIT: ['t', 'o', 'ng.n', '_', '----!']
		SPLIT: ['t', 'o', 'ng.n', 'e', '----!']
		SPLIT: ['t', 'o', 'ng.n', 'u.ue', '----!']
		SPLIT: ['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		['t', 'u', 'n', '_']
		SPLIT: ['t', 'u', 'ng', '_']
		['t', 'u', 'ng', '_']
		['t', 'u', 'ng', '_']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		SPLIT: ['t', 'u', 'n', '_', '----!']
		version for pattern CCCV is INVALID
		[]
		5
		OVERVIEW: version for pattern CCCV

faulty splits: 5
tong.n----! <-! toung
tong.ne----! <-! tounge
tong.nu.ue----! <-! toungue
tun----! <-! tunke
tun----! <-! tunȝe
t | u | ng | e
t | o | n | _
t | o | ng | _
t | o | ng | e
t | o | ng | ue
t | o | ng.n | _ | ----!
t | o | ng.n | e | ----!
t | o | ng.n | u.ue | ----!
t | u | n | _
t | u | ng | _
t | u | n | _ | ----!
t | u | n | _ | ----!
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CVCCCV is valid
	Pattern CCCV is valid
	Pattern CVCCV is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: tunke
				adding littera based on matching pattern
				ANALYSING: tunȝe
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: t
					> version: t/o/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/ou/n/g
					TRYING: t
					> version: t/ou/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: t
					> version: t/u/n/g
					TRYING: t
					> version: t/u/ng
					TRYING: t
					> version: t/u/ng
					TRYING: t
					RESULT:  ['t']
			___CVCCV : 1___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: tunke
				adding littera based on matching pattern
				ANALYSING: tunȝe
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: o
					> version: t/o/ng
					TRYING: o
					RESULT:  ['o']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/ou/n/g
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: u
					> version: t/u/n/g
					TRYING: u
					> version: t/u/ng
					TRYING: u
					> version: t/u/ng
					TRYING: u
					RESULT:  ['u']
			___CVCCV : 2___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: tunke
				adding littera based on matching pattern
				ANALYSING: tunȝe
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: n
					> version: t/o/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n
					> version: t/ou/n/g
					TRYING: n
					> version: t/ou/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					> version: t/u/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: n
					> version: t/u/n/g
					TRYING: n
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					RESULT:  ['ng', 'n']
			___CVCCV : 3___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: tunke
				adding littera based on matching pattern
				ANALYSING: tunȝe
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				t/o/n(CVC)
t/o/n/_(CVCA)
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: g
					adding blocked set: C = C >> k, ȝ, _, g, gu
					> version: t/o/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/n/_/g(CVCAC)
t/o/ng/_(CVCA)
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: n
					adding blocked set: C = C >> k, n, ȝ, _, g, gu
					> version: t/o/u/n/g
					TRYING: n
					adding blocked set: C = C >> k, n, ȝ, _, g, gu
					> version: t/o/u/ng
					TRYING: ng
					adding blocked set: C = C >> k, ȝ, _, g, ng, gu
					> version: t/o/u/ng
					TRYING: ng
					adding blocked set: C = C >> k, ȝ, _, g, ng, gu
					> version: t/ou/n/g
					TRYING: g
					adding blocked set: C = C >> k, ȝ, _, g, gu
					> version: t/ou/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'o', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'ou', 'n', '_', 'g']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/ng(CVAAC)
t/o/u/_/ng(CVAAC)
t/ou/n/_/g(CVCAC)
t/ou/ng/_(CVCA)
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					> version: t/u/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/n/_(CACA)
t/u/n/_(CACA)
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: g
					adding blocked set: C = C >> k, ȝ, _, g, gu
					> version: t/u/n/g
					TRYING: g
					adding blocked set: C = C >> k, ȝ, _, g, gu
					> version: t/u/ng
					> version: t/u/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/n/_/g(CACAC)
t/u/n/_/g(CACAC)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
			___CVCCV : 4___
				ANALYSING: tonge
				adding littera based on matching pattern
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: tunge
				adding littera based on matching pattern
				ANALYSING: tunke
				adding littera based on matching pattern
				ANALYSING: tunȝe
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (2)
					> version: t/o/n
					> version: t/o/n/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				adding dashed alternative: ['t', 'o', 'n', '_', '_']
				t/o/n(CVC)
t/o/n/_(CVCA)
t/o/n/_(CVCA)
t/o/n/_/_(CVCAA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_']
				version split: ['t', 'o', 'n', '_', '_']
				{'string': 't/o/n/_/_', 'rgx': '((t))/((o))/((n))/((_))/((_))$'}
				ANALYSING: tong
					resolving (4)
					> version: t/o/n/g
					> version: t/o/ng
					> version: t/o/n/_/g
					TRYING: g
					> version: t/o/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'o', 'ng', '_', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/n/_/g(CVCAC)
t/o/ng/_(CVCA)
t/o/n/g/_(CVCCA)
t/o/ng/_(CVCA)
t/o/n/_/_/g(CVCAAC)
t/o/ng/_/_(CVCAA)
				version split: ['t', 'o', 'n', 'g']
				{'string': 't/o/n/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g']
				version split: ['t', 'o', 'ng']
				{'string': 't/o/ng', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng']
				version split: ['t', 'o', 'n', '_', 'g']
				{'string': 't/o/n/_/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_', 'g']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng', '_']
				version split: ['t', 'o', 'n', 'g', '_']
				{'string': 't/o/n/g/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g', '_']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng', '_']
				version split: ['t', 'o', 'n', '_', '_', 'g']
				{'string': 't/o/n/_/_/g', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_', '_', 'g']
				version split: ['t', 'o', 'ng', '_', '_']
				{'string': 't/o/ng/_/_', 'rgx': '((t))/((o))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: toung
					resolving (12)
					> version: t/o/u/n/g
					TRYING: g
					> version: t/o/u/n/g
					TRYING: g
					> version: t/o/u/ng
					> version: t/o/u/ng
					> version: t/ou/n/g
					> version: t/ou/ng
					> version: t/o/u/_/n/g
					TRYING: n
					> version: t/o/u/_/n/g
					TRYING: n
					> version: t/o/u/_/ng
					TRYING: ng
					> version: t/o/u/_/ng
					TRYING: ng
					> version: t/ou/n/_/g
					TRYING: g
					> version: t/ou/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'ou', 'n', 'g', '_']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'u', '_', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', 'u', '_', '_', 'ng']
				adding dashed alternative: ['t', 'o', 'u', '_', '_', 'ng']
				adding dashed alternative: ['t', 'ou', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'ou', 'ng', '_', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/n/g(CVAACC)
t/o/u/_/ng(CVAAC)
t/o/u/_/ng(CVAAC)
t/ou/n/_/g(CVCAC)
t/ou/ng/_(CVCA)
t/o/u/n/_/g(CVACAC)
t/o/u/n/_/g(CVACAC)
t/o/u/ng/_(CVACA)
t/o/u/ng/_(CVACA)
t/ou/n/g/_(CVCCA)
t/ou/ng/_(CVCA)
t/o/u/_/_/n/g(CVAAACC)
t/o/u/_/_/n/g(CVAAACC)
t/o/u/_/_/ng(CVAAAC)
t/o/u/_/_/ng(CVAAAC)
t/ou/n/_/_/g(CVCAAC)
t/ou/ng/_/_(CVCAA)
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'ou', 'n', 'g']
				{'string': 't/ou/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g']
				version split: ['t', 'ou', 'ng']
				{'string': 't/ou/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'n', 'g']
				{'string': 't/o/u/_/n/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'o', 'u', '_', 'ng']
				{'string': 't/o/u/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', 'ng']
				version split: ['t', 'ou', 'n', '_', 'g']
				{'string': 't/ou/n/_/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', '_', 'g']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_']
				version split: ['t', 'o', 'u', 'n', '_', 'g']
				{'string': 't/o/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', 'g']
				version split: ['t', 'o', 'u', 'n', '_', 'g']
				{'string': 't/o/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', 'g']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'ou', 'n', 'g', '_']
				{'string': 't/ou/n/g/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', '_']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_']
				version split: ['t', 'o', 'u', '_', '_', 'n', 'g']
				{'string': 't/o/u/_/_/n', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', '_', 'n', 'g']
				{'string': 't/o/u/_/_/n', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', '_', 'n', 'g']
				version split: ['t', 'o', 'u', '_', '_', 'ng']
				{'string': 't/o/u/_/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', '_', 'ng']
				version split: ['t', 'o', 'u', '_', '_', 'ng']
				{'string': 't/o/u/_/_/ng', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', '_', '_', 'ng']
				version split: ['t', 'ou', 'n', '_', '_', 'g']
				{'string': 't/ou/n/_/_/g', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', '_', '_', 'g']
				version split: ['t', 'ou', 'ng', '_', '_']
				{'string': 't/ou/ng/_/_', 'rgx': '((t))/((ou)|(o))/((ng)|(n))/((_))/((_))$'}
				ANALYSING: tun
					resolving (4)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/n/_
					> version: t/u/n/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_', '_']
				adding dashed alternative: ['t', 'u', 'n', '_', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/n/_/_(CACAA)
t/u/n/_/_(CACAA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_', '_']
				{'string': 't/u/n/_/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				version split: ['t', 'u', 'n', '_', '_']
				{'string': 't/u/n/_/_', 'rgx': '((t))/((u))/((n))/((_))/((_))$'}
				ANALYSING: tung
					resolving (8)
					> version: t/u/n/g
					> version: t/u/n/g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/n/_/g
					TRYING: g
					> version: t/u/n/_/g
					TRYING: g
					> version: t/u/ng/_
					> version: t/u/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'u', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'u', 'ng', '_', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/n/_/g(CACAC)
t/u/n/_/g(CACAC)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
t/u/n/g/_(CACCA)
t/u/n/g/_(CACCA)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
t/u/n/_/_/g(CACAAC)
t/u/n/_/_/g(CACAAC)
t/u/ng/_/_(CACAA)
t/u/ng/_/_(CACAA)
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'n', '_', 'g']
				{'string': 't/u/n/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', 'g']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'n', '_', '_', 'g']
				{'string': 't/u/n/_/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', '_', 'g']
				version split: ['t', 'u', 'n', '_', '_', 'g']
				{'string': 't/u/n/_/_/g', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', '_', 'g']
				version split: ['t', 'u', 'ng', '_', '_']
				{'string': 't/u/ng/_/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
				version split: ['t', 'u', 'ng', '_', '_']
				{'string': 't/u/ng/_/_', 'rgx': '((t))/((u))/((ng)|(n))/((_))/((_))$'}
		only one version left: ['t', 'o', 'n', '_', '_']
		only one version left: ['t', 'o', 'ng', '_', '_']
		only one version left: ['t', 'ou', 'ng', '_', '_']
		only one version left: ['t', 'u', 'n', '_', '_']
		only one version left: ['t', 'u', 'ng', '_', '_']
		SPLIT: ['t', 'o', 'n', 'g', 'e']
		SPLIT: ['t', 'o', 'n', 'gu', 'e']
		SPLIT: ['t', 'ou', 'n', 'g', 'e']
		SPLIT: ['t', 'ou', 'n', 'gu', 'e']
		SPLIT: ['t', 'u', 'n', 'g', 'e']
		SPLIT: ['t', 'u', 'n', 'k', 'e']
		SPLIT: ['t', 'u', 'n', 'ȝ', 'e']
		SPLIT: ['t', 'o', 'n', '_', '_']
		['t', 'o', 'n', '_', '_']
		SPLIT: ['t', 'o', 'ng', '_', '_']
		['t', 'o', 'ng', '_', '_']
		SPLIT: ['t', 'ou', 'ng', '_', '_']
		['t', 'ou', 'ng', '_', '_']
		SPLIT: ['t', 'u', 'n', '_', '_']
		['t', 'u', 'n', '_', '_']
		['t', 'u', 'n', '_', '_']
		SPLIT: ['t', 'u', 'ng', '_', '_']
		['t', 'u', 'ng', '_', '_']
		['t', 'u', 'ng', '_', '_']
		version for pattern CVCCV is INVALID
		[{'ou', 'u', 'o'}, {'k', 'ȝ', '_', 'g', 'gu'}]
		0
		OVERVIEW: version for pattern CVCCV
{'ou', 'u', 'o'}, {'k', 'ȝ', '_', 'g', 'gu'}
faulty splits: 0
t | o | n | g | e
t | o | n | gu | e
t | ou | n | g | e
t | ou | n | gu | e
t | u | n | g | e
t | u | n | k | e
t | u | n | ȝ | e
t | o | n | _ | _
t | o | ng | _ | _
t | ou | ng | _ | _
t | u | n | _ | _
t | u | ng | _ | _
3 : {'k', 'n', 'ȝ', '_', 'g', 'gu'},{'k', 'ȝ', '_', 'g', 'gu'},{'k', 'ȝ', '_', 'g', 'ng', 'gu'}
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 3}], [{'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}], [{'lit': 'gu', 'ln': 2, 'index': 3}, {'lit': 'ng', 'ln': 2, 'index': 2}, {'lit': 'ue', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'gu', 'ln': 2, 'index': 4}], [{'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}], [{'lit': 'gu', 'ln': 2, 'index': 4}, {'lit': 'ng', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}, {'lit': 'ue', 'ln': 2, 'index': 5}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ng', 'ln': 2, 'index': 2}]]
	MIN pattern length=4
	Pattern CVCVV is invalid
	Pattern CCC is invalid
	Pattern CVVCV is invalid
	Pattern CVCC is valid
	Pattern CVC is invalid
	Pattern CVVCCV is invalid
	Pattern CVVC is invalid
	Pattern CVVCVV is invalid
	Pattern CCCC is invalid
	Pattern CCCCV is invalid
	Pattern CVCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVVCCVV is invalid
	Pattern CVCCVV is invalid
	Pattern CVVCC is invalid
	Pattern CVCV is valid
	Pattern CVCCC is valid
	Pattern CCCV is valid
	Pattern CVCCCV is valid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: t
					> version: t/o/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: t
					> version: t/o/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/n/g
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/o/u/ng
					TRYING: t
					> version: t/ou/n/g
					TRYING: t
					> version: t/ou/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: t
					> version: t/u/n
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: t
					> version: t/u/n/g
					TRYING: t
					> version: t/u/ng
					TRYING: t
					> version: t/u/ng
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/n/g/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					> version: t/u/ng/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: t
					> version: t/u/n/k/e
					TRYING: t
					RESULT:  ['t']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: t
					> version: t/u/n/ȝ/e
					TRYING: t
					RESULT:  ['t']
			___CVCCCV : 1___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: o
					> version: t/o/ng
					TRYING: o
					RESULT:  ['o']
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: o
					> version: t/o/ng/e
					TRYING: o
					RESULT:  ['o']
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/n/g
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/o/u/ng
					TRYING: o
					> version: t/ou/n/g
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					> version: t/ou/ng
					TRYING: ou
					>>> MULTIPLE RESOLVE OPTIONS: {'ou', 'o'}
					RESULT:  ['ou', 'o']
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: u
					> version: t/u/n
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: u
					> version: t/u/n/g
					TRYING: u
					> version: t/u/ng
					TRYING: u
					> version: t/u/ng
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/n/g/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					> version: t/u/ng/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: u
					> version: t/u/n/k/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: u
					> version: t/u/n/ȝ/e
					TRYING: u
					RESULT:  ['u']
			___CVCCCV : 2___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (1)
					> version: t/o/n
					TRYING: n
					adding blocked set: C = C >> u, n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n']
				t/o/n(CVC)
t/o/_/n(CVAC)
				ANALYSING: tong
					resolving (2)
					> version: t/o/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'ng']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/_/n/g(CVACC)
t/o/_/ng(CVAC)
				ANALYSING: tonge
					resolving (2)
					> version: t/o/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/o/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', 'e']
				t/o/n/g/e(CVCCV)
t/o/ng/e(CVCV)
t/o/_/n/g/e(CVACCV)
t/o/_/ng/e(CVACV)
				ANALYSING: toung
					resolving (6)
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> u, n, _
					> version: t/o/u/n/g
					TRYING: u
					adding blocked set: C = C >> u, n, _
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> u, n, _
					> version: t/o/u/ng
					TRYING: u
					adding blocked set: C = C >> u, n, _
					> version: t/ou/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/ou/ng
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', '_', 'u', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', 'ng']
				adding dashed alternative: ['t', 'o', '_', 'u', 'ng']
				adding dashed alternative: ['t', 'ou', '_', 'n', 'g']
				adding dashed alternative: ['t', 'ou', '_', 'ng']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/ng(CVAAC)
t/o/_/u/ng(CVAAC)
t/ou/_/n/g(CVACC)
t/ou/_/ng(CVAC)
				ANALYSING: tun
					resolving (2)
					> version: t/u/n
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n']
				adding dashed alternative: ['t', 'u', '_', 'n']
				t/u/n(CCC)
t/u/n(CVC)
t/u/_/n(CAAC)
t/u/_/n(CAAC)
				ANALYSING: tung
					resolving (4)
					> version: t/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					> version: t/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'u', '_', 'ng']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/_/n/g(CAACC)
t/u/_/n/g(CAACC)
t/u/_/ng(CAAC)
t/u/_/ng(CAAC)
				ANALYSING: tunge
					resolving (4)
					> version: t/u/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/g/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					> version: t/u/ng/e
					TRYING: ng
					adding blocked set: C = C >> u, n, ng, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', 'e']
				t/u/n/g/e(CCCCV)
t/u/n/g/e(CVCCV)
t/u/ng/e(CCCV)
t/u/ng/e(CVCV)
t/u/_/n/g/e(CAACCV)
t/u/_/n/g/e(CAACCV)
t/u/_/ng/e(CAACV)
t/u/_/ng/e(CAACV)
				ANALYSING: tunke
					resolving (2)
					> version: t/u/n/k/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/k/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'k', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/_/n/k/e(CAACCV)
t/u/_/n/k/e(CAACCV)
				ANALYSING: tunȝe
					resolving (2)
					> version: t/u/n/ȝ/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					> version: t/u/n/ȝ/e
					TRYING: n
					adding blocked set: C = C >> u, n, _
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/_/n/ȝ/e(CAACCV)
t/u/_/n/ȝ/e(CAACCV)
			___CVCCCV : 3___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (2)
					> version: t/o/n
					> version: t/o/_/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tong
					resolving (4)
					> version: t/o/n/g
					TRYING: g
					> version: t/o/ng
					> version: t/o/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tonge
					resolving (4)
					> version: t/o/n/g/e
					TRYING: g
					> version: t/o/ng/e
					TRYING: e
					> version: t/o/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/o/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: toung
					resolving (12)
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/n/g
					TRYING: n
					> version: t/o/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/o/u/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n'}
					> version: t/ou/n/g
					TRYING: g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/u/n/g
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/o/_/u/ng
					TRYING: u
					adding blocked set: C = C >> ng, u, n, g
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/ou/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tun
					resolving (4)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/_/n
					TRYING: n
					> version: t/u/_/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tung
					resolving (8)
					> version: t/u/n/g
					TRYING: g
					> version: t/u/n/g
					TRYING: g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/n/g
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/u/_/ng
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tunge
					resolving (8)
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/n/g/e
					TRYING: g
					> version: t/u/ng/e
					TRYING: e
					> version: t/u/ng/e
					TRYING: e
					> version: t/u/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/n/g/e
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'g'}
					> version: t/u/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					> version: t/u/_/ng/e
					TRYING: ng
					>>> MULTIPLE RESOLVE OPTIONS: {'ng', 'n', 'g'}
					RESULT:  ['ng', 'n', 'g']
				ANALYSING: tunke
					resolving (4)
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> ng, k, n, g
					> version: t/u/n/k/e
					TRYING: k
					adding blocked set: C = C >> ng, k, n, g
					> version: t/u/_/n/k/e
					TRYING: n
					> version: t/u/_/n/k/e
					TRYING: n
					RESULT:  ['n']
				ANALYSING: tunȝe
					resolving (4)
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> ng, n, g, ȝ
					> version: t/u/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> ng, n, g, ȝ
					> version: t/u/_/n/ȝ/e
					TRYING: n
					> version: t/u/_/n/ȝ/e
					TRYING: n
					RESULT:  ['n']
			___CVCCCV : 4___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (2)
					> version: t/o/n
					> version: t/o/_/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_']
				t/o/n(CVC)
t/o/_/n(CVAC)
t/o/n/_(CVCA)
t/o/_/n/_(CVACA)
				ANALYSING: tong
					resolving (4)
					> version: t/o/n/g
					> version: t/o/ng
					> version: t/o/_/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/o/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', '_', 'ng', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/_/n/g(CVACC)
t/o/_/ng(CVAC)
t/o/n/g/_(CVCCA)
t/o/ng/_(CVCA)
t/o/_/n/_/g(CVACAC)
t/o/_/ng/_(CVACA)
				ANALYSING: tonge
					resolving (4)
					> version: t/o/n/g/e
					TRYING: e
					> version: t/o/ng/e
					> version: t/o/_/n/g/e
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/o/_/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', 'g', '_', 'e']
				adding dashed alternative: ['t', 'o', 'ng', 'e', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_', 'g', 'e']
				adding dashed alternative: ['t', 'o', '_', 'ng', '_', 'e']
				t/o/n/g/e(CVCCV)
t/o/ng/e(CVCV)
t/o/_/n/g/e(CVACCV)
t/o/_/ng/e(CVACV)
t/o/n/g/_/e(CVCCAV)
t/o/ng/e/_(CVCVA)
t/o/_/n/_/g/e(CVACACV)
t/o/_/ng/_/e(CVACAV)
				ANALYSING: toung
					resolving (12)
					> version: t/o/u/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/o/u/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/o/u/ng
					> version: t/o/u/ng
					> version: t/ou/n/g
					> version: t/ou/ng
					> version: t/o/_/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _, g, gu
					> version: t/o/_/u/n/g
					TRYING: n
					adding blocked set: C = C >> u, n, _, g, gu
					> version: t/o/_/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, _, g, ng, gu
					> version: t/o/_/u/ng
					TRYING: ng
					adding blocked set: C = C >> u, _, g, ng, gu
					> version: t/ou/_/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/ou/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'ou', 'n', 'g', '_']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', 'ng']
				adding dashed alternative: ['t', 'ou', '_', 'n', '_', 'g']
				adding dashed alternative: ['t', 'ou', '_', 'ng', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/ng(CVAAC)
t/o/_/u/ng(CVAAC)
t/ou/_/n/g(CVACC)
t/ou/_/ng(CVAC)
t/o/u/n/_/g(CVACAC)
t/o/u/n/_/g(CVACAC)
t/o/u/ng/_(CVACA)
t/o/u/ng/_(CVACA)
t/ou/n/g/_(CVCCA)
t/ou/ng/_(CVCA)
t/o/_/u/_/n/g(CVAAACC)
t/o/_/u/_/n/g(CVAAACC)
t/o/_/u/_/ng(CVAAAC)
t/o/_/u/_/ng(CVAAAC)
t/ou/_/n/_/g(CVACAC)
t/ou/_/ng/_(CVACA)
				ANALYSING: tun
					resolving (4)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/_/n
					> version: t/u/_/n
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/_/n(CAAC)
t/u/_/n(CAAC)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/_/n/_(CAACA)
t/u/_/n/_(CAACA)
				ANALYSING: tung
					resolving (8)
					> version: t/u/n/g
					> version: t/u/n/g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/_/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/u/_/n/g
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/u/_/ng
					> version: t/u/_/ng
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'g']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/_/n/g(CAACC)
t/u/_/n/g(CAACC)
t/u/_/ng(CAAC)
t/u/_/ng(CAAC)
t/u/n/g/_(CACCA)
t/u/n/g/_(CACCA)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
t/u/_/n/_/g(CAACAC)
t/u/_/n/_/g(CAACAC)
t/u/_/ng/_(CAACA)
t/u/_/ng/_(CAACA)
				ANALYSING: tunge
					resolving (8)
					> version: t/u/n/g/e
					TRYING: e
					> version: t/u/n/g/e
					TRYING: e
					> version: t/u/ng/e
					> version: t/u/ng/e
					> version: t/u/_/n/g/e
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/u/_/n/g/e
					TRYING: g
					adding blocked set: C = C >> u, g, gu, _
					> version: t/u/_/ng/e
					TRYING: e
					> version: t/u/_/ng/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_', 'e']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_', 'e']
				adding dashed alternative: ['t', 'u', 'ng', 'e', '_']
				adding dashed alternative: ['t', 'u', 'ng', 'e', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'g', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_', 'e']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_', 'e']
				t/u/n/g/e(CCCCV)
t/u/n/g/e(CVCCV)
t/u/ng/e(CCCV)
t/u/ng/e(CVCV)
t/u/_/n/g/e(CAACCV)
t/u/_/n/g/e(CAACCV)
t/u/_/ng/e(CAACV)
t/u/_/ng/e(CAACV)
t/u/n/g/_/e(CACCAV)
t/u/n/g/_/e(CACCAV)
t/u/ng/e/_(CACVA)
t/u/ng/e/_(CACVA)
t/u/_/n/_/g/e(CAACACV)
t/u/_/n/_/g/e(CAACACV)
t/u/_/ng/_/e(CAACAV)
t/u/_/ng/_/e(CAACAV)
				ANALYSING: tunke
					resolving (4)
					> version: t/u/n/k/e
					TRYING: e
					> version: t/u/n/k/e
					TRYING: e
					> version: t/u/_/n/k/e
					TRYING: k
					adding blocked set: C = C >> u, k, _, g, gu
					> version: t/u/_/n/k/e
					TRYING: k
					adding blocked set: C = C >> u, k, _, g, gu
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'k', '_', 'e']
				adding dashed alternative: ['t', 'u', 'n', 'k', '_', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'k', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'k', 'e']
				t/u/n/k/e(CCCCV)
t/u/n/k/e(CVCCV)
t/u/_/n/k/e(CAACCV)
t/u/_/n/k/e(CAACCV)
t/u/n/k/_/e(CACCAV)
t/u/n/k/_/e(CACCAV)
t/u/_/n/_/k/e(CAACACV)
t/u/_/n/_/k/e(CAACACV)
				ANALYSING: tunȝe
					resolving (4)
					> version: t/u/n/ȝ/e
					TRYING: e
					> version: t/u/n/ȝ/e
					TRYING: e
					> version: t/u/_/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> u, ȝ, _, g, gu
					> version: t/u/_/n/ȝ/e
					TRYING: ȝ
					adding blocked set: C = C >> u, ȝ, _, g, gu
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'ȝ', '_', 'e']
				adding dashed alternative: ['t', 'u', 'n', 'ȝ', '_', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'ȝ', 'e']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', 'ȝ', 'e']
				t/u/n/ȝ/e(CCCCV)
t/u/n/ȝ/e(CVCCV)
t/u/_/n/ȝ/e(CAACCV)
t/u/_/n/ȝ/e(CAACCV)
t/u/n/ȝ/_/e(CACCAV)
t/u/n/ȝ/_/e(CACCAV)
t/u/_/n/_/ȝ/e(CAACACV)
t/u/_/n/_/ȝ/e(CAACACV)
			___CVCCCV : 5___
				ANALYSING: tongue
				adding littera based on matching pattern
				ANALYSING: tounge
				adding littera based on matching pattern
				ANALYSING: toungue
				adding littera based on matching pattern
				ANALYSING: ton
					resolving (4)
					> version: t/o/n
					> version: t/o/_/n
					> version: t/o/n/_
					> version: t/o/_/n/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_']
				adding dashed alternative: ['t', 'o', 'n', '_', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_', '_']
				t/o/n(CVC)
t/o/_/n(CVAC)
t/o/n/_(CVCA)
t/o/_/n/_(CVACA)
t/o/n/_(CVCA)
t/o/_/n/_(CVACA)
t/o/n/_/_(CVCAA)
t/o/_/n/_/_(CVACAA)
				version split: ['t', 'o', 'n']
				{'string': 't/o/n', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n']
				version split: ['t', 'o', '_', 'n']
				{'string': 't/o/_/n', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_']
				version split: ['t', 'o', '_', 'n', '_']
				{'string': 't/o/_/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', '_']
				version split: ['t', 'o', 'n', '_']
				{'string': 't/o/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_']
				version split: ['t', 'o', '_', 'n', '_']
				{'string': 't/o/_/n/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', '_']
				version split: ['t', 'o', 'n', '_', '_']
				{'string': 't/o/n/_/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', '_', '_']
				version split: ['t', 'o', '_', 'n', '_', '_']
				{'string': 't/o/_/n/_/_', 'rgx': '((t))/((o))/((_))/((n))/((_))/((_))$'}
				ANALYSING: tong
					resolving (8)
					> version: t/o/n/g
					> version: t/o/ng
					> version: t/o/_/n/g
					> version: t/o/_/ng
					> version: t/o/n/g/_
					> version: t/o/ng/_
					> version: t/o/_/n/_/g
					TRYING: g
					> version: t/o/_/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', 'ng', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', '_', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'n', 'g', '_', '_']
				adding dashed alternative: ['t', 'o', 'ng', '_', '_']
				adding dashed alternative: ['t', 'o', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'o', '_', 'ng', '_', '_']
				t/o/n/g(CVCC)
t/o/ng(CVC)
t/o/_/n/g(CVACC)
t/o/_/ng(CVAC)
t/o/n/g/_(CVCCA)
t/o/ng/_(CVCA)
t/o/_/n/_/g(CVACAC)
t/o/_/ng/_(CVACA)
t/o/n/g/_(CVCCA)
t/o/ng/_(CVCA)
t/o/_/n/g/_(CVACCA)
t/o/_/ng/_(CVACA)
t/o/n/g/_/_(CVCCAA)
t/o/ng/_/_(CVCAA)
t/o/_/n/_/_/g(CVACAAC)
t/o/_/ng/_/_(CVACAA)
				version split: ['t', 'o', 'n', 'g']
				{'string': 't/o/n/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g']
				version split: ['t', 'o', 'ng']
				{'string': 't/o/ng', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng']
				version split: ['t', 'o', '_', 'n', 'g']
				{'string': 't/o/_/n/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g']
				version split: ['t', 'o', '_', 'ng']
				{'string': 't/o/_/ng', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'ng']
				version split: ['t', 'o', 'n', 'g', '_']
				{'string': 't/o/n/g/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g', '_']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng', '_']
				version split: ['t', 'o', '_', 'n', '_', 'g']
				{'string': 't/o/_/n/_/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', '_', 'g']
				version split: ['t', 'o', '_', 'ng', '_']
				{'string': 't/o/_/ng/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'ng', '_']
				version split: ['t', 'o', 'n', 'g', '_']
				{'string': 't/o/n/g/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g', '_']
				version split: ['t', 'o', 'ng', '_']
				{'string': 't/o/ng/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng', '_']
				version split: ['t', 'o', '_', 'n', 'g', '_']
				{'string': 't/o/_/n/g/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', '_']
				version split: ['t', 'o', '_', 'ng', '_']
				{'string': 't/o/_/ng/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'ng', '_']
				version split: ['t', 'o', 'n', 'g', '_', '_']
				{'string': 't/o/n/g/_/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'n', 'g', '_', '_']
				version split: ['t', 'o', 'ng', '_', '_']
				{'string': 't/o/ng/_/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'ng', '_', '_']
				version split: ['t', 'o', '_', 'n', '_', '_', 'g']
				{'string': 't/o/_/n/_/_/g', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'n', '_', '_', 'g']
				version split: ['t', 'o', '_', 'ng', '_', '_']
				{'string': 't/o/_/ng/_/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				ANALYSING: tonge
					resolving (8)
					> version: t/o/n/g/e
					> version: t/o/ng/e
					> version: t/o/_/n/g/e
					TRYING: e
					> version: t/o/_/ng/e
					> version: t/o/n/g/_/e
					TRYING: e
					> version: t/o/ng/e/_
					> version: t/o/_/n/_/g/e
					TRYING: g
					> version: t/o/_/ng/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'o', 'n', 'g', 'e']
				{'string': 't/o/n/g/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', 'n', 'g', 'e']
				version split: ['t', 'o', 'ng', 'e']
				{'string': 't/o/ng/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', 'ng', 'e']
				version split: ['t', 'o', '_', 'n', 'g', 'e']
				{'string': 't/o/_/n/g/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', '_', 'n', 'g', 'e']
				version split: ['t', 'o', '_', 'ng', 'e']
				{'string': 't/o/_/ng/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', '_', 'ng', 'e']
				version split: ['t', 'o', 'n', 'g', '_', 'e']
				{'string': 't/o/n/g/_/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', 'n', 'g', '_', 'e']
				version split: ['t', 'o', 'ng', 'e', '_']
				{'string': 't/o/ng/e/_', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', 'ng', 'e', '_']
				version split: ['t', 'o', '_', 'n', '_', 'g', 'e']
				{'string': 't/o/_/n/_/g/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'o', '_', 'n', '_', 'g', 'e']
				version split: ['t', 'o', '_', 'ng', '_', 'e']
				{'string': 't/o/_/ng/_/e', 'rgx': '((t))/((o))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				ANALYSING: toung
					resolving (24)
					> version: t/o/u/n/g
					> version: t/o/u/n/g
					> version: t/o/u/ng
					> version: t/o/u/ng
					> version: t/ou/n/g
					> version: t/ou/ng
					> version: t/o/_/u/n/g
					TRYING: g
					> version: t/o/_/u/n/g
					TRYING: g
					> version: t/o/_/u/ng
					> version: t/o/_/u/ng
					> version: t/ou/_/n/g
					> version: t/ou/_/ng
					> version: t/o/u/n/_/g
					TRYING: g
					> version: t/o/u/n/_/g
					TRYING: g
					> version: t/o/u/ng/_
					> version: t/o/u/ng/_
					> version: t/ou/n/g/_
					> version: t/ou/ng/_
					> version: t/o/_/u/_/n/g
					TRYING: n
					> version: t/o/_/u/_/n/g
					TRYING: n
					> version: t/o/_/u/_/ng
					TRYING: ng
					> version: t/o/_/u/_/ng
					TRYING: ng
					> version: t/ou/_/n/_/g
					TRYING: g
					> version: t/ou/_/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'o', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'ou', 'n', 'g', '_']
				adding dashed alternative: ['t', 'ou', 'ng', '_']
				adding dashed alternative: ['t', 'o', '_', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', 'n', '_', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'o', '_', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'ou', '_', 'n', 'g', '_']
				adding dashed alternative: ['t', 'ou', '_', 'ng', '_']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_', '_']
				adding dashed alternative: ['t', 'o', 'u', 'ng', '_', '_']
				adding dashed alternative: ['t', 'ou', 'n', 'g', '_', '_']
				adding dashed alternative: ['t', 'ou', 'ng', '_', '_']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', '_', 'ng']
				adding dashed alternative: ['t', 'o', '_', 'u', '_', '_', 'ng']
				adding dashed alternative: ['t', 'ou', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'ou', '_', 'ng', '_', '_']
				t/o/u/n/g(CVCCC)
t/o/u/n/g(CVVCC)
t/o/u/ng(CVCC)
t/o/u/ng(CVVC)
t/ou/n/g(CVCC)
t/ou/ng(CVC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/n/g(CVAACC)
t/o/_/u/ng(CVAAC)
t/o/_/u/ng(CVAAC)
t/ou/_/n/g(CVACC)
t/ou/_/ng(CVAC)
t/o/u/n/_/g(CVACAC)
t/o/u/n/_/g(CVACAC)
t/o/u/ng/_(CVACA)
t/o/u/ng/_(CVACA)
t/ou/n/g/_(CVCCA)
t/ou/ng/_(CVCA)
t/o/_/u/_/n/g(CVAAACC)
t/o/_/u/_/n/g(CVAAACC)
t/o/_/u/_/ng(CVAAAC)
t/o/_/u/_/ng(CVAAAC)
t/ou/_/n/_/g(CVACAC)
t/ou/_/ng/_(CVACA)
t/o/u/n/g/_(CVACCA)
t/o/u/n/g/_(CVACCA)
t/o/u/ng/_(CVACA)
t/o/u/ng/_(CVACA)
t/ou/n/g/_(CVCCA)
t/ou/ng/_(CVCA)
t/o/_/u/n/_/g(CVAACAC)
t/o/_/u/n/_/g(CVAACAC)
t/o/_/u/ng/_(CVAACA)
t/o/_/u/ng/_(CVAACA)
t/ou/_/n/g/_(CVACCA)
t/ou/_/ng/_(CVACA)
t/o/u/n/_/_/g(CVACAAC)
t/o/u/n/_/_/g(CVACAAC)
t/o/u/ng/_/_(CVACAA)
t/o/u/ng/_/_(CVACAA)
t/ou/n/g/_/_(CVCCAA)
t/ou/ng/_/_(CVCAA)
t/o/_/u/_/_/n/g(CVAAAACC)
t/o/_/u/_/_/n/g(CVAAAACC)
t/o/_/u/_/_/ng(CVAAAAC)
t/o/_/u/_/_/ng(CVAAAAC)
t/ou/_/n/_/_/g(CVACAAC)
t/ou/_/ng/_/_(CVACAA)
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'n', 'g']
				{'string': 't/o/u/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'o', 'u', 'ng']
				{'string': 't/o/u/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng']
				version split: ['t', 'ou', 'n', 'g']
				{'string': 't/ou/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g']
				version split: ['t', 'ou', 'ng']
				{'string': 't/ou/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng']
				version split: ['t', 'o', '_', 'u', 'n', 'g']
				{'string': 't/o/_/u/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'n', 'g']
				version split: ['t', 'o', '_', 'u', 'n', 'g']
				{'string': 't/o/_/u/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'n', 'g']
				version split: ['t', 'o', '_', 'u', 'ng']
				{'string': 't/o/_/u/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'ng']
				version split: ['t', 'o', '_', 'u', 'ng']
				{'string': 't/o/_/u/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'ng']
				version split: ['t', 'ou', '_', 'n', 'g']
				{'string': 't/ou/_/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'n', 'g']
				version split: ['t', 'ou', '_', 'ng']
				{'string': 't/ou/_/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'ng']
				version split: ['t', 'o', 'u', 'n', '_', 'g']
				{'string': 't/o/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', 'g']
				version split: ['t', 'o', 'u', 'n', '_', 'g']
				{'string': 't/o/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', 'g']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'ou', 'n', 'g', '_']
				{'string': 't/ou/n/g/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', '_']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_']
				version split: ['t', 'o', '_', 'u', '_', 'n', 'g']
				{'string': 't/o/_/u/_/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', 'n', 'g']
				version split: ['t', 'o', '_', 'u', '_', 'n', 'g']
				{'string': 't/o/_/u/_/n/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', 'n', 'g']
				version split: ['t', 'o', '_', 'u', '_', 'ng']
				{'string': 't/o/_/u/_/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', 'ng']
				version split: ['t', 'o', '_', 'u', '_', 'ng']
				{'string': 't/o/_/u/_/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', 'ng']
				version split: ['t', 'ou', '_', 'n', '_', 'g']
				{'string': 't/ou/_/n/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'n', '_', 'g']
				version split: ['t', 'ou', '_', 'ng', '_']
				{'string': 't/ou/_/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'ng', '_']
				version split: ['t', 'o', 'u', 'n', 'g', '_']
				{'string': 't/o/u/n/g/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', '_']
				version split: ['t', 'o', 'u', 'n', 'g', '_']
				{'string': 't/o/u/n/g/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', 'g', '_']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'o', 'u', 'ng', '_']
				{'string': 't/o/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_']
				version split: ['t', 'ou', 'n', 'g', '_']
				{'string': 't/ou/n/g/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', '_']
				version split: ['t', 'ou', 'ng', '_']
				{'string': 't/ou/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_']
				version split: ['t', 'o', '_', 'u', 'n', '_', 'g']
				{'string': 't/o/_/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'n', '_', 'g']
				version split: ['t', 'o', '_', 'u', 'n', '_', 'g']
				{'string': 't/o/_/u/n/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'n', '_', 'g']
				version split: ['t', 'o', '_', 'u', 'ng', '_']
				{'string': 't/o/_/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'ng', '_']
				version split: ['t', 'o', '_', 'u', 'ng', '_']
				{'string': 't/o/_/u/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', 'ng', '_']
				version split: ['t', 'ou', '_', 'n', 'g', '_']
				{'string': 't/ou/_/n/g/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'n', 'g', '_']
				version split: ['t', 'ou', '_', 'ng', '_']
				{'string': 't/ou/_/ng/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'ng', '_']
				version split: ['t', 'o', 'u', 'n', '_', '_', 'g']
				{'string': 't/o/u/n/_/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', '_', 'g']
				version split: ['t', 'o', 'u', 'n', '_', '_', 'g']
				{'string': 't/o/u/n/_/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'n', '_', '_', 'g']
				version split: ['t', 'o', 'u', 'ng', '_', '_']
				{'string': 't/o/u/ng/_/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_', '_']
				version split: ['t', 'o', 'u', 'ng', '_', '_']
				{'string': 't/o/u/ng/_/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', 'u', 'ng', '_', '_']
				version split: ['t', 'ou', 'n', 'g', '_', '_']
				{'string': 't/ou/n/g/_/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'n', 'g', '_', '_']
				version split: ['t', 'ou', 'ng', '_', '_']
				{'string': 't/ou/ng/_/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', 'ng', '_', '_']
				version split: ['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				{'string': 't/o/_/u/_/_/n', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				version split: ['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				{'string': 't/o/_/u/_/_/n', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', '_', 'n', 'g']
				version split: ['t', 'o', '_', 'u', '_', '_', 'ng']
				{'string': 't/o/_/u/_/_/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', '_', 'ng']
				version split: ['t', 'o', '_', 'u', '_', '_', 'ng']
				{'string': 't/o/_/u/_/_/ng', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'o', '_', 'u', '_', '_', 'ng']
				version split: ['t', 'ou', '_', 'n', '_', '_', 'g']
				{'string': 't/ou/_/n/_/_/g', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'ou', '_', 'n', '_', '_', 'g']
				version split: ['t', 'ou', '_', 'ng', '_', '_']
				{'string': 't/ou/_/ng/_/_', 'rgx': '((t))/((ou)|(o))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				ANALYSING: tun
					resolving (8)
					> version: t/u/n
					> version: t/u/n
					> version: t/u/_/n
					> version: t/u/_/n
					> version: t/u/n/_
					> version: t/u/n/_
					> version: t/u/_/n/_
					> version: t/u/_/n/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_']
				adding dashed alternative: ['t', 'u', 'n', '_', '_']
				adding dashed alternative: ['t', 'u', 'n', '_', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', '_']
				t/u/n(CCC)
t/u/n(CVC)
t/u/_/n(CAAC)
t/u/_/n(CAAC)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/_/n/_(CAACA)
t/u/_/n/_(CAACA)
t/u/n/_(CACA)
t/u/n/_(CACA)
t/u/_/n/_(CAACA)
t/u/_/n/_(CAACA)
t/u/n/_/_(CACAA)
t/u/n/_/_(CACAA)
t/u/_/n/_/_(CAACAA)
t/u/_/n/_/_(CAACAA)
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', 'n']
				{'string': 't/u/n', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n']
				version split: ['t', 'u', '_', 'n']
				{'string': 't/u/_/n', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n']
				version split: ['t', 'u', '_', 'n']
				{'string': 't/u/_/n', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_']
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', 'n', '_']
				{'string': 't/u/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_']
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_']
				version split: ['t', 'u', '_', 'n', '_']
				{'string': 't/u/_/n/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_']
				version split: ['t', 'u', 'n', '_', '_']
				{'string': 't/u/n/_/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', '_']
				version split: ['t', 'u', 'n', '_', '_']
				{'string': 't/u/n/_/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', '_', '_']
				version split: ['t', 'u', '_', 'n', '_', '_']
				{'string': 't/u/_/n/_/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				version split: ['t', 'u', '_', 'n', '_', '_']
				{'string': 't/u/_/n/_/_', 'rgx': '((t))/((u))/((_))/((n))/((_))/((_))$'}
				ANALYSING: tung
					resolving (16)
					> version: t/u/n/g
					> version: t/u/n/g
					> version: t/u/ng
					> version: t/u/ng
					> version: t/u/_/n/g
					> version: t/u/_/n/g
					> version: t/u/_/ng
					> version: t/u/_/ng
					> version: t/u/n/g/_
					> version: t/u/n/g/_
					> version: t/u/ng/_
					> version: t/u/ng/_
					> version: t/u/_/n/_/g
					TRYING: g
					> version: t/u/_/n/_/g
					TRYING: g
					> version: t/u/_/ng/_
					> version: t/u/_/ng/_
					RESULT:  ['_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', 'g', '_']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_', '_']
				adding dashed alternative: ['t', 'u', 'n', 'g', '_', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_', '_']
				adding dashed alternative: ['t', 'u', 'ng', '_', '_']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'u', '_', 'n', '_', '_', 'g']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_', '_']
				adding dashed alternative: ['t', 'u', '_', 'ng', '_', '_']
				t/u/n/g(CCCC)
t/u/n/g(CVCC)
t/u/ng(CCC)
t/u/ng(CVC)
t/u/_/n/g(CAACC)
t/u/_/n/g(CAACC)
t/u/_/ng(CAAC)
t/u/_/ng(CAAC)
t/u/n/g/_(CACCA)
t/u/n/g/_(CACCA)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
t/u/_/n/_/g(CAACAC)
t/u/_/n/_/g(CAACAC)
t/u/_/ng/_(CAACA)
t/u/_/ng/_(CAACA)
t/u/n/g/_(CACCA)
t/u/n/g/_(CACCA)
t/u/ng/_(CACA)
t/u/ng/_(CACA)
t/u/_/n/g/_(CAACCA)
t/u/_/n/g/_(CAACCA)
t/u/_/ng/_(CAACA)
t/u/_/ng/_(CAACA)
t/u/n/g/_/_(CACCAA)
t/u/n/g/_/_(CACCAA)
t/u/ng/_/_(CACAA)
t/u/ng/_/_(CACAA)
t/u/_/n/_/_/g(CAACAAC)
t/u/_/n/_/_/g(CAACAAC)
t/u/_/ng/_/_(CAACAA)
t/u/_/ng/_/_(CAACAA)
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'n', 'g']
				{'string': 't/u/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', 'ng']
				{'string': 't/u/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng']
				version split: ['t', 'u', '_', 'n', 'g']
				{'string': 't/u/_/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g']
				version split: ['t', 'u', '_', 'n', 'g']
				{'string': 't/u/_/n/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g']
				version split: ['t', 'u', '_', 'ng']
				{'string': 't/u/_/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng']
				version split: ['t', 'u', '_', 'ng']
				{'string': 't/u/_/ng', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', '_', 'n', '_', 'g']
				{'string': 't/u/_/n/_/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'g']
				version split: ['t', 'u', '_', 'n', '_', 'g']
				{'string': 't/u/_/n/_/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'g']
				version split: ['t', 'u', '_', 'ng', '_']
				{'string': 't/u/_/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng', '_']
				version split: ['t', 'u', '_', 'ng', '_']
				{'string': 't/u/_/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng', '_']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'n', 'g', '_']
				{'string': 't/u/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', 'ng', '_']
				{'string': 't/u/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_']
				version split: ['t', 'u', '_', 'n', 'g', '_']
				{'string': 't/u/_/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', '_']
				version split: ['t', 'u', '_', 'n', 'g', '_']
				{'string': 't/u/_/n/g/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', '_']
				version split: ['t', 'u', '_', 'ng', '_']
				{'string': 't/u/_/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng', '_']
				version split: ['t', 'u', '_', 'ng', '_']
				{'string': 't/u/_/ng/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'ng', '_']
				version split: ['t', 'u', 'n', 'g', '_', '_']
				{'string': 't/u/n/g/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_', '_']
				version split: ['t', 'u', 'n', 'g', '_', '_']
				{'string': 't/u/n/g/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_', '_']
				version split: ['t', 'u', 'ng', '_', '_']
				{'string': 't/u/ng/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_', '_']
				version split: ['t', 'u', 'ng', '_', '_']
				{'string': 't/u/ng/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', 'ng', '_', '_']
				version split: ['t', 'u', '_', 'n', '_', '_', 'g']
				{'string': 't/u/_/n/_/_/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', '_', 'g']
				version split: ['t', 'u', '_', 'n', '_', '_', 'g']
				{'string': 't/u/_/n/_/_/g', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', '_', 'g']
				version split: ['t', 'u', '_', 'ng', '_', '_']
				{'string': 't/u/_/ng/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				version split: ['t', 'u', '_', 'ng', '_', '_']
				{'string': 't/u/_/ng/_/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((_))$'}
				ANALYSING: tunge
					resolving (16)
					> version: t/u/n/g/e
					> version: t/u/n/g/e
					> version: t/u/ng/e
					> version: t/u/ng/e
					> version: t/u/_/n/g/e
					TRYING: e
					> version: t/u/_/n/g/e
					TRYING: e
					> version: t/u/_/ng/e
					> version: t/u/_/ng/e
					> version: t/u/n/g/_/e
					TRYING: e
					> version: t/u/n/g/_/e
					TRYING: e
					> version: t/u/ng/e/_
					> version: t/u/ng/e/_
					> version: t/u/_/n/_/g/e
					TRYING: g
					> version: t/u/_/n/_/g/e
					TRYING: g
					> version: t/u/_/ng/_/e
					TRYING: e
					> version: t/u/_/ng/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'n', 'g', 'e']
				{'string': 't/u/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'g', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				version split: ['t', 'u', 'ng', 'e']
				{'string': 't/u/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'ng', 'e']
				version split: ['t', 'u', '_', 'n', 'g', 'e']
				{'string': 't/u/_/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', 'e']
				version split: ['t', 'u', '_', 'n', 'g', 'e']
				{'string': 't/u/_/n/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'g', 'e']
				version split: ['t', 'u', '_', 'ng', 'e']
				{'string': 't/u/_/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'ng', 'e']
				version split: ['t', 'u', '_', 'ng', 'e']
				{'string': 't/u/_/ng/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'ng', 'e']
				version split: ['t', 'u', 'n', 'g', '_', 'e']
				{'string': 't/u/n/g/_/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_', 'e']
				version split: ['t', 'u', 'n', 'g', '_', 'e']
				{'string': 't/u/n/g/_/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'g', '_', 'e']
				version split: ['t', 'u', 'ng', 'e', '_']
				{'string': 't/u/ng/e/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'ng', 'e', '_']
				version split: ['t', 'u', 'ng', 'e', '_']
				{'string': 't/u/ng/e/_', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'ng', 'e', '_']
				version split: ['t', 'u', '_', 'n', '_', 'g', 'e']
				{'string': 't/u/_/n/_/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'g', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'g', 'e']
				{'string': 't/u/_/n/_/g/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'g', 'e']
				version split: ['t', 'u', '_', 'ng', '_', 'e']
				{'string': 't/u/_/ng/_/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				version split: ['t', 'u', '_', 'ng', '_', 'e']
				{'string': 't/u/_/ng/_/e', 'rgx': '((t))/((u))/((_))/((ng)|(n)|(g))/((_))/((e))$'}
				ANALYSING: tunke
					resolving (8)
					> version: t/u/n/k/e
					> version: t/u/n/k/e
					> version: t/u/_/n/k/e
					TRYING: e
					> version: t/u/_/n/k/e
					TRYING: e
					> version: t/u/n/k/_/e
					TRYING: e
					> version: t/u/n/k/_/e
					TRYING: e
					> version: t/u/_/n/_/k/e
					TRYING: k
					> version: t/u/_/n/_/k/e
					TRYING: k
					RESULT:  ['e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', 'e']
				{'string': 't/u/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'k', 'e']
				version split: ['t', 'u', '_', 'n', 'k', 'e']
				{'string': 't/u/_/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'k', 'e']
				version split: ['t', 'u', '_', 'n', 'k', 'e']
				{'string': 't/u/_/n/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'k', 'e']
				version split: ['t', 'u', 'n', 'k', '_', 'e']
				{'string': 't/u/n/k/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'k', '_', 'e']
				version split: ['t', 'u', 'n', 'k', '_', 'e']
				{'string': 't/u/n/k/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'k', '_', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'k', 'e']
				{'string': 't/u/_/n/_/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'k', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'k', 'e']
				{'string': 't/u/_/n/_/k/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'k', 'e']
				ANALYSING: tunȝe
					resolving (8)
					> version: t/u/n/ȝ/e
					> version: t/u/n/ȝ/e
					> version: t/u/_/n/ȝ/e
					TRYING: e
					> version: t/u/_/n/ȝ/e
					TRYING: e
					> version: t/u/n/ȝ/_/e
					TRYING: e
					> version: t/u/n/ȝ/_/e
					TRYING: e
					> version: t/u/_/n/_/ȝ/e
					TRYING: ȝ
					> version: t/u/_/n/_/ȝ/e
					TRYING: ȝ
					RESULT:  ['e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', 'e']
				{'string': 't/u/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', 'e']
				version split: ['t', 'u', '_', 'n', 'ȝ', 'e']
				{'string': 't/u/_/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'ȝ', 'e']
				version split: ['t', 'u', '_', 'n', 'ȝ', 'e']
				{'string': 't/u/_/n/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', 'ȝ', 'e']
				version split: ['t', 'u', 'n', 'ȝ', '_', 'e']
				{'string': 't/u/n/ȝ/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', '_', 'e']
				version split: ['t', 'u', 'n', 'ȝ', '_', 'e']
				{'string': 't/u/n/ȝ/_/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', 'n', 'ȝ', '_', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/_/n/_/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'ȝ', 'e']
				version split: ['t', 'u', '_', 'n', '_', 'ȝ', 'e']
				{'string': 't/u/_/n/_/ȝ/e', 'rgx': '((t))/((u))/((_))/((n))/((_))/((e))$'}
				_____REMOVING________['t', 'u', '_', 'n', '_', 'ȝ', 'e']
		only one version left: ['t', 'o', '_', 'n', '_', '_']
		only one version left: ['t', 'o', '_', 'ng', '_', '_']
		only one version left: ['t', 'o', '_', 'ng', '_', 'e']
		only one version left: ['t', 'ou', '_', 'ng', '_', '_']
		only one version left: ['t', 'u', '_', 'n', '_', '_']
		only one version left: ['t', 'u', '_', 'ng', '_', '_']
		only one version left: ['t', 'u', '_', 'ng', '_', 'e']
		FAIL: 
		FAIL: 
		SPLIT: ['t', 'o', 'n', 'g', 'u', 'e']
		SPLIT: ['t', 'o', 'u', 'n', 'g', 'e']
		SPLIT: ['t', 'o', 'u', 'n', 'gu', 'e']
		SPLIT: ['t', 'o', '_', 'n', '_', '_']
		['t', 'o', '_', 'n', '_', '_']
		SPLIT: ['t', 'o', '_', 'ng', '_', '_']
		['t', 'o', '_', 'ng', '_', '_']
		SPLIT: ['t', 'o', '_', 'ng', '_', 'e']
		['t', 'o', '_', 'ng', '_', 'e']
		SPLIT: ['t', 'ou', '_', 'ng', '_', '_']
		['t', 'ou', '_', 'ng', '_', '_']
		SPLIT: ['t', 'u', '_', 'n', '_', '_']
		['t', 'u', '_', 'n', '_', '_']
		['t', 'u', '_', 'n', '_', '_']
		SPLIT: ['t', 'u', '_', 'ng', '_', '_']
		['t', 'u', '_', 'ng', '_', '_']
		['t', 'u', '_', 'ng', '_', '_']
		SPLIT: ['t', 'u', '_', 'ng', '_', 'e']
		['t', 'u', '_', 'ng', '_', 'e']
		['t', 'u', '_', 'ng', '_', 'e']
		SPLIT: ['t', 'u', '_', 'n', '_', 'e', '----!']
		SPLIT: ['t', 'u', '_', 'n', '_', 'e', '----!']
		version for pattern CVCCCV is INVALID
		[{'ou', 'u', 'o'}, {'u', 'n', '_'}, {'u', 'g', 'gu', '_'}]
		2
		OVERVIEW: version for pattern CVCCCV
{'ou', 'u', 'o'}, {'u', 'n', '_'}, {'u', 'g', 'gu', '_'}
faulty splits: 2
tune----! <-! tunke
tune----! <-! tunȝe
t | o | n | g | u | e
t | o | u | n | g | e
t | o | u | n | gu | e
t | o | _ | n | _ | _
t | o | _ | ng | _ | _
t | o | _ | ng | _ | e
t | ou | _ | ng | _ | _
t | u | _ | n | _ | _
t | u | _ | ng | _ | _
t | u | _ | ng | _ | e
t | u | _ | n | _ | e | ----!
t | u | _ | n | _ | e | ----!
2 : {'u', 'n'},{'u', 'n', 'ng', '_'},{'u', 'n', '_'}
4 : {'u', 'n', '_', 'g', 'gu'},{'u', 'g', 'gu', '_'},{'u', 'k', '_', 'g', 'gu'},{'u', 'ȝ', '_', 'g', 'gu'},{'u', '_', 'g', 'ng', 'gu'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCCV
{'ou', 'u', 'o'}, {'k', 'ȝ', '_', 'g', 'gu'}
faulty splits: 0
t | o | n | g | e
t | o | n | gu | e
t | ou | n | g | e
t | ou | n | gu | e
t | u | n | g | e
t | u | n | k | e
t | u | n | ȝ | e
t | o | n | _ | _
t | o | ng | _ | _
t | ou | ng | _ | _
t | u | n | _ | _
t | u | ng | _ | _
3 : {'k', 'n', 'ȝ', '_', 'g', 'gu'},{'k', 'ȝ', '_', 'g', 'gu'},{'k', 'ȝ', '_', 'g', 'ng', 'gu'}
	{'CVCCCC', 'CCCVC', 'CVCVC'}
