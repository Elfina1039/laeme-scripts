Analysis object initialized
{'huan': 1, 'huannes': 2, 'hƿanene': 2, 'hƿannen': 1, 'hƿanon': 2, 'hƿeðen': 1, 'hwenene': 1, 'hƿenne': 2, 'hwenne': 1, 'hƿeo': 1, 'hƿeon': 1, 'hƿeonene': 4, 'hƿeonne': 1, 'hƿonne': 2, 'qðen': 1, 'queþen': 2, 'wa': 1, 'ƿanene': 1, 'wanene': 1, 'wanne': 4, 'ƿeðen': 1, 'whennes': 1, 'whone': 1, 'ƿhonene': 1, 'whonene': 2, 'wonene': 1, 'ȝwannes': 3}
Lexel initialized
[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
MIN pattern length=6
Pattern CVCCVC is valid
Pattern CCVCCVC is valid
Pattern CCVVCVCV is valid
Pattern CVVCVCV is valid
Pattern CVCCV is invalid
Pattern CVVCCVC is valid
Pattern CCVCV is invalid
Pattern CCVCVCV is valid
Pattern CVVCVC is valid
Pattern CCVCVC is valid
Pattern CVCVCV is valid
Pattern CCVCCV is valid
Pattern CVCVC is invalid
Pattern CVCV is invalid
{'value': 4, 'patterns': ['CCVCVC']}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CVCCVC
	Selection for pattern: CVCCVC completed
	Making a version for pattern: CVCCVC
			___CVCCVC : 0___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, ȝw, hu
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> hƿ, ȝw, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
hƿ/a/n/e/n/e(CVCVCV)
_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> hu, h, ȝw, _
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> hu, hƿ, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
hƿ/a/n/o/n(CVCVC)
_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw, hu
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> _, hƿ, ȝw, hu
					> version: h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw, hu
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> _, hƿ, ȝw, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'nn', 'e']
				h/ƿ/e/n/n/e(CCVCCV)
hƿ/e/n/n/e(CVCCV)
h/ƿ/e/nn/e(CCVCV)
hƿ/e/nn/e(CVCV)
_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> hu, h, ȝw, _
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> hu, hƿ, ȝw, _
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> hu, h, ȝw, _
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> hu, hƿ, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				h/ƿ/e/o/n/e/n/e(CCVVCVCV)
hƿ/e/o/n/e/n/e(CVVCVCV)
h/ƿ/eo/n/e/n/e(CCVCVCV)
hƿ/eo/n/e/n/e(CVCVCV)
_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/hƿ/e/o/n/e/n/e(ACVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/hƿ/eo/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw, hu
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> _, hƿ, ȝw, hu
					> version: h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw, hu
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> _, hƿ, ȝw, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'nn', 'e']
				h/ƿ/o/n/n/e(CCVCCV)
hƿ/o/n/n/e(CVCCV)
h/ƿ/o/nn/e(CCVCV)
hƿ/o/nn/e(CVCV)
_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> hu, q, ȝw, _
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> hu, q, ȝw, _
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, hu, ȝw, _
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> hu, q, ȝw, _
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, hu, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw, hu
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, hu, ȝw, _
					> version: wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> hu, wh, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				w/h/o/n/e/n/e(CCVCVCV)
wh/o/n/e/n/e(CVCVCV)
_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVCCVC : 1___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/e/nn/e
					TRYING: h
					> version: _/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					> version: _/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/hƿ/eo/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/hƿ/e/o/n/e/n/e(ACVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/hƿ/eo/n/e/n/e(ACVCVCV)
_/_/h/ƿ/e/o/n/e/n/e(AACCVVCVCV)
_/_/hƿ/e/o/n/e/n/e(AACVVCVCV)
_/_/h/ƿ/eo/n/e/n/e(AACCVCVCV)
_/_/hƿ/eo/n/e/n/e(AACVCVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/o/nn/e
					TRYING: h
					> version: _/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'w', 'a', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/w/h/o/n/e/n/e
					TRYING: w
					> version: _/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCCVC : 2___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: _/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/h/ƿ/e/o/n/e/n/e(AACCVVCVCV)
_/_/hƿ/e/o/n/e/n/e(AACVVCVCV)
_/_/h/ƿ/eo/n/e/n/e(AACCVCVCV)
_/_/hƿ/eo/n/e/n/e(AACVCVCV)
_/_/_/h/ƿ/e/o/n/e/n/e(AAACCVVCVCV)
_/_/_/hƿ/e/o/n/e/n/e(AAACVVCVCV)
_/_/_/h/ƿ/eo/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/eo/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> n, wh, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCCVC : 3___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: _/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/_/h/ƿ/e/o/n/e/n/e(AAACCVVCVCV)
_/_/_/hƿ/e/o/n/e/n/e(AAACVVCVCV)
_/_/_/h/ƿ/eo/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/eo/n/e/n/e(AAACVCVCV)
_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAACCVVCVCV)
_/_/_/_/hƿ/e/o/n/e/n/e(AAAACVVCVCV)
_/_/_/_/h/ƿ/eo/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/eo/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					> version: _/_/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _
					> version: _/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> n, wh, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCCVC : 4___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/a/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
_/_/_/_/_/h/ƿ/a/n/o/n(AAAAACCVCVC)
_/_/_/_/_/hƿ/a/n/o/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/e/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/e/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/e/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/e/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAACCVVCVCV)
_/_/_/_/hƿ/e/o/n/e/n/e(AAAACVVCVCV)
_/_/_/_/h/ƿ/eo/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/eo/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAAACCVVCVCV)
_/_/_/_/_/hƿ/e/o/n/e/n/e(AAAAACVVCVCV)
_/_/_/_/_/h/ƿ/eo/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/eo/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/o/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/o/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/o/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/o/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVCCVC : 5___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> hƿ, s
					RESULT:  ['h']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					RESULT:  ['h']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					> version: _/_/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					RESULT:  ['h']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					> version: _/_/_/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					RESULT:  ['h']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					> version: _/_/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, s
					RESULT:  ['h']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, s
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, s
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, s
					> version: _/_/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, s
					> version: _/_/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> h, wh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/w/h/o/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/wh/o/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/wh/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['hu', 'a', 'n', 'n', 'e', 's']
		SPLIT: ['ȝw', 'a', 'n', 'n', 'e', 's']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCVC is INVALID
		[{'hu', 'ȝw', '_'}]
		8
		OVERVIEW: version for pattern CVCCVC
{'hu', 'ȝw', '_'}
faulty splits: 8
['']['']['']['']['']['h'] <-! hƿanene
['']['']['']['']['']['h'] <-! hƿanon
['']['']['']['']['']['h'] <-! hƿenne
['']['']['']['']['']['h'] <-! hƿeonene
['']['']['']['']['']['h'] <-! hƿonne
[''][''][''][''][''][''] <-! queþen
[''][''][''][''][''][''] <-! wanne
[''][''][''][''][''][''] <-! whonene
hu | a | n | n | e | s
ȝw | a | n | n | e | s
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['h']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['h']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['h']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['h']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['h']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', '_', 'ȝw', 'hu'},{'_', 'hƿ', 'ȝw', 'hu'},{'qu', 'hu', 'ȝw', '_'},{'hu', 'hƿ', 'ȝw', '_'},{'hƿ', 'ȝw', 'hu'},{'hu', 'q', 'ȝw', '_'},{'hu', 'wh', 'ȝw', '_'},{'h', 'ȝw', 'hu'},{'hu', 'h', 'ȝw', '_'},{'w', 'hu', 'ȝw', '_'},{'w', '_', 'ȝw', 'hu'}
2 : {'n', 'q', '_'},{'n', 'hƿ', '_'},{'n', 'hƿ'},{'qu', 'n', '_'},{'n', 'h', '_'},{'n', 'w', '_'},{'n', 'h'},{'n', 'wh', '_'}
3 : {'n', 'q', '_'},{'n', 'hƿ', '_'},{'n', 'hƿ'},{'qu', 'n', '_'},{'n', 'h', '_'},{'n', 'w', '_'},{'n', 'h'},{'n', 'wh', '_'}
5 : {'qu', 'h', 's'},{'h', 'q', 's'},{'h', 'wh', '_', 's'},{'w', 'h', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CCVCCVC
	Selection for pattern: CCVCCVC completed
	Making a version for pattern: CCVCCVC
			___CCVCCVC : 0___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					> version: h/ƿ/e/nn/e
					TRYING: h
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					> version: h/ƿ/o/nn/e
					TRYING: h
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, ȝ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, ȝ
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, ȝ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, ȝ
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, ȝ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					> version: w/a/nn/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					> version: wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> w, ȝ, h, _, wh
					RESULT:  ['w']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((w))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
			___CCVCCVC : 1___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: h/ƿ/e/nn/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					> version: h/ƿ/eo/n/e/n/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: h/ƿ/o/nn/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, w, q, ƿ
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, w, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, w, ƿ, qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, w, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, w, ƿ, qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: a
					> version: w/a/nn/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['w', '_', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
w/_/a/n/n/e(CAVCCV)
w/_/a/nn/e(CAVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w/a', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w/a', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/e/n/e
					TRYING: h
					RESULT:  ['h']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w/h', 'rgx': '((w))/((h))$'}
			___CCVCCVC : 2___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a', 'rgx': '((h))/((ƿ))/((a))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a', 'rgx': '((h))/((ƿ))/((a))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h))/((ƿ))/((e))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h))/((ƿ))/((e))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: e
					> version: h/ƿ/eo/n/e/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'eo'}
					RESULT:  ['e', 'eo']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h))/((ƿ))/((e)|(eo))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo', 'rgx': '((h))/((ƿ))/((e)|(eo))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h))/((ƿ))/((o))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h))/((ƿ))/((o))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: a
					> version: w/_/a/nn/e
					TRYING: a
					RESULT:  ['a']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a', 'rgx': '((w))/((_))/((a))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a', 'rgx': '((w))/((_))/((a))$'}
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/e/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w/h/o', 'rgx': '((w))/((h))/((o))$'}
			___CCVCCVC : 3___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n', 'rgx': '((h))/((ƿ))/((a))/((n))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n', 'rgx': '((h))/((ƿ))/((a))/((n))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: n
					> version: h/ƿ/e/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: o
					> version: h/ƿ/eo/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/e/o', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: n
					> version: h/ƿ/o/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: n
					> version: w/_/a/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n', 'rgx': '((w))/((_))/((a))/((n)|(nn))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a/nn', 'rgx': '((w))/((_))/((a))/((n)|(nn))$'}
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w/h/o/n', 'rgx': '((w))/((h))/((o))/((n))$'}
			___CCVCCVC : 4___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
h/ƿ/a/n/_/e/n/e(CCVCAVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/e', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/_', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
h/ƿ/a/n/_/o/n(CCVCAVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n/o', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				{'string': 'h/ƿ/a/n/_', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: n
					> version: h/ƿ/e/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n/n', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((n))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn/e', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (1)
					> version: h/ƿ/eo/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				h/ƿ/eo/n/e/n/e(CCVCVCV)
h/ƿ/eo/n/_/e/n/e(CCVCAVCV)
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/e', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/_', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: n
					> version: h/ƿ/o/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n/n', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((n))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn/e', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: n
					> version: w/_/a/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n/n', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((n))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a/nn/e', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((n))$'}
				_____REMOVING________['w', '_', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'h', 'o', 'n', '_', 'e', 'n', 'e']
				w/h/o/n/e/n/e(CCVCVCV)
w/h/o/n/_/e/n/e(CCVCAVCV)
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w/h/o/n/e', 'rgx': '((w))/((h))/((o))/((n))/((_))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['w', 'h', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'w/h/o/n/_', 'rgx': '((w))/((h))/((o))/((n))/((_))$'}
			___CCVCCVC : 5___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/_/e', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))/((e))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/_/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				{'string': 'h/ƿ/a/n/_/o', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))/((o))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n/n/e', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: h/ƿ/eo/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/_/e', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))/((_))/((e))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n/n/e', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (1)
					> version: w/_/a/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n/n/e', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'h', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'w/h/o/n/_/e', 'rgx': '((w))/((h))/((o))/((n))/((_))/((e))$'}
			___CCVCCVC : 6___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/_/e/n/e', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/_/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				{'string': 'h/ƿ/a/n/_/o/n', 'rgx': '((h))/((ƿ))/((a))/((n))/((_))/((o))/((n))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/n/n/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', 'n', 'n', 'e', '_']
				h/ƿ/e/n/n/e(CCVCCV)
h/ƿ/e/n/n/e/_(CCVCCVA)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n/n/e', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((n))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e', '_']
				{'string': 'h/ƿ/e/n/n/e/_', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((n))/((e))/((_))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: h/ƿ/eo/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/_/e/n/e', 'rgx': '((h))/((ƿ))/((e)|(eo))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/n/n/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', 'n', 'n', 'e', '_']
				h/ƿ/o/n/n/e(CCVCCV)
h/ƿ/o/n/n/e/_(CCVCCVA)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n/n/e', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((n))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e', '_']
				{'string': 'h/ƿ/o/n/n/e/_', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((n))/((e))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					> version: _/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (1)
					> version: w/_/a/n/n/e
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'a', 'n', 'n', 'e', '_']
				w/_/a/n/n/e(CAVCCV)
w/_/a/n/n/e/_(CAVCCVA)
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n/n/e', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((n))/((e))/((_))$'}
				_____REMOVING________['w', '_', 'a', 'n', 'n', 'e']
				version split: ['w', '_', 'a', 'n', 'n', 'e', '_']
				{'string': 'w/_/a/n/n/e/_', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((n))/((e))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: w/h/o/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['w', 'h', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'w/h/o/n/_/e/n/e', 'rgx': '((w))/((h))/((o))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['w', 'h', 'o', 'n', '_', 'e', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
		only one version left: ['h', 'ƿ', 'e', 'n', 'n', 'e', '_']
		FAIL: 
		only one version left: ['h', 'ƿ', 'o', 'n', 'n', 'e', '_']
		FAIL: 
		only one version left: ['w', '_', 'a', 'n', 'n', 'e', '_']
		FAIL: 
		SPLIT: ['h', 'u', 'a', 'n', 'n', 'e', 's']
		SPLIT: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
		SPLIT: ["['h']", "['ƿ']", "['a']", "['n']", "['_']", "['e']", "['n']"]
		SPLIT: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
		['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
		SPLIT: ['h', 'ƿ', 'e', 'n', 'n', 'e', '_']
		['h', 'ƿ', 'e', 'n', 'n', 'e', '_']
		SPLIT: ["['h']", "['ƿ']", "['e', 'eo']", "['n']", "['_']", "['e']", "['n']"]
		SPLIT: ['h', 'ƿ', 'o', 'n', 'n', 'e', '_']
		['h', 'ƿ', 'o', 'n', 'n', 'e', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['w', '_', 'a', 'n', 'n', 'e', '_']
		['w', '_', 'a', 'n', 'n', 'e', '_']
		SPLIT: ["['w']", "['h']", "['o']", "['n']", "['_']", "['e']", "['n']"]
		version for pattern CCVCCVC is INVALID
		[]
		4
		OVERVIEW: version for pattern CCVCCVC

faulty splits: 4
['h']['ƿ']['a']['n']['']['e']['n'] <-! hƿanene
['h']['ƿ']['e', 'eo']['n']['']['e']['n'] <-! hƿeonene
[''][''][''][''][''][''][''] <-! queþen
['w']['h']['o']['n']['']['e']['n'] <-! whonene
h | u | a | n | n | e | s
ȝ | w | a | n | n | e | s
['h'] | ['ƿ'] | ['a'] | ['n'] | ['_'] | ['e'] | ['n']
h | ƿ | a | n | _ | o | n
h | ƿ | e | n | n | e | _
['h'] | ['ƿ'] | ['e', 'eo'] | ['n'] | ['_'] | ['e'] | ['n']
h | ƿ | o | n | n | e | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
w | _ | a | n | n | e | _
['w'] | ['h'] | ['o'] | ['n'] | ['_'] | ['e'] | ['n']
0 : {'h', 'q', 'ȝ'},{'qu', 'h', 'ȝ'}
1 : {'u', 'w', 'q', 'ƿ'},{'u', 'w', 'ƿ', 'qu'}
3 : {'n', 'q', 'nn'},{'qu', 'n', 'nn'}
4 : {'qu', 'n', '_'},{'n', 'q', '_'}
6 : {'n', 'q', '_', 's'},{'qu', 'n', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CCVVCVCV
	Selection for pattern: CCVVCVCV completed
	Making a version for pattern: CCVVCVCV
			___CCVVCVCV : 0___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: hu/a/n/n/e/s
					TRYING: hu
					adding blocked set: C = C >> h, hu
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: hu/a/nn/e/s
					TRYING: hu
					adding blocked set: C = C >> h, hu
					RESULT:  ['h']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/e/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/e/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/o/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/o/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, hƿ
					> version: wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['wh']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((wh))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((wh))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CCVVCVCV : 1___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: ƿ
					> version: hƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					> version: hƿ/a/n/o/n
					TRYING: a
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: hƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: ƿ
					> version: hƿ/e/nn/e
					TRYING: e
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: hƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: ƿ
					> version: hƿ/o/nn/e
					TRYING: o
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, ƿ, qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, ƿ, qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['w']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/n/e/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				wh/o/n/e/n/e(CVCVCV)
wh/_/o/n/e/n/e(CAVCVCV)
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/o', 'rgx': '((wh))/((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_', 'rgx': '((wh))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, ƿ, u, ȝw, _
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, ƿ, u, ȝw, _
					RESULT:  ['ȝ']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((ȝ))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((ȝ))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((ȝ))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((ȝ))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
			___CCVVCVCV : 2___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))/((a))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))/((a))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h)|(hƿ))/((ƿ))/((o))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h)|(hƿ))/((ƿ))/((o))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: a
					> version: _/w/a/nn/e
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/e/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o', 'rgx': '((wh))/((_))/((o))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝ/_/w/a/n/n/e/s(ACACVCCVC)
_/ȝ/_/w/a/nn/e/s(ACACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/w', 'rgx': '((_))/((ȝ))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/w', 'rgx': '((_))/((ȝ))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_', 'rgx': '((_))/((ȝ))/((_))$'}
				version split: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_', 'rgx': '((_))/((ȝ))/((_))$'}
			___CCVVCVCV : 3___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: nn
					> version: h/u/a/nn/e/s
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				adding dashed alternative: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				adding dashed alternative: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				adding dashed alternative: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				h/u/a/n/n/e/s(CCVCCVC)
h/u/a/n/n/e/s(CVVCCVC)
h/u/a/nn/e/s(CCVCVC)
h/u/a/nn/e/s(CVVCVC)
h/u/a/_/n/n/e/s(CAVACCVC)
h/u/a/_/n/n/e/s(CAVACCVC)
h/u/a/_/nn/e/s(CAVACVC)
h/u/a/_/nn/e/s(CAVACVC)
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_', 'rgx': '((h))/((u))/((a))/((_))$'}
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_', 'rgx': '((h))/((u))/((a))/((_))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_', 'rgx': '((h))/((u))/((a))/((_))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_', 'rgx': '((h))/((u))/((a))/((_))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
h/ƿ/a/_/n/e/n/e(CCVACVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/_', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
h/ƿ/a/_/n/o/n(CCVACVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/_', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: n
					> version: h/ƿ/e/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', '_', 'n', 'n', 'e']
				adding dashed alternative: ['h', 'ƿ', 'e', '_', 'nn', 'e']
				h/ƿ/e/n/n/e(CCVCCV)
h/ƿ/e/nn/e(CCVCV)
h/ƿ/e/_/n/n/e(CCVACCV)
h/ƿ/e/_/nn/e(CCVACV)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['h', 'ƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))$'}
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e']
				{'string': 'h/ƿ/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: n
					> version: h/ƿ/o/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', '_', 'n', 'n', 'e']
				adding dashed alternative: ['h', 'ƿ', 'o', '_', 'nn', 'e']
				h/ƿ/o/n/n/e(CCVCCV)
h/ƿ/o/nn/e(CCVCV)
h/ƿ/o/_/n/n/e(CCVACCV)
h/ƿ/o/_/nn/e(CCVACV)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['h', 'ƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/_', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))$'}
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e']
				{'string': 'h/ƿ/o/_', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: n
					> version: _/w/a/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', '_', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/w/a/_/n/n/e(ACVACCV)
_/w/a/_/nn/e(ACVACV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a/n', 'rgx': '((_))/((w))/((a))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a/nn', 'rgx': '((_))/((w))/((a))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_', 'rgx': '((_))/((w))/((a))/((_))$'}
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_', 'rgx': '((_))/((w))/((a))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/e/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				wh/_/o/n/e/n/e(CAVCVCV)
wh/_/o/_/n/e/n/e(CAVACVCV)
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/n', 'rgx': '((wh))/((_))/((o))/((_))$'}
				_____REMOVING________['wh', '_', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/_', 'rgx': '((wh))/((_))/((o))/((_))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/_/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/w/a/n/n/e/s(ACACVCCVC)
_/ȝ/_/w/a/nn/e/s(ACACVCVC)
_/ȝ/_/_/w/a/n/n/e/s(ACAACVCCVC)
_/ȝ/_/_/w/a/nn/e/s(ACAACVCVC)
				version split: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
			___CCVVCVCV : 4___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/_/n/n/e/s
					TRYING: n
					> version: h/u/a/_/n/n/e/s
					TRYING: n
					> version: h/u/a/_/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					> version: h/u/a/_/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_/n', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_/n', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/_/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/_/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/_/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/_/n/n/e
					TRYING: n
					> version: h/ƿ/e/_/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/_/n', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e']
				{'string': 'h/ƿ/e/_/nn', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/_/n/n/e
					TRYING: n
					> version: h/ƿ/o/_/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/_/n', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e']
				{'string': 'h/ƿ/o/_/nn', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/_/n/n/e
					TRYING: n
					> version: _/w/a/_/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_/n', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))$'}
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_/nn', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/_/n', 'rgx': '((wh))/((_))/((o))/((_))/((n))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/w/a/n/n/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					> version: _/ȝ/_/_/w/a/nn/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/w/a/n/n/e/s(ACAACVCCVC)
_/ȝ/_/_/w/a/nn/e/s(ACAACVCVC)
_/ȝ/_/_/_/w/a/n/n/e/s(ACAAACVCCVC)
_/ȝ/_/_/_/w/a/nn/e/s(ACAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
			___CCVVCVCV : 5___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/_/n/n/e/s
					TRYING: n
					> version: h/u/a/_/n/n/e/s
					TRYING: n
					> version: h/u/a/_/nn/e/s
					TRYING: e
					> version: h/u/a/_/nn/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_/n/n', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/_/n/n', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', '_', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/_/n/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/_/n/e', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((e))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/_/n/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/_/n/o', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((o))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/_/n/n/e
					TRYING: n
					> version: h/ƿ/e/_/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/_/n/n', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', '_', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e']
				{'string': 'h/ƿ/e/_/nn/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/_/n/n/e
					TRYING: n
					> version: h/ƿ/o/_/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/_/n/n', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'o', '_', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e']
				{'string': 'h/ƿ/o/_/nn/e', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/_/n/n/e
					TRYING: n
					> version: _/w/a/_/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_/n/n', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))$'}
				_____REMOVING________['_', 'w', 'a', '_', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_/nn/e', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/_/n/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/_/n/e', 'rgx': '((wh))/((_))/((o))/((_))/((n))/((e))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/_/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/_/_/_/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/_/w/a/n/n/e/s(ACAAACVCCVC)
_/ȝ/_/_/_/w/a/nn/e/s(ACAAACVCVC)
_/ȝ/_/_/_/_/w/a/n/n/e/s(ACAAAACVCCVC)
_/ȝ/_/_/_/_/w/a/nn/e/s(ACAAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
			___CCVVCVCV : 6___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/_/nn/e/s
					TRYING: s
					> version: h/u/a/_/nn/e/s
					TRYING: s
					RESULT:  ['s']
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e/s', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e/s', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/_/n/e/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((e))/((n))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/_/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/_/n/o/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((o))/((n))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/_/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_']
				h/ƿ/e/_/nn/e(CCVACV)
h/ƿ/e/_/nn/e/_(CCVACVA)
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e']
				{'string': 'h/ƿ/e/_/nn/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', '_', 'nn', 'e']
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_']
				{'string': 'h/ƿ/e/_/nn/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/_/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_']
				h/ƿ/o/_/nn/e(CCVACV)
h/ƿ/o/_/nn/e/_(CCVACVA)
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e']
				{'string': 'h/ƿ/o/_/nn/e', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', '_', 'nn', 'e']
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_']
				{'string': 'h/ƿ/o/_/nn/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					> version: _/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (1)
					> version: _/w/a/_/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', '_', 'nn', 'e', '_']
				_/w/a/_/nn/e(ACVACV)
_/w/a/_/nn/e/_(ACVACVA)
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_/nn/e', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['_', 'w', 'a', '_', 'nn', 'e']
				version split: ['_', 'w', 'a', '_', 'nn', 'e', '_']
				{'string': '_/w/a/_/nn/e/_', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/_/n/e/n', 'rgx': '((wh))/((_))/((o))/((_))/((n))/((e))/((n))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/_/_/w/a/n/n/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/ȝ/_/_/_/_/w/a/nn/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/_/_/w/a/n/n/e/s(ACAAAACVCCVC)
_/ȝ/_/_/_/_/w/a/nn/e/s(ACAAAACVCVC)
_/ȝ/_/_/_/_/_/w/a/n/n/e/s(ACAAAAACVCCVC)
_/ȝ/_/_/_/_/_/w/a/nn/e/s(ACAAAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))$'}
			___CCVVCVCV : 7___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/_/nn/e/s
					> version: h/u/a/_/nn/e/s
					RESULT:  ['_']
				adding dashed alternative: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
				adding dashed alternative: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
				h/u/a/_/nn/e/s(CAVACVC)
h/u/a/_/nn/e/s(CAVACVC)
h/u/a/_/nn/e/s/_(CAVACVCA)
h/u/a/_/nn/e/s/_(CAVACVCA)
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e/s', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', '_', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's']
				{'string': 'h/u/a/_/nn/e/s', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', '_', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/_/nn/e/s/_', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))/((_))$'}
				version split: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/_/nn/e/s/_', 'rgx': '((h))/((u))/((a))/((_))/((n)|(nn))/((e))/((s))/((_))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/_/n/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/_/n/e/n/e', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((e))/((n))/((e))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/_/n/o/n
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n', '_']
				h/ƿ/a/_/n/o/n(CCVACVC)
h/ƿ/a/_/n/o/n/_(CCVACVCA)
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/_/n/o/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((o))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', '_', 'n', 'o', 'n']
				version split: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n', '_']
				{'string': 'h/ƿ/a/_/n/o/n/_', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((_))/((n))/((o))/((n))/((_))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/_/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_', '_']
				h/ƿ/e/_/nn/e/_(CCVACVA)
h/ƿ/e/_/nn/e/_/_(CCVACVAA)
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_']
				{'string': 'h/ƿ/e/_/nn/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', '_', 'nn', 'e', '_']
				version split: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_', '_']
				{'string': 'h/ƿ/e/_/nn/e/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/_/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_', '_']
				h/ƿ/o/_/nn/e/_(CCVACVA)
h/ƿ/o/_/nn/e/_/_(CCVACVAA)
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_']
				{'string': 'h/ƿ/o/_/nn/e/_', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', '_', 'nn', 'e', '_']
				version split: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_', '_']
				{'string': 'h/ƿ/o/_/nn/e/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((o))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAAACAVCVC)
_/_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAAACAVCVC)
_/_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAAACVCVC)
_/_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAAACVCVC)
_/_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (1)
					> version: _/w/a/_/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', '_', 'nn', 'e', '_', '_']
				_/w/a/_/nn/e/_(ACVACVA)
_/w/a/_/nn/e/_/_(ACVACVAA)
				version split: ['_', 'w', 'a', '_', 'nn', 'e', '_']
				{'string': '_/w/a/_/nn/e/_', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', '_', 'nn', 'e', '_']
				version split: ['_', 'w', 'a', '_', 'nn', 'e', '_', '_']
				{'string': '_/w/a/_/nn/e/_/_', 'rgx': '((_))/((w))/((a))/((_))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/_/n/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/_/n/e/n/e', 'rgx': '((wh))/((_))/((o))/((_))/((n))/((e))/((n))/((e))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/_/_/_/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/_/_/_/_/_/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/_/_/_/w/a/n/n/e/s(ACAAAAACVCCVC)
_/ȝ/_/_/_/_/_/w/a/nn/e/s(ACAAAAACVCVC)
_/ȝ/_/_/_/_/_/_/w/a/n/n/e/s(ACAAAAAACVCCVC)
_/ȝ/_/_/_/_/_/_/w/a/nn/e/s(ACAAAAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_/w/a', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_/w/a', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
		FAIL: 
		only one version left: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
		only one version left: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
		only one version left: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n', '_']
		only one version left: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_', '_']
		only one version left: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_', '_']
		FAIL: 
		only one version left: ['_', 'w', 'a', '_', 'nn', 'e', '_', '_']
		only one version left: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
		FAIL: 
		SPLIT: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
		SPLIT: ['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
		['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
		['h', 'u', 'a', '_', 'nn', 'e', 's', '_']
		SPLIT: ['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
		['h', 'ƿ', 'a', '_', 'n', 'e', 'n', 'e']
		SPLIT: ['h', 'ƿ', 'a', '_', 'n', 'o', 'n', '_']
		['h', 'ƿ', 'a', '_', 'n', 'o', 'n', '_']
		SPLIT: ['h', 'ƿ', 'e', '_', 'nn', 'e', '_', '_']
		['h', 'ƿ', 'e', '_', 'nn', 'e', '_', '_']
		SPLIT: ['h', 'ƿ', 'o', '_', 'nn', 'e', '_', '_']
		['h', 'ƿ', 'o', '_', 'nn', 'e', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'w', 'a', '_', 'nn', 'e', '_', '_']
		['_', 'w', 'a', '_', 'nn', 'e', '_', '_']
		SPLIT: ['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
		['wh', '_', 'o', '_', 'n', 'e', 'n', 'e']
		SPLIT: ["['_']", "['ȝ']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVVCVCV is INVALID
		[]
		2
		OVERVIEW: version for pattern CCVVCVCV

faulty splits: 2
[''][''][''][''][''][''][''][''] <-! queþen
['']['ȝ'][''][''][''][''][''][''] <-! ȝwannes
h | ƿ | e | o | n | e | n | e
h | u | a | _ | nn | e | s | _
h | ƿ | a | _ | n | e | n | e
h | ƿ | a | _ | n | o | n | _
h | ƿ | e | _ | nn | e | _ | _
h | ƿ | o | _ | nn | e | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
_ | w | a | _ | nn | e | _ | _
wh | _ | o | _ | n | e | n | e
['_'] | ['ȝ'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'hƿ', 'h', 'ȝw', '_', 'wh'},{'h', 'q', 'hƿ'},{'hƿ', 'ȝ', 'h', '_', 'wh'},{'w', 'h', 'hƿ', '_'},{'qu', 'h', 'hƿ'}
1 : {'u', 'q', 'ƿ'},{'u', 'ƿ', 'qu'}
4 : {'n', 'w', 'nn', '_'},{'n', 'q', 'nn'},{'qu', 'n', 'nn'}
6 : {'n', 'w', '_', 's'},{'n', 'q', '_', 's'},{'qu', 'n', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CVVCVCV
	Selection for pattern: CVVCVCV completed
	Making a version for pattern: CVVCVCV
			___CVVCVCV : 0___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: hu/a/n/n/e/s
					TRYING: hu
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: h/u/a/nn/e/s
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: h/u/a/nn/e/s
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: hu/a/nn/e/s
					TRYING: hu
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					RESULT:  ['h', 'hu']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h)|(hu))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h)|(hu))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu', 'rgx': '((h)|(hu))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h)|(hu))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h)|(hu))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu', 'rgx': '((h)|(hu))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, hƿ, hu
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
hƿ/a/n/e/n/e(CVCVCV)
_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> h, _, hƿ, hu
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> h, _, hƿ, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
hƿ/a/n/o/n(CVCVC)
_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, hƿ, hu, _
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, hu, _
					> version: h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> h, hƿ, hu, _
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'nn', 'e']
				h/ƿ/e/n/n/e(CCVCCV)
hƿ/e/n/n/e(CVCCV)
h/ƿ/e/nn/e(CCVCV)
hƿ/e/nn/e(CVCV)
_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, _, hu, hƿ
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, _, hu, hƿ
					> version: h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> h, _, hu, hƿ
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, _, hu, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'nn', 'e']
				h/ƿ/o/n/n/e(CCVCCV)
hƿ/o/n/n/e(CVCCV)
h/ƿ/o/nn/e(CCVCV)
hƿ/o/nn/e(CVCV)
_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> q, hƿ, h, hu, _
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> q, hƿ, h, hu, _
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, hƿ, h, hu, _
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> q, hƿ, h, hu, _
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, hƿ, h, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, hƿ, h, _, hu
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, hƿ, h, _, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, hƿ, h, hu, _
					> version: wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> hƿ, h, hu, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				w/h/o/n/e/n/e(CCVCVCV)
wh/o/n/e/n/e(CVCVCV)
_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, hu
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, hu
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, hu
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, hu
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CVVCVCV : 1___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: hu/a/n/n/e/s
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'a'}
					> version: h/u/a/nn/e/s
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'a'}
					> version: h/u/a/nn/e/s
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'a'}
					> version: hu/a/nn/e/s
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'a'}
					RESULT:  ['u', 'a']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h)|(hu))/((u)|(a))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h)|(hu))/((u)|(a))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu/a', 'rgx': '((h)|(hu))/((u)|(a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h)|(hu))/((u)|(a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h)|(hu))/((u)|(a))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu/a', 'rgx': '((h)|(hu))/((u)|(a))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: _/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/e/nn/e
					TRYING: h
					> version: _/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/o/nn/e
					TRYING: h
					> version: _/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'w', 'a', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/w/h/o/n/e/n/e
					TRYING: w
					> version: _/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVCVCV : 2___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: hu/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: hu/a/nn/e/s
					TRYING: nn
					RESULT:  ['a']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu/a/n', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				_____REMOVING________['hu', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu/a/nn', 'rgx': '((h)|(hu))/((u)|(a))/((a))$'}
				_____REMOVING________['hu', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/w/a/n/n/e
					TRYING: w
					> version: _/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVCVCV : 3___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, nn
					> version: _/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> n, h, nn, _
					> version: _/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> n, nn, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, nn
					> version: _/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, nn
					> version: _/_/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, nn
					> version: _/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, nn, _
					> version: _/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, nn, hƿ, _
					> version: _/_/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, nn, _
					> version: _/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, nn, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, nn
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					> version: _/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, nn
					> version: _/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> n, wh, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					> version: _/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVVCVCV : 4___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: e
					> version: h/u/a/nn/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/a/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
_/_/_/_/_/h/ƿ/a/n/o/n(AAAAACCVCVC)
_/_/_/_/_/hƿ/a/n/o/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/e/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/e/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/e/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/e/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/o/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/o/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/o/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/o/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVVCVCV : 5___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/nn/e/s
					TRYING: s
					> version: h/u/a/nn/e/s
					TRYING: s
					RESULT:  ['s']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, s
					> version: _/_/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/a/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/hƿ/a/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/_/h/ƿ/a/n/o/n(AAAAACCVCVC)
_/_/_/_/_/hƿ/a/n/o/n(AAAAACVCVC)
_/_/_/_/_/_/h/ƿ/a/n/o/n(AAAAAACCVCVC)
_/_/_/_/_/_/hƿ/a/n/o/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					> version: _/_/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/_/h/ƿ/e/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/e/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/e/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/e/nn/e(AAAAACVCV)
_/_/_/_/_/_/h/ƿ/e/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/e/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/e/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/e/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					> version: _/_/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/_/h/ƿ/o/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/o/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/o/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/o/nn/e(AAAAACVCV)
_/_/_/_/_/_/h/ƿ/o/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/o/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/o/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/o/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/_/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/_/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> n, wh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/w/h/o/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/wh/o/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					> version: _/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
			___CVVCVCV : 6___
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/nn/e/s
					> version: h/u/a/nn/e/s
					RESULT:  ['_']
				adding dashed alternative: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				adding dashed alternative: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				h/u/a/nn/e/s(CCVCVC)
h/u/a/nn/e/s(CVVCVC)
h/u/a/nn/e/s/_(CAVCVCA)
h/u/a/nn/e/s/_(CAVCVCA)
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/nn/e/s/_', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/nn/e/s/_', 'rgx': '((h)|(hu))/((u)|(a))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/hƿ/a/n/e/n/e(AAAAAACVCVCV)
_/_/_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAAAACCVCVCV)
_/_/_/_/_/_/_/hƿ/a/n/e/n/e(AAAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/_/_/h/ƿ/a/n/o/n(AAAAAACCVCVC)
_/_/_/_/_/_/hƿ/a/n/o/n(AAAAAACVCVC)
_/_/_/_/_/_/_/h/ƿ/a/n/o/n(AAAAAAACCVCVC)
_/_/_/_/_/_/_/hƿ/a/n/o/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/_/_/h/ƿ/e/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/e/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/e/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/e/nn/e(AAAAAACVCV)
_/_/_/_/_/_/_/h/ƿ/e/n/n/e(AAAAAAACCVCCV)
_/_/_/_/_/_/_/hƿ/e/n/n/e(AAAAAAACVCCV)
_/_/_/_/_/_/_/h/ƿ/e/nn/e(AAAAAAACCVCV)
_/_/_/_/_/_/_/hƿ/e/nn/e(AAAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/_/_/h/ƿ/o/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/o/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/o/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/o/nn/e(AAAAAACVCV)
_/_/_/_/_/_/_/h/ƿ/o/n/n/e(AAAAAAACCVCCV)
_/_/_/_/_/_/_/hƿ/o/n/n/e(AAAAAAACVCCV)
_/_/_/_/_/_/_/h/ƿ/o/nn/e(AAAAAAACCVCV)
_/_/_/_/_/_/_/hƿ/o/nn/e(AAAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
_/_/_/_/_/_/_/w/a/n/n/e(AAAAAAACVCCV)
_/_/_/_/_/_/_/w/a/nn/e(AAAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/_/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/_/_/w/h/o/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/wh/o/n/e/n/e(AAAAAACVCVCV)
_/_/_/_/_/_/_/w/h/o/n/e/n/e(AAAAAAACCVCVCV)
_/_/_/_/_/_/_/wh/o/n/e/n/e(AAAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/wh/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
_/_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAAACCVCCVC)
_/_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAAACVCCVC)
_/_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAAACCVCVC)
_/_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
		FAIL: 
		only one version left: ['h', 'u', 'a', 'nn', 'e', 's', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
		SPLIT: ['h', 'u', 'a', 'nn', 'e', 's', '_']
		['h', 'u', 'a', 'nn', 'e', 's', '_']
		['h', 'u', 'a', 'nn', 'e', 's', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCVCV is INVALID
		[{'h', '_', 'hu', 'hƿ'}]
		8
		OVERVIEW: version for pattern CVVCVCV
{'h', '_', 'hu', 'hƿ'}
faulty splits: 8
[''][''][''][''][''][''][''] <-! hƿanene
[''][''][''][''][''][''][''] <-! hƿanon
[''][''][''][''][''][''][''] <-! hƿenne
[''][''][''][''][''][''][''] <-! hƿonne
[''][''][''][''][''][''][''] <-! queþen
[''][''][''][''][''][''][''] <-! wanne
[''][''][''][''][''][''][''] <-! whonene
[''][''][''][''][''][''][''] <-! ȝwannes
hƿ | e | o | n | e | n | e
h | u | a | nn | e | s | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'hƿ', 'h', 'ȝw', '_', 'hu'},{'qu', 'hƿ', 'h', 'hu', '_'},{'q', 'hƿ', 'h', 'hu', '_'},{'w', 'hƿ', 'h', '_', 'hu'},{'h', '_', 'hƿ', 'hu'},{'h', 'hƿ', 'hu', '_'},{'h', '_', 'hu', 'hƿ'},{'hƿ', 'ȝ', 'h', '_', 'hu'},{'h', 'hƿ', 'hu'},{'hƿ', 'h', 'hu', '_', 'wh'},{'w', 'hƿ', 'h', 'hu', '_'}
3 : {'n', 'q', '_', 'nn'},{'qu', 'n', '_', 'nn'},{'n', 'h', 'nn', '_'},{'n', 'hƿ', '_', 'nn'},{'n', 'w', 'nn', '_'},{'n', 'w', '_', 'nn'},{'n', 'wh', '_', 'nn'},{'n', 'nn', '_', 'ȝ'},{'n', 'nn', 'hƿ', '_'},{'n', 'h', '_', 'nn'},{'n', 'h', 'nn'},{'n', 'hƿ', 'nn'},{'n', 'nn', 'ȝw', '_'}
5 : {'n', 'hƿ', 's'},{'qu', 'n', '_', 's'},{'n', 'hƿ', '_', 's'},{'n', 'w', '_', 's'},{'n', 'ȝ', '_', 's'},{'n', 'h', 's'},{'n', 'h', '_', 's'},{'n', 'q', '_', 's'},{'n', 'wh', '_', 's'},{'n', 'ȝw', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CVVCCVC
	Selection for pattern: CVVCCVC completed
	Making a version for pattern: CVVCCVC
			___CVVCCVC : 0___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/e/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/e/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/o/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/o/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, hƿ
					> version: wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['wh']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((wh))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((wh))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CVVCCVC : 1___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: ƿ
					> version: hƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((a))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((a))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					> version: hƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((a))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((a))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: hƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: ƿ
					> version: hƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((e))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((e))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					> version: hƿ/e/o/n/e/n/e
					TRYING: e
					> version: h/ƿ/eo/n/e/n/e
					TRYING: ƿ
					> version: hƿ/eo/n/e/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'eo'}
					RESULT:  ['e', 'eo']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e)|(eo))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((e)|(eo))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e)|(eo))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/eo', 'rgx': '((h)|(hƿ))/((e)|(eo))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: hƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: ƿ
					> version: hƿ/o/nn/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((o))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((o))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((o))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((o))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'w', 'a', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/n/e/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/o', 'rgx': '((wh))/((o))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVCCVC : 2___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: hƿ/a/n/e/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'a', '_', 'n', 'e', 'n', 'e']
				hƿ/a/n/e/n/e(CVCVCV)
hƿ/a/_/n/e/n/e(CVACVCV)
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a/n', 'rgx': '((h)|(hƿ))/((a))/((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a/_', 'rgx': '((h)|(hƿ))/((a))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/n/o/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'a', '_', 'n', 'o', 'n']
				hƿ/a/n/o/n(CVCVC)
hƿ/a/_/n/o/n(CVACVC)
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a/n', 'rgx': '((h)|(hƿ))/((a))/((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'hƿ/a/_', 'rgx': '((h)|(hƿ))/((a))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: hƿ/e/n/n/e
					TRYING: n
					> version: hƿ/e/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'e', '_', 'n', 'n', 'e']
				adding dashed alternative: ['hƿ', 'e', '_', 'nn', 'e']
				hƿ/e/n/n/e(CVCCV)
hƿ/e/nn/e(CVCV)
hƿ/e/_/n/n/e(CVACCV)
hƿ/e/_/nn/e(CVACV)
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e/n', 'rgx': '((h)|(hƿ))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e/nn', 'rgx': '((h)|(hƿ))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'hƿ/e/_', 'rgx': '((h)|(hƿ))/((e))/((_))$'}
				version split: ['hƿ', 'e', '_', 'nn', 'e']
				{'string': 'hƿ/e/_', 'rgx': '((h)|(hƿ))/((e))/((_))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: hƿ/e/o/n/e/n/e
					TRYING: o
					> version: hƿ/eo/n/e/n/e
					TRYING: n
					RESULT:  ['o']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/e/o', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))$'}
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/eo/n', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (2)
					> version: hƿ/o/n/n/e
					TRYING: n
					> version: hƿ/o/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'o', '_', 'n', 'n', 'e']
				adding dashed alternative: ['hƿ', 'o', '_', 'nn', 'e']
				hƿ/o/n/n/e(CVCCV)
hƿ/o/nn/e(CVCV)
hƿ/o/_/n/n/e(CVACCV)
hƿ/o/_/nn/e(CVACV)
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o/n', 'rgx': '((h)|(hƿ))/((o))/((_))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o/nn', 'rgx': '((h)|(hƿ))/((o))/((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'hƿ/o/_', 'rgx': '((h)|(hƿ))/((o))/((_))$'}
				version split: ['hƿ', 'o', '_', 'nn', 'e']
				{'string': 'hƿ/o/_', 'rgx': '((h)|(hƿ))/((o))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/w/a/n/n/e
					TRYING: w
					> version: _/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/n/e/n/e
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['wh', 'o', '_', 'n', 'e', 'n', 'e']
				wh/o/n/e/n/e(CVCVCV)
wh/o/_/n/e/n/e(CVACVCV)
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/o/n', 'rgx': '((wh))/((o))/((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/o/_', 'rgx': '((wh))/((o))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVCCVC : 3___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: hƿ/a/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a/_/n', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/_/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'hƿ/a/_/n', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: hƿ/e/_/n/n/e
					TRYING: n
					> version: hƿ/e/_/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'hƿ/e/_/n', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))$'}
				version split: ['hƿ', 'e', '_', 'nn', 'e']
				{'string': 'hƿ/e/_/nn', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: hƿ/e/o/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/e/o/n', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))/((n))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: hƿ/o/_/n/n/e
					TRYING: n
					> version: hƿ/o/_/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'hƿ/o/_/n', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))$'}
				version split: ['hƿ', 'o', '_', 'nn', 'e']
				{'string': 'hƿ/o/_/nn', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					> version: _/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/_/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['wh', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/o/_/n', 'rgx': '((wh))/((o))/((_))/((n))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					> version: _/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVVCCVC : 4___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: hƿ/a/_/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'a', '_', 'n', '_', 'e', 'n', 'e']
				hƿ/a/_/n/e/n/e(CVACVCV)
hƿ/a/_/n/_/e/n/e(CVACAVCV)
				version split: ['hƿ', 'a', '_', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a/_/n/e', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))$'}
				_____REMOVING________['hƿ', 'a', '_', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/a/_/n/_', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/_/n/o/n
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
				hƿ/a/_/n/o/n(CVACVC)
hƿ/a/_/n/_/o/n(CVACAVC)
				version split: ['hƿ', 'a', '_', 'n', 'o', 'n']
				{'string': 'hƿ/a/_/n/o', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))$'}
				_____REMOVING________['hƿ', 'a', '_', 'n', 'o', 'n']
				version split: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
				{'string': 'hƿ/a/_/n/_', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: hƿ/e/_/n/n/e
					TRYING: n
					> version: hƿ/e/_/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'hƿ/e/_/n/n', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))/((n))$'}
				version split: ['hƿ', 'e', '_', 'nn', 'e']
				{'string': 'hƿ/e/_/nn/e', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))/((n))$'}
				_____REMOVING________['hƿ', 'e', '_', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (1)
					> version: hƿ/e/o/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'e', 'o', 'n', '_', 'e', 'n', 'e']
				hƿ/e/o/n/e/n/e(CVVCVCV)
hƿ/e/o/n/_/e/n/e(CVVCAVCV)
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/e/o/n/e', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))/((n))/((_))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'e', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/e/o/n/_', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))/((n))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: hƿ/o/_/n/n/e
					TRYING: n
					> version: hƿ/o/_/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'hƿ/o/_/n/n', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))/((n))$'}
				version split: ['hƿ', 'o', '_', 'nn', 'e']
				{'string': 'hƿ/o/_/nn/e', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))/((n))$'}
				_____REMOVING________['hƿ', 'o', '_', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/_/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['wh', 'o', '_', 'n', '_', 'e', 'n', 'e']
				wh/o/_/n/e/n/e(CVACVCV)
wh/o/_/n/_/e/n/e(CVACAVCV)
				version split: ['wh', 'o', '_', 'n', 'e', 'n', 'e']
				{'string': 'wh/o/_/n/e', 'rgx': '((wh))/((o))/((_))/((n))/((_))$'}
				_____REMOVING________['wh', 'o', '_', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'wh/o/_/n/_', 'rgx': '((wh))/((o))/((_))/((n))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, _, ȝ
					> version: _/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _
					> version: _/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, _, ȝ
					> version: _/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVVCCVC : 5___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: hƿ/a/_/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'a', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/a/_/n/_/e', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))/((e))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/_/n/_/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
				{'string': 'hƿ/a/_/n/_/o', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))/((o))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: hƿ/e/_/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'hƿ/e/_/n/n/e', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: hƿ/e/o/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'e', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/e/o/n/_/e', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))/((n))/((_))/((e))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: hƿ/o/_/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'hƿ/o/_/n/n/e', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/_/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['wh', 'o', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'wh/o/_/n/_/e', 'rgx': '((wh))/((o))/((_))/((n))/((_))/((e))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
			___CVVCCVC : 6___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: hƿ/a/_/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/a/_/n/_/e/n/e', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['hƿ', 'a', '_', 'n', '_', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/_/n/_/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
				{'string': 'hƿ/a/_/n/_/o/n', 'rgx': '((h)|(hƿ))/((a))/((_))/((n))/((_))/((o))/((n))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: hƿ/e/_/n/n/e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'e', '_', 'n', 'n', 'e', '_']
				hƿ/e/_/n/n/e(CVACCV)
hƿ/e/_/n/n/e/_(CVACCVA)
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e']
				{'string': 'hƿ/e/_/n/n/e', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))/((n))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'e', '_', 'n', 'n', 'e']
				version split: ['hƿ', 'e', '_', 'n', 'n', 'e', '_']
				{'string': 'hƿ/e/_/n/n/e/_', 'rgx': '((h)|(hƿ))/((e))/((_))/((n)|(nn))/((n))/((e))/((_))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: hƿ/e/o/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'e', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'hƿ/e/o/n/_/e/n/e', 'rgx': '((h)|(hƿ))/((e)|(eo))/((o))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', '_', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (1)
					> version: hƿ/o/_/n/n/e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'o', '_', 'n', 'n', 'e', '_']
				hƿ/o/_/n/n/e(CVACCV)
hƿ/o/_/n/n/e/_(CVACCVA)
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e']
				{'string': 'hƿ/o/_/n/n/e', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))/((n))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'o', '_', 'n', 'n', 'e']
				version split: ['hƿ', 'o', '_', 'n', 'n', 'e', '_']
				{'string': 'hƿ/o/_/n/n/e/_', 'rgx': '((h)|(hƿ))/((o))/((_))/((n)|(nn))/((n))/((e))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					> version: _/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/_/_/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
_/_/_/_/_/_/_/w/a/n/n/e(AAAAAAACVCCV)
_/_/_/_/_/_/_/w/a/nn/e(AAAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/_/n/_/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['wh', 'o', '_', 'n', '_', 'e', 'n', 'e']
				{'string': 'wh/o/_/n/_/e/n/e', 'rgx': '((wh))/((o))/((_))/((n))/((_))/((e))/((n))$'}
				_____REMOVING________['wh', 'o', '_', 'n', '_', 'e', 'n', 'e']
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					> version: _/_/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
_/_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAAACCVCCVC)
_/_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAAACVCCVC)
_/_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAAACCVCVC)
_/_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
		FAIL: 
		FAIL: 
		only one version left: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
		only one version left: ['hƿ', 'e', '_', 'n', 'n', 'e', '_']
		FAIL: 
		only one version left: ['hƿ', 'o', '_', 'n', 'n', 'e', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'u', 'a', 'n', 'n', 'e', 's']
		SPLIT: ["['h', 'hƿ']", "['a']", "['_']", "['n']", "['_']", "['e']", "['n']"]
		SPLIT: ['hƿ', 'a', '_', 'n', '_', 'o', 'n']
		['hƿ', 'a', '_', 'n', '_', 'o', 'n']
		SPLIT: ['hƿ', 'e', '_', 'n', 'n', 'e', '_']
		['hƿ', 'e', '_', 'n', 'n', 'e', '_']
		SPLIT: ["['h', 'hƿ']", "['e', 'eo']", "['o']", "['n']", "['_']", "['e']", "['n']"]
		SPLIT: ['hƿ', 'o', '_', 'n', 'n', 'e', '_']
		['hƿ', 'o', '_', 'n', 'n', 'e', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['wh']", "['o']", "['_']", "['n']", "['_']", "['e']", "['n']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCCVC is INVALID
		[]
		6
		OVERVIEW: version for pattern CVVCCVC

faulty splits: 6
['h', 'hƿ']['a']['']['n']['']['e']['n'] <-! hƿanene
['h', 'hƿ']['e', 'eo']['o']['n']['']['e']['n'] <-! hƿeonene
[''][''][''][''][''][''][''] <-! queþen
[''][''][''][''][''][''][''] <-! wanne
['wh']['o']['']['n']['']['e']['n'] <-! whonene
[''][''][''][''][''][''][''] <-! ȝwannes
h | u | a | n | n | e | s
['h', 'hƿ'] | ['a'] | ['_'] | ['n'] | ['_'] | ['e'] | ['n']
hƿ | a | _ | n | _ | o | n
hƿ | e | _ | n | n | e | _
['h', 'hƿ'] | ['e', 'eo'] | ['o'] | ['n'] | ['_'] | ['e'] | ['n']
hƿ | o | _ | n | n | e | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['wh'] | ['o'] | ['_'] | ['n'] | ['_'] | ['e'] | ['n']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'hƿ', 'h', 'ȝw', '_', 'wh'},{'h', 'q', 'hƿ'},{'hƿ', 'ȝ', 'h', '_', 'wh'},{'w', 'h', 'hƿ', '_'},{'qu', 'h', 'hƿ'}
3 : {'n', 'w', 'nn', '_'},{'n', 'nn', '_', 'ȝ'},{'n', 'q', 'nn'},{'qu', 'n', 'nn'},{'n', 'nn', 'ȝw', '_'}
4 : {'n', 'q', '_'},{'n', '_', 'ȝ'},{'n', 'ȝw', '_'},{'qu', 'n', '_'},{'n', 'w', '_'}
6 : {'qu', 'n', '_', 's'},{'n', 'w', '_', 's'},{'n', 'ȝ', '_', 's'},{'n', 'q', '_', 's'},{'n', 'ȝw', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CCVCVCV
	Selection for pattern: CCVCVCV completed
	Making a version for pattern: CCVCVCV
			___CCVCVCV : 0___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: hu/a/n/n/e/s
					TRYING: hu
					adding blocked set: C = C >> w, h, hu
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: hu/a/nn/e/s
					TRYING: hu
					adding blocked set: C = C >> w, h, hu
					RESULT:  ['h']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> w, h, hƿ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, h, hƿ
					> version: h/ƿ/e/nn/e
					TRYING: h
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> w, h, hƿ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, h, hƿ
					> version: h/ƿ/o/nn/e
					TRYING: h
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> w, h, hƿ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> w, q, h
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> w, q, h
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, w, h
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> w, q, h
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, w, h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					> version: w/a/nn/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, h, ȝw, _
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, h, ȝw, _
					RESULT:  ['ȝ']
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((ȝ))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((ȝ))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
			___CCVCVCV : 1___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: h/ƿ/e/nn/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: h/ƿ/o/nn/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, h, q, ƿ
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, h, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, h, ƿ, qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, h, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, h, ƿ, qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: a
					> version: w/a/nn/e
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['w', '_', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
w/_/a/n/n/e(CAVCCV)
w/_/a/nn/e(CAVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w/a', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w/a', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: ȝ/w/a/n/n/e/s
					TRYING: w
					> version: ȝ/w/a/nn/e/s
					TRYING: w
					RESULT:  ['w']
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ/w', 'rgx': '((ȝ))/((w))$'}
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w', 'rgx': '((ȝ))/((w))$'}
			___CCVCVCV : 2___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a', 'rgx': '((h))/((ƿ))/((a))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h))/((ƿ))/((e))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h))/((ƿ))/((e))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h))/((ƿ))/((o))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o', 'rgx': '((h))/((ƿ))/((o))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: a
					> version: w/_/a/nn/e
					TRYING: a
					RESULT:  ['a']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a', 'rgx': '((w))/((_))/((a))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a', 'rgx': '((w))/((_))/((a))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: ȝ/w/a/n/n/e/s
					TRYING: a
					> version: ȝ/w/a/nn/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ/w/a', 'rgx': '((ȝ))/((w))/((a))$'}
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w/a', 'rgx': '((ȝ))/((w))/((a))$'}
			___CCVCVCV : 3___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n', 'rgx': '((h))/((ƿ))/((a))/((n))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: n
					> version: h/ƿ/e/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: n
					> version: h/ƿ/o/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: n
					> version: w/_/a/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n', 'rgx': '((w))/((_))/((a))/((n)|(nn))$'}
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a/nn', 'rgx': '((w))/((_))/((a))/((n)|(nn))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: ȝ/w/a/n/n/e/s
					TRYING: n
					> version: ȝ/w/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ/w/a/n', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))$'}
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w/a/nn', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))$'}
			___CCVCVCV : 4___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: e
					> version: h/u/a/nn/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n/o', 'rgx': '((h))/((ƿ))/((a))/((n))/((o))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: h/ƿ/e/n/n/e
					TRYING: n
					> version: h/ƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ/e/n/n', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn/e', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: h/ƿ/o/n/n/e
					TRYING: n
					> version: h/ƿ/o/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ/o/n/n', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn/e', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/_/a/n/n/e
					TRYING: n
					> version: w/_/a/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'a', 'n', 'n', 'e']
				{'string': 'w/_/a/n/n', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['w', '_', 'a', 'n', 'n', 'e']
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a/nn/e', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: ȝ/w/a/n/n/e/s
					TRYING: n
					> version: ȝ/w/a/nn/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ/w/a/n/n', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w/a/nn/e', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))/((e))$'}
			___CCVCVCV : 5___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/nn/e/s
					TRYING: s
					> version: h/u/a/nn/e/s
					TRYING: s
					RESULT:  ['s']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n/o/n', 'rgx': '((h))/((ƿ))/((a))/((n))/((o))/((n))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', 'nn', 'e', '_']
				h/ƿ/e/nn/e(CCVCV)
h/ƿ/e/nn/e/_(CCVCVA)
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ/e/nn/e', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e', '_']
				{'string': 'h/ƿ/e/nn/e/_', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', 'nn', 'e', '_']
				h/ƿ/o/nn/e(CCVCV)
h/ƿ/o/nn/e/_(CCVCVA)
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ/o/nn/e', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e', '_']
				{'string': 'h/ƿ/o/nn/e/_', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, s
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (1)
					> version: w/_/a/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'a', 'nn', 'e', '_']
				w/_/a/nn/e(CAVCV)
w/_/a/nn/e/_(CAVCVA)
				version split: ['w', '_', 'a', 'nn', 'e']
				{'string': 'w/_/a/nn/e', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['w', '_', 'a', 'nn', 'e']
				version split: ['w', '_', 'a', 'nn', 'e', '_']
				{'string': 'w/_/a/nn/e/_', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: ȝwannes
					resolving (1)
					> version: ȝ/w/a/nn/e/s
					TRYING: s
					RESULT:  ['s']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w/a/nn/e/s', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))/((e))/((s))$'}
			___CCVCVCV : 6___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/nn/e/s
					> version: h/u/a/nn/e/s
					RESULT:  ['_']
				adding dashed alternative: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				adding dashed alternative: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				h/u/a/nn/e/s(CCVCVC)
h/u/a/nn/e/s(CVVCVC)
h/u/a/nn/e/s/_(CAVCVCA)
h/u/a/nn/e/s/_(CAVCVCA)
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/nn/e/s/_', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's', '_']
				{'string': 'h/u/a/nn/e/s/_', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', 'n', 'o', 'n', '_']
				h/ƿ/a/n/o/n(CCVCVC)
h/ƿ/a/n/o/n/_(CCVCVCA)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n/o/n', 'rgx': '((h))/((ƿ))/((a))/((n))/((o))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n', '_']
				{'string': 'h/ƿ/a/n/o/n/_', 'rgx': '((h))/((ƿ))/((a))/((n))/((o))/((n))/((_))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: h/ƿ/e/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'e', 'nn', 'e', '_', '_']
				h/ƿ/e/nn/e/_(CCVCVA)
h/ƿ/e/nn/e/_/_(CCVCVAA)
				version split: ['h', 'ƿ', 'e', 'nn', 'e', '_']
				{'string': 'h/ƿ/e/nn/e/_', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e', '_']
				version split: ['h', 'ƿ', 'e', 'nn', 'e', '_', '_']
				{'string': 'h/ƿ/e/nn/e/_/_', 'rgx': '((h))/((ƿ))/((e))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: h/ƿ/o/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'o', 'nn', 'e', '_', '_']
				h/ƿ/o/nn/e/_(CCVCVA)
h/ƿ/o/nn/e/_/_(CCVCVAA)
				version split: ['h', 'ƿ', 'o', 'nn', 'e', '_']
				{'string': 'h/ƿ/o/nn/e/_', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e', '_']
				version split: ['h', 'ƿ', 'o', 'nn', 'e', '_', '_']
				{'string': 'h/ƿ/o/nn/e/_/_', 'rgx': '((h))/((ƿ))/((o))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAAACAVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/q/ue/þ/e/n(AAAAAAACVCVC)
_/_/_/_/_/_/_/qu/e/þ/e/n(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (1)
					> version: w/_/a/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'a', 'nn', 'e', '_', '_']
				w/_/a/nn/e/_(CAVCVA)
w/_/a/nn/e/_/_(CAVCVAA)
				version split: ['w', '_', 'a', 'nn', 'e', '_']
				{'string': 'w/_/a/nn/e/_', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['w', '_', 'a', 'nn', 'e', '_']
				version split: ['w', '_', 'a', 'nn', 'e', '_', '_']
				{'string': 'w/_/a/nn/e/_/_', 'rgx': '((w))/((_))/((a))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (1)
					> version: ȝ/w/a/nn/e/s
					RESULT:  ['_']
				adding dashed alternative: ['ȝ', 'w', 'a', 'nn', 'e', 's', '_']
				ȝ/w/a/nn/e/s(CCVCVC)
ȝ/w/a/nn/e/s/_(CCVCVCA)
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ/w/a/nn/e/s', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's', '_']
				{'string': 'ȝ/w/a/nn/e/s/_', 'rgx': '((ȝ))/((w))/((a))/((n)|(nn))/((e))/((s))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'u', 'a', 'nn', 'e', 's', '_']
		only one version left: ['h', 'ƿ', 'a', 'n', 'o', 'n', '_']
		only one version left: ['h', 'ƿ', 'e', 'nn', 'e', '_', '_']
		only one version left: ['h', 'ƿ', 'o', 'nn', 'e', '_', '_']
		FAIL: 
		only one version left: ['w', '_', 'a', 'nn', 'e', '_', '_']
		only one version left: ['ȝ', 'w', 'a', 'nn', 'e', 's', '_']
		SPLIT: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
		SPLIT: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
		SPLIT: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
		SPLIT: ['h', 'u', 'a', 'nn', 'e', 's', '_']
		['h', 'u', 'a', 'nn', 'e', 's', '_']
		['h', 'u', 'a', 'nn', 'e', 's', '_']
		SPLIT: ['h', 'ƿ', 'a', 'n', 'o', 'n', '_']
		['h', 'ƿ', 'a', 'n', 'o', 'n', '_']
		SPLIT: ['h', 'ƿ', 'e', 'nn', 'e', '_', '_']
		['h', 'ƿ', 'e', 'nn', 'e', '_', '_']
		SPLIT: ['h', 'ƿ', 'o', 'nn', 'e', '_', '_']
		['h', 'ƿ', 'o', 'nn', 'e', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['w', '_', 'a', 'nn', 'e', '_', '_']
		['w', '_', 'a', 'nn', 'e', '_', '_']
		SPLIT: ['ȝ', 'w', 'a', 'nn', 'e', 's', '_']
		['ȝ', 'w', 'a', 'nn', 'e', 's', '_']
		version for pattern CCVCVCV is INVALID
		[]
		1
		OVERVIEW: version for pattern CCVCVCV

faulty splits: 1
[''][''][''][''][''][''][''] <-! queþen
h | ƿ | a | n | e | n | e
h | ƿ | eo | n | e | n | e
w | h | o | n | e | n | e
h | u | a | nn | e | s | _
h | ƿ | a | n | o | n | _
h | ƿ | e | nn | e | _ | _
h | ƿ | o | nn | e | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
w | _ | a | nn | e | _ | _
ȝ | w | a | nn | e | s | _
0 : {'qu', 'w', 'h'},{'w', 'q', 'h'}
1 : {'u', 'h', 'q', 'ƿ'},{'u', 'h', 'ƿ', 'qu'}
3 : {'n', 'q', 'nn'},{'qu', 'n', 'nn'}
5 : {'n', 'q', '_', 's'},{'qu', 'n', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CVVCVC
	Selection for pattern: CVVCVC completed
	Making a version for pattern: CVVCVC
			___CVVCVC : 0___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
hƿ/a/n/e/n/e(CVCVCV)
_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
hƿ/a/n/o/n(CVCVC)
_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					> version: h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'nn', 'e']
				h/ƿ/e/n/n/e(CCVCCV)
hƿ/e/n/n/e(CVCCV)
h/ƿ/e/nn/e(CCVCV)
hƿ/e/nn/e(CVCV)
_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				h/ƿ/e/o/n/e/n/e(CCVVCVCV)
hƿ/e/o/n/e/n/e(CVVCVCV)
h/ƿ/eo/n/e/n/e(CCVCVCV)
hƿ/eo/n/e/n/e(CVCVCV)
_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/hƿ/e/o/n/e/n/e(ACVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/hƿ/eo/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					> version: h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> h, q, _
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'nn', 'e']
				h/ƿ/o/n/n/e(CCVCCV)
hƿ/o/n/n/e(CVCCV)
h/ƿ/o/nn/e(CCVCV)
hƿ/o/nn/e(CVCV)
_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, q, _
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, h, q, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, q, _
					> version: wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> h, q, wh, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				w/h/o/n/e/n/e(CCVCVCV)
wh/o/n/e/n/e(CVCVCV)
_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> h, q, _, ȝ
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> h, q, ȝw, _
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> h, q, _, ȝ
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> h, q, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CVVCVC : 1___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/h/ƿ/a/n/o/n(ACCVCVC)
_/hƿ/a/n/o/n(ACVCVC)
_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/e/nn/e
					TRYING: h
					> version: _/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					> version: _/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/hƿ/eo/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/hƿ/e/o/n/e/n/e(ACVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/hƿ/eo/n/e/n/e(ACVCVCV)
_/_/h/ƿ/e/o/n/e/n/e(AACCVVCVCV)
_/_/hƿ/e/o/n/e/n/e(AACVVCVCV)
_/_/h/ƿ/eo/n/e/n/e(AACCVCVCV)
_/_/hƿ/eo/n/e/n/e(AACVCVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/h/ƿ/o/nn/e
					TRYING: h
					> version: _/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'w', 'a', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/w/h/o/n/e/n/e
					TRYING: w
					> version: _/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVCVC : 2___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/h/ƿ/a/n/e/n/e(AACCVCVCV)
_/_/hƿ/a/n/e/n/e(AACVCVCV)
_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/h/ƿ/a/n/o/n(AACCVCVC)
_/_/hƿ/a/n/o/n(AACVCVC)
_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
				version split: ['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/h/ƿ/e/n/n/e(AACCVCCV)
_/_/hƿ/e/n/n/e(AACVCCV)
_/_/h/ƿ/e/nn/e(AACCVCV)
_/_/hƿ/e/nn/e(AACVCV)
_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					> version: _/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/h/ƿ/e/o/n/e/n/e(AACCVVCVCV)
_/_/hƿ/e/o/n/e/n/e(AACVVCVCV)
_/_/h/ƿ/eo/n/e/n/e(AACCVCVCV)
_/_/hƿ/eo/n/e/n/e(AACVCVCV)
_/_/_/h/ƿ/e/o/n/e/n/e(AAACCVVCVCV)
_/_/_/hƿ/e/o/n/e/n/e(AAACVVCVCV)
_/_/_/h/ƿ/eo/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/eo/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/h/ƿ/o/n/n/e(AACCVCCV)
_/_/hƿ/o/n/n/e(AACVCCV)
_/_/h/ƿ/o/nn/e(AACCVCV)
_/_/hƿ/o/nn/e(AACVCV)
_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
				version split: ['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/w/a/n/n/e
					TRYING: w
					> version: _/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/w/h/o/n/e/n/e(AACCVCVCV)
_/_/wh/o/n/e/n/e(AACVCVCV)
_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
				version split: ['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVCVC : 3___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> þ, h, nn
					> version: _/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, hƿ, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/h/ƿ/a/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/a/n/e/n/e(AAACVCVCV)
_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> þ, nn, h, _
					> version: _/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> þ, nn, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/h/ƿ/a/n/o/n(AAACCVCVC)
_/_/_/hƿ/a/n/o/n(AAACVCVC)
_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> þ, h, _, nn
					> version: _/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, hƿ, _, nn
					> version: _/_/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> þ, h, _, nn
					> version: _/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, hƿ, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/h/ƿ/e/n/n/e(AAACCVCCV)
_/_/_/hƿ/e/n/n/e(AAACVCCV)
_/_/_/h/ƿ/e/nn/e(AAACCVCV)
_/_/_/hƿ/e/nn/e(AAACVCV)
_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> þ, nn, h, _
					> version: _/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, nn, hƿ, _
					> version: _/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> þ, nn, h, _
					> version: _/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, nn, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/_/h/ƿ/e/o/n/e/n/e(AAACCVVCVCV)
_/_/_/hƿ/e/o/n/e/n/e(AAACVVCVCV)
_/_/_/h/ƿ/eo/n/e/n/e(AAACCVCVCV)
_/_/_/hƿ/eo/n/e/n/e(AAACVCVCV)
_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAACCVVCVCV)
_/_/_/_/hƿ/e/o/n/e/n/e(AAAACVVCVCV)
_/_/_/_/h/ƿ/eo/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/eo/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> þ, h, _, nn
					> version: _/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, hƿ, _, nn
					> version: _/_/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> þ, h, _, nn
					> version: _/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> þ, hƿ, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/h/ƿ/o/n/n/e(AAACCVCCV)
_/_/_/hƿ/o/n/n/e(AAACVCCV)
_/_/_/h/ƿ/o/nn/e(AAACCVCV)
_/_/_/hƿ/o/nn/e(AAACVCV)
_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> þ, nn, w, _
					> version: _/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> þ, nn, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> þ, w, _, nn
					> version: _/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> þ, wh, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/w/h/o/n/e/n/e(AAACCVCVCV)
_/_/_/wh/o/n/e/n/e(AAACVCVCV)
_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
				version split: ['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> þ, nn, _, ȝ
					> version: _/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> þ, nn, ȝw, _
					> version: _/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> þ, nn, _, ȝ
					> version: _/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> þ, nn, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVVCVC : 4___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/h/ƿ/a/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/a/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/a/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					> version: _/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/h/ƿ/a/n/o/n(AAAACCVCVC)
_/_/_/_/hƿ/a/n/o/n(AAAACVCVC)
_/_/_/_/_/h/ƿ/a/n/o/n(AAAAACCVCVC)
_/_/_/_/_/hƿ/a/n/o/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/h/ƿ/e/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/e/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/e/nn/e(AAAACCVCV)
_/_/_/_/hƿ/e/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/e/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/e/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/e/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/e/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAACCVVCVCV)
_/_/_/_/hƿ/e/o/n/e/n/e(AAAACVVCVCV)
_/_/_/_/h/ƿ/eo/n/e/n/e(AAAACCVCVCV)
_/_/_/_/hƿ/eo/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAAACCVVCVCV)
_/_/_/_/_/hƿ/e/o/n/e/n/e(AAAAACVVCVCV)
_/_/_/_/_/h/ƿ/eo/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/eo/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					> version: _/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					> version: _/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/h/ƿ/o/n/n/e(AAAACCVCCV)
_/_/_/_/hƿ/o/n/n/e(AAAACVCCV)
_/_/_/_/h/ƿ/o/nn/e(AAAACCVCV)
_/_/_/_/hƿ/o/nn/e(AAAACVCV)
_/_/_/_/_/h/ƿ/o/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/o/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/o/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/o/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					> version: _/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/w/h/o/n/e/n/e(AAAACCVCVCV)
_/_/_/_/wh/o/n/e/n/e(AAAACVCVCV)
_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
				version split: ['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVVCVC : 5___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, s
					> version: _/_/_/_/_/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/a/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/h/ƿ/a/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/hƿ/a/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: _/_/_/_/_/h/ƿ/a/n/o/n
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/a/n/o/n
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				_/_/_/_/_/h/ƿ/a/n/o/n(AAAAACCVCVC)
_/_/_/_/_/hƿ/a/n/o/n(AAAAACVCVC)
_/_/_/_/_/_/h/ƿ/a/n/o/n(AAAAAACCVCVC)
_/_/_/_/_/_/hƿ/a/n/o/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/hƿ/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿenne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					> version: _/_/_/_/_/h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				_/_/_/_/_/h/ƿ/e/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/e/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/e/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/e/nn/e(AAAAACVCV)
_/_/_/_/_/_/h/ƿ/e/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/e/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/e/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/e/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					> version: _/_/_/_/_/h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				_/_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAAACCVVCVCV)
_/_/_/_/_/hƿ/e/o/n/e/n/e(AAAAACVVCVCV)
_/_/_/_/_/h/ƿ/eo/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/hƿ/eo/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/h/ƿ/e/o/n/e/n/e(AAAAAACCVVCVCV)
_/_/_/_/_/_/hƿ/e/o/n/e/n/e(AAAAAACVVCVCV)
_/_/_/_/_/_/h/ƿ/eo/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/hƿ/eo/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/eo', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					> version: _/_/_/_/_/h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					> version: _/_/_/_/_/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> n, hƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				_/_/_/_/_/h/ƿ/o/n/n/e(AAAAACCVCCV)
_/_/_/_/_/hƿ/o/n/n/e(AAAAACVCCV)
_/_/_/_/_/h/ƿ/o/nn/e(AAAAACCVCV)
_/_/_/_/_/hƿ/o/nn/e(AAAAACVCV)
_/_/_/_/_/_/h/ƿ/o/n/n/e(AAAAAACCVCCV)
_/_/_/_/_/_/hƿ/o/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/h/ƿ/o/nn/e(AAAAAACCVCV)
_/_/_/_/_/_/hƿ/o/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/hƿ/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'o', 'nn', 'e']
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/_/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (2)
					> version: _/_/_/_/_/w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, s
					> version: _/_/_/_/_/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> n, wh, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				_/_/_/_/_/w/h/o/n/e/n/e(AAAAACCVCVCV)
_/_/_/_/_/wh/o/n/e/n/e(AAAAACVCVCV)
_/_/_/_/_/_/w/h/o/n/e/n/e(AAAAAACCVCVCV)
_/_/_/_/_/_/wh/o/n/e/n/e(AAAAAACVCVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/wh/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'o', 'n', 'e', 'n', 'e']
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					> version: _/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, ȝ, _, s
					> version: _/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, ȝw, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'u', 'a', 'nn', 'e', 's']
		SPLIT: ['q', 'u', 'e', 'þ', 'e', 'n']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVCVC is INVALID
		[{'h', 'q', '_'}, {'þ', 'nn', '_'}]
		8
		OVERVIEW: version for pattern CVVCVC
{'h', 'q', '_'}, {'þ', 'nn', '_'}
faulty splits: 8
[''][''][''][''][''][''] <-! hƿanene
[''][''][''][''][''][''] <-! hƿanon
[''][''][''][''][''][''] <-! hƿenne
[''][''][''][''][''][''] <-! hƿeonene
[''][''][''][''][''][''] <-! hƿonne
[''][''][''][''][''][''] <-! wanne
[''][''][''][''][''][''] <-! whonene
[''][''][''][''][''][''] <-! ȝwannes
h | u | a | nn | e | s
q | u | e | þ | e | n
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'h', 'q', 'hƿ'},{'h', 'q'},{'h', 'q', '_', 'ȝ'},{'h', 'q', '_'},{'h', 'q', 'hƿ', '_'},{'h', 'q', 'wh', '_'},{'w', 'h', 'q', '_'},{'h', 'q', 'ȝw', '_'}
3 : {'þ', 'nn', 'ȝw', '_'},{'þ', 'nn', 'hƿ', '_'},{'þ', 'w', '_', 'nn'},{'þ', 'hƿ', '_', 'nn'},{'þ', 'nn', 'w', '_'},{'þ', 'nn', '_', 'ȝ'},{'þ', 'nn', 'h', '_'},{'þ', 'hƿ', 'nn'},{'þ', 'h', '_', 'nn'},{'þ', 'h', 'nn'},{'þ', 'wh', '_', 'nn'}
5 : {'n', 'hƿ', 's'},{'n', 'hƿ', '_', 's'},{'n', 'w', '_', 's'},{'n', 'ȝ', '_', 's'},{'n', 'wh', '_', 's'},{'n', 'h', '_', 's'},{'n', 'h', 's'},{'n', 'ȝw', '_', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CCVCVC
	Selection for pattern: CCVCVC completed
	Making a version for pattern: CCVCVC
			___CCVCVC : 0___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, ȝ
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> h, q, hƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
hƿ/a/n/e/n/e(CVCVCV)
_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/hƿ/a/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					> version: h/ƿ/e/nn/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'nn', 'e']
				h/ƿ/e/n/n/e(CCVCCV)
hƿ/e/n/n/e(CVCCV)
h/ƿ/e/nn/e(CCVCV)
hƿ/e/nn/e(CVCV)
_/h/ƿ/e/n/n/e(ACCVCCV)
_/hƿ/e/n/n/e(ACVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/hƿ/e/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				h/ƿ/e/o/n/e/n/e(CCVVCVCV)
hƿ/e/o/n/e/n/e(CVVCVCV)
h/ƿ/eo/n/e/n/e(CCVCVCV)
hƿ/eo/n/e/n/e(CVCVCV)
_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/hƿ/e/o/n/e/n/e(ACVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/hƿ/eo/n/e/n/e(ACVCVCV)
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					> version: h/ƿ/o/nn/e
					TRYING: h
					adding blocked set: C = C >> h, q, _, ȝ
					> version: hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> q, hƿ, ȝ, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				adding dashed alternative: ['_', 'hƿ', 'o', 'nn', 'e']
				h/ƿ/o/n/n/e(CCVCCV)
hƿ/o/n/n/e(CVCCV)
h/ƿ/o/nn/e(CCVCV)
hƿ/o/nn/e(CVCV)
_/h/ƿ/o/n/n/e(ACCVCCV)
_/hƿ/o/n/n/e(ACVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/hƿ/o/nn/e(ACVCV)
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, q, ȝ, h, _
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, q, ȝ, h, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, q, ȝ, h, _
					> version: wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> q, ȝ, h, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				w/h/o/n/e/n/e(CCVCVCV)
wh/o/n/e/n/e(CVCVCV)
_/w/h/o/n/e/n/e(ACCVCVCV)
_/wh/o/n/e/n/e(ACVCVCV)
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCVC : 1___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (2)
					> version: _/h/ƿ/a/n/e/n/e
					TRYING: h
					> version: _/hƿ/a/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> u, w, ƿ, hƿ
					RESULT:  ['h']
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿenne
					resolving (4)
					> version: _/h/ƿ/e/n/n/e
					TRYING: h
					> version: _/hƿ/e/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					> version: _/h/ƿ/e/nn/e
					TRYING: h
					> version: _/hƿ/e/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					RESULT:  ['h']
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'e', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'e', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (4)
					> version: _/h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: _/hƿ/e/o/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					> version: _/h/ƿ/eo/n/e/n/e
					TRYING: h
					> version: _/hƿ/eo/n/e/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					RESULT:  ['h']
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (4)
					> version: _/h/ƿ/o/n/n/e
					TRYING: h
					> version: _/hƿ/o/n/n/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					> version: _/h/ƿ/o/nn/e
					TRYING: h
					> version: _/hƿ/o/nn/e
					TRYING: hƿ
					adding blocked set: C = C >> w, ƿ, u, hƿ, h
					RESULT:  ['h']
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'o', 'n', 'n', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h', 'rgx': '((_))/((h))$'}
				version split: ['_', 'hƿ', 'o', 'nn', 'e']
				{'string': '_/hƿ', 'rgx': '((_))/((h))$'}
				_____REMOVING________['_', 'hƿ', 'o', 'nn', 'e']
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['w']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				ANALYSING: whonene
					resolving (2)
					> version: _/w/h/o/n/e/n/e
					TRYING: w
					> version: _/wh/o/n/e/n/e
					TRYING: wh
					adding blocked set: C = C >> w, ƿ, u, h, wh
					RESULT:  ['w']
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				version split: ['_', 'wh', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/wh', 'rgx': '((_))/((w))$'}
				_____REMOVING________['_', 'wh', 'o', 'n', 'e', 'n', 'e']
			___CCVCVC : 2___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: _/h/ƿ/a/n/e/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/ƿ/a/n/e/n/e(ACCVCVCV)
_/h/_/ƿ/a/n/e/n/e(ACACVCVCV)
				version split: ['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: _/h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: _/h/ƿ/e/nn/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'e', 'nn', 'e']
				_/h/ƿ/e/n/n/e(ACCVCCV)
_/h/ƿ/e/nn/e(ACCVCV)
_/h/_/ƿ/e/n/n/e(ACACVCCV)
_/h/_/ƿ/e/nn/e(ACACVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: _/h/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					> version: _/h/ƿ/eo/n/e/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/ƿ/e/o/n/e/n/e(ACCVVCVCV)
_/h/ƿ/eo/n/e/n/e(ACCVCVCV)
_/h/_/ƿ/e/o/n/e/n/e(ACACVVCVCV)
_/h/_/ƿ/eo/n/e/n/e(ACACVCVCV)
				version split: ['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: _/h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: _/h/ƿ/o/nn/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', 'ƿ', 'o', 'nn', 'e']
				_/h/ƿ/o/n/n/e(ACCVCCV)
_/h/ƿ/o/nn/e(ACCVCV)
_/h/_/ƿ/o/n/n/e(ACACVCCV)
_/h/_/ƿ/o/nn/e(ACACVCV)
				version split: ['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				version split: ['_', 'h', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_', 'rgx': '((_))/((h))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: a
					> version: _/w/a/nn/e
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				ANALYSING: whonene
					resolving (1)
					> version: _/w/h/o/n/e/n/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				_/w/h/o/n/e/n/e(ACCVCVCV)
_/w/_/h/o/n/e/n/e(ACACVCVCV)
				version split: ['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/h', 'rgx': '((_))/((w))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_', 'rgx': '((_))/((w))/((_))$'}
			___CCVCVC : 3___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: _/h/_/ƿ/a/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> þ, n, ƿ, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/_/ƿ/a/n/e/n/e(ACACVCVCV)
_/h/_/_/ƿ/a/n/e/n/e(ACAACVCVCV)
				version split: ['_', 'h', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: _/h/_/ƿ/e/n/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, nn, _, n
					> version: _/h/_/ƿ/e/nn/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, nn, _, n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'e', 'nn', 'e']
				_/h/_/ƿ/e/n/n/e(ACACVCCV)
_/h/_/ƿ/e/nn/e(ACACVCV)
_/h/_/_/ƿ/e/n/n/e(ACAACVCCV)
_/h/_/_/ƿ/e/nn/e(ACAACVCV)
				version split: ['_', 'h', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: _/h/_/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, _, nn, n
					> version: _/h/_/ƿ/eo/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, _, nn, n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/_/ƿ/e/o/n/e/n/e(ACACVVCVCV)
_/h/_/ƿ/eo/n/e/n/e(ACACVCVCV)
_/h/_/_/ƿ/e/o/n/e/n/e(ACAACVVCVCV)
_/h/_/_/ƿ/eo/n/e/n/e(ACAACVCVCV)
				version split: ['_', 'h', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: _/h/_/ƿ/o/n/n/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, nn, _, n
					> version: _/h/_/ƿ/o/nn/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, þ, nn, _, n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', 'ƿ', 'o', 'nn', 'e']
				_/h/_/ƿ/o/n/n/e(ACACVCCV)
_/h/_/ƿ/o/nn/e(ACACVCV)
_/h/_/_/ƿ/o/n/n/e(ACAACVCCV)
_/h/_/_/ƿ/o/nn/e(ACAACVCV)
				version split: ['_', 'h', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/_', 'rgx': '((_))/((h))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: n
					adding blocked set: C = C >> þ, n, _, nn
					> version: _/w/a/nn/e
					TRYING: nn
					adding blocked set: C = C >> þ, n, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', '_', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/w/a/_/n/n/e(ACVACCV)
_/w/a/_/nn/e(ACVACV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a/n', 'rgx': '((_))/((w))/((a))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a/nn', 'rgx': '((_))/((w))/((a))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_', 'rgx': '((_))/((w))/((a))/((_))$'}
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_', 'rgx': '((_))/((w))/((a))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: _/w/_/h/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> þ, h, nn, _, n
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				_/w/_/h/o/n/e/n/e(ACACVCVCV)
_/w/_/_/h/o/n/e/n/e(ACAACVCVCV)
				version split: ['_', 'w', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/h', 'rgx': '((_))/((w))/((_))/((_))$'}
				_____REMOVING________['_', 'w', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/_', 'rgx': '((_))/((w))/((_))/((_))$'}
			___CCVCVC : 4___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: _/h/_/_/ƿ/a/n/e/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/_/_/ƿ/a/n/e/n/e(ACAACVCVCV)
_/h/_/_/_/ƿ/a/n/e/n/e(ACAAACVCVCV)
				version split: ['_', 'h', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: _/h/_/_/ƿ/e/n/n/e
					TRYING: ƿ
					> version: _/h/_/_/ƿ/e/nn/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				_/h/_/_/ƿ/e/n/n/e(ACAACVCCV)
_/h/_/_/ƿ/e/nn/e(ACAACVCV)
_/h/_/_/_/ƿ/e/n/n/e(ACAAACVCCV)
_/h/_/_/_/ƿ/e/nn/e(ACAAACVCV)
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: _/h/_/_/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					> version: _/h/_/_/ƿ/eo/n/e/n/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/_/_/ƿ/e/o/n/e/n/e(ACAACVVCVCV)
_/h/_/_/ƿ/eo/n/e/n/e(ACAACVCVCV)
_/h/_/_/_/ƿ/e/o/n/e/n/e(ACAAACVVCVCV)
_/h/_/_/_/ƿ/eo/n/e/n/e(ACAAACVCVCV)
				version split: ['_', 'h', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: _/h/_/_/ƿ/o/n/n/e
					TRYING: ƿ
					> version: _/h/_/_/ƿ/o/nn/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				_/h/_/_/ƿ/o/n/n/e(ACAACVCCV)
_/h/_/_/ƿ/o/nn/e(ACAACVCV)
_/h/_/_/_/ƿ/o/n/n/e(ACAAACVCCV)
_/h/_/_/_/ƿ/o/nn/e(ACAAACVCV)
				version split: ['_', 'h', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/_/_', 'rgx': '((_))/((h))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/_/n/n/e
					TRYING: n
					> version: _/w/a/_/nn/e
					TRYING: nn
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', '_', '_', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', '_', '_', 'nn', 'e']
				_/w/a/_/n/n/e(ACVACCV)
_/w/a/_/nn/e(ACVACV)
_/w/a/_/_/n/n/e(ACVAACCV)
_/w/a/_/_/nn/e(ACVAACV)
				version split: ['_', 'w', 'a', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_/n', 'rgx': '((_))/((w))/((a))/((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', '_', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', '_', 'nn', 'e']
				{'string': '_/w/a/_/nn', 'rgx': '((_))/((w))/((a))/((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', '_', 'nn', 'e']
				version split: ['_', 'w', 'a', '_', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_/_', 'rgx': '((_))/((w))/((a))/((_))/((_))$'}
				version split: ['_', 'w', 'a', '_', '_', 'nn', 'e']
				{'string': '_/w/a/_/_', 'rgx': '((_))/((w))/((a))/((_))/((_))$'}
				ANALYSING: whonene
					resolving (1)
					> version: _/w/_/_/h/o/n/e/n/e
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				_/w/_/_/h/o/n/e/n/e(ACAACVCVCV)
_/w/_/_/_/h/o/n/e/n/e(ACAAACVCVCV)
				version split: ['_', 'w', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/_/h', 'rgx': '((_))/((w))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'w', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/_/_', 'rgx': '((_))/((w))/((_))/((_))/((_))$'}
			___CCVCVC : 5___
				ANALYSING: huannes
				adding littera based on matching pattern
				ANALYSING: hƿanon
				adding littera based on matching pattern
				ANALYSING: queþen
				adding littera based on matching pattern
				ANALYSING: ȝwannes
				adding littera based on matching pattern
				ANALYSING: hƿanene
					resolving (1)
					> version: _/h/_/_/_/ƿ/a/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				_/h/_/_/_/ƿ/a/n/e/n/e(ACAAACVCVCV)
_/h/_/_/_/_/ƿ/a/n/e/n/e(ACAAAACVCVCV)
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/ƿ/a', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿenne
					resolving (2)
					> version: _/h/_/_/_/ƿ/e/n/n/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					> version: _/h/_/_/_/ƿ/e/nn/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				_/h/_/_/_/ƿ/e/n/n/e(ACAAACVCCV)
_/h/_/_/_/ƿ/e/nn/e(ACAAACVCV)
_/h/_/_/_/_/ƿ/e/n/n/e(ACAAAACVCCV)
_/h/_/_/_/_/ƿ/e/nn/e(ACAAAACVCV)
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/_/_/ƿ/e', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/_/_/ƿ/e', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'nn', 'e']
				ANALYSING: hƿeonene
					resolving (2)
					> version: _/h/_/_/_/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					> version: _/h/_/_/_/ƿ/eo/n/e/n/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				_/h/_/_/_/ƿ/e/o/n/e/n/e(ACAAACVVCVCV)
_/h/_/_/_/ƿ/eo/n/e/n/e(ACAAACVCVCV)
_/h/_/_/_/_/ƿ/e/o/n/e/n/e(ACAAAACVVCVCV)
_/h/_/_/_/_/ƿ/eo/n/e/n/e(ACAAAACVCVCV)
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/ƿ/e', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/ƿ/eo', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: hƿonne
					resolving (2)
					> version: _/h/_/_/_/ƿ/o/n/n/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					> version: _/h/_/_/_/ƿ/o/nn/e
					TRYING: ƿ
					adding blocked set: C = C >> n, ƿ, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				_/h/_/_/_/ƿ/o/n/n/e(ACAAACVCCV)
_/h/_/_/_/ƿ/o/nn/e(ACAAACVCV)
_/h/_/_/_/_/ƿ/o/n/n/e(ACAAAACVCCV)
_/h/_/_/_/_/ƿ/o/nn/e(ACAAAACVCV)
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/_/_/ƿ/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/_/_/ƿ/o', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				{'string': '_/h/_/_/_/_/ƿ', 'rgx': '((_))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'h', '_', '_', '_', '_', 'ƿ', 'o', 'nn', 'e']
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/_/_/n/n/e
					TRYING: n
					> version: _/w/a/_/_/nn/e
					TRYING: nn
					adding blocked set: C = C >> n, nn, _, s
					RESULT:  ['n']
				version split: ['_', 'w', 'a', '_', '_', 'n', 'n', 'e']
				{'string': '_/w/a/_/_/n/n', 'rgx': '((_))/((w))/((a))/((_))/((_))/((n))$'}
				_____REMOVING________['_', 'w', 'a', '_', '_', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', '_', '_', 'nn', 'e']
				{'string': '_/w/a/_/_/nn/e', 'rgx': '((_))/((w))/((a))/((_))/((_))/((n))$'}
				_____REMOVING________['_', 'w', 'a', '_', '_', 'nn', 'e']
				ANALYSING: whonene
					resolving (1)
					> version: _/w/_/_/_/h/o/n/e/n/e
					TRYING: h
					adding blocked set: C = C >> n, h, _, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', '_', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				_/w/_/_/_/h/o/n/e/n/e(ACAAACVCVCV)
_/w/_/_/_/_/h/o/n/e/n/e(ACAAAACVCVCV)
				version split: ['_', 'w', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/_/_/h/o', 'rgx': '((_))/((w))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'w', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['_', 'w', '_', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': '_/w/_/_/_/_/h', 'rgx': '((_))/((w))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'w', '_', '_', '_', '_', 'h', 'o', 'n', 'e', 'n', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'u', 'a', 'nn', 'e', 's']
		SPLIT: ['h', 'ƿ', 'a', 'n', 'o', 'n']
		SPLIT: ['q', 'u', 'e', 'þ', 'e', 'n']
		SPLIT: ['ȝ', 'w', 'a', 'nn', 'e', 's']
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['w']", "['a']", "['_']", "['_']", "['n']"]
		SPLIT: ["['_']", "['w']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCVC is INVALID
		[{'h', 'q', '_', 'ȝ'}, {'þ', 'n', 'nn', '_'}]
		6
		OVERVIEW: version for pattern CCVCVC
{'h', 'q', '_', 'ȝ'}, {'þ', 'n', 'nn', '_'}
faulty splits: 6
['']['h'][''][''][''][''] <-! hƿanene
['']['h'][''][''][''][''] <-! hƿenne
['']['h'][''][''][''][''] <-! hƿeonene
['']['h'][''][''][''][''] <-! hƿonne
['']['w']['a']['']['']['n'] <-! wanne
['']['w'][''][''][''][''] <-! whonene
h | u | a | nn | e | s
h | ƿ | a | n | o | n
q | u | e | þ | e | n
ȝ | w | a | nn | e | s
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['w'] | ['a'] | ['_'] | ['_'] | ['n']
['_'] | ['w'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'w', 'q', 'ȝ', 'h', '_'},{'q', 'hƿ', 'ȝ', 'h', '_'},{'q', 'ȝ', 'h', '_', 'wh'},{'h', 'q', '_', 'ȝ'},{'h', 'q', 'ȝ'},{'h', 'q', 'hƿ', 'ȝ'}
3 : {'ƿ', 'þ', 'nn', '_', 'n'},{'þ', 'n', 'ƿ', 'nn'},{'þ', 'n', '_', 'nn'},{'þ', 'h', 'nn', '_', 'n'},{'ƿ', 'þ', '_', 'nn', 'n'}
5 : {'n', 'ƿ', '_', 's'},{'n', 'h', '_', 's'},{'n', 'ƿ', 's'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CVCVCV
	Selection for pattern: CVCVCV completed
	Making a version for pattern: CVCVCV
			___CVCVCV : 0___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: hu/a/n/n/e/s
					TRYING: hu
					adding blocked set: C = C >> hu, wh, hƿ
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: hu/a/nn/e/s
					TRYING: hu
					adding blocked set: C = C >> hu, wh, hƿ
					RESULT:  ['h']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: h
					> version: hƿ/e/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/e/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/e/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: h
					> version: hƿ/o/n/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/o/nn/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/o/nn/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, wh, hƿ
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, wh, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, wh, hƿ
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, wh, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, wh, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, hƿ, h, _, wh
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, hƿ, h, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CVCVCV : 1___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					> version: hƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((a))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((a))$'}
				ANALYSING: hƿenne
					resolving (4)
					> version: h/ƿ/e/n/n/e
					TRYING: ƿ
					> version: hƿ/e/n/n/e
					TRYING: e
					> version: h/ƿ/e/nn/e
					TRYING: ƿ
					> version: hƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'e', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((e))$'}
				version split: ['h', 'ƿ', 'e', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((e))$'}
				ANALYSING: hƿonne
					resolving (4)
					> version: h/ƿ/o/n/n/e
					TRYING: ƿ
					> version: hƿ/o/n/n/e
					TRYING: o
					> version: h/ƿ/o/nn/e
					TRYING: ƿ
					> version: hƿ/o/nn/e
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'o', 'n', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((o))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((o))$'}
				version split: ['h', 'ƿ', 'o', 'nn', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((o))$'}
				_____REMOVING________['h', 'ƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o', 'rgx': '((h)|(hƿ))/((o))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/q/u/e/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					> version: _/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', 'w', 'a', 'nn', 'e']
				_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCVCV : 2___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				h/u/a/n/n/e/s(CCVCCVC)
h/u/a/n/n/e/s(CVVCCVC)
h/u/a/nn/e/s(CCVCVC)
h/u/a/nn/e/s(CVVCVC)
h/u/_/a/n/n/e/s(CAAVCCVC)
h/u/_/a/n/n/e/s(CAAVCCVC)
h/u/_/a/nn/e/s(CAAVCVC)
h/u/_/a/nn/e/s(CAAVCVC)
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((_))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_', 'rgx': '((h))/((u))/((_))$'}
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_', 'rgx': '((h))/((u))/((_))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_', 'rgx': '((h))/((u))/((_))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_', 'rgx': '((h))/((u))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a/n', 'rgx': '((h)|(hƿ))/((a))/((n))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: hƿ/e/n/n/e
					TRYING: n
					> version: hƿ/e/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e/n', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))$'}
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e/nn', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: hƿ/o/n/n/e
					TRYING: n
					> version: hƿ/o/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o/n', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))$'}
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o/nn', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn, _
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn, _
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn, _
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn, _
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, nn
					> version: _/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/w/a/n/n/e(AACVCCV)
_/_/w/a/nn/e(AACVCV)
_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
				version split: ['_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					> version: _/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, nn, _, ȝ
					> version: _/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> n, nn, ȝw, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/ȝ/w/a/n/n/e/s(AACCVCCVC)
_/_/ȝw/a/n/n/e/s(AACVCCVC)
_/_/ȝ/w/a/nn/e/s(AACCVCVC)
_/_/ȝw/a/nn/e/s(AACVCVC)
_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
				version split: ['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/ȝw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCVCV : 3___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/_/a/n/n/e/s
					TRYING: a
					> version: h/u/_/a/n/n/e/s
					TRYING: a
					> version: h/u/_/a/nn/e/s
					TRYING: a
					> version: h/u/_/a/nn/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a', 'rgx': '((h))/((u))/((_))/((a))$'}
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a', 'rgx': '((h))/((u))/((_))/((a))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a', 'rgx': '((h))/((u))/((_))/((a))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a', 'rgx': '((h))/((u))/((_))/((a))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/n/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a/n/o', 'rgx': '((h)|(hƿ))/((a))/((n))/((o))$'}
				ANALYSING: hƿenne
					resolving (2)
					> version: hƿ/e/n/n/e
					TRYING: n
					> version: hƿ/e/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'e', 'n', 'n', 'e']
				{'string': 'hƿ/e/n/n', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))$'}
				_____REMOVING________['hƿ', 'e', 'n', 'n', 'e']
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e/nn/e', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))$'}
				ANALYSING: hƿonne
					resolving (2)
					> version: hƿ/o/n/n/e
					TRYING: n
					> version: hƿ/o/nn/e
					TRYING: e
					RESULT:  ['e']
				version split: ['hƿ', 'o', 'n', 'n', 'e']
				{'string': 'hƿ/o/n/n', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))$'}
				_____REMOVING________['hƿ', 'o', 'n', 'n', 'e']
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o/nn/e', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/w/a/n/n/e(AAACVCCV)
_/_/_/w/a/nn/e(AAACVCV)
_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
				version split: ['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/ȝ/w/a/n/n/e/s(AAACCVCCVC)
_/_/_/ȝw/a/n/n/e/s(AAACVCCVC)
_/_/_/ȝ/w/a/nn/e/s(AAACCVCVC)
_/_/_/ȝw/a/nn/e/s(AAACVCVC)
_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCVCV : 4___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/_/a/n/n/e/s
					TRYING: n
					> version: h/u/_/a/n/n/e/s
					TRYING: n
					> version: h/u/_/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					> version: h/u/_/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a/n', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a/n', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a/nn', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a/nn', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a/n/o/n', 'rgx': '((h)|(hƿ))/((a))/((n))/((o))/((n))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: hƿ/e/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'e', 'nn', 'e', '_']
				hƿ/e/nn/e(CVCV)
hƿ/e/nn/e/_(CVCVA)
				version split: ['hƿ', 'e', 'nn', 'e']
				{'string': 'hƿ/e/nn/e', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e']
				version split: ['hƿ', 'e', 'nn', 'e', '_']
				{'string': 'hƿ/e/nn/e/_', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: hƿ/o/nn/e
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'o', 'nn', 'e', '_']
				hƿ/o/nn/e(CVCV)
hƿ/o/nn/e/_(CVCVA)
				version split: ['hƿ', 'o', 'nn', 'e']
				{'string': 'hƿ/o/nn/e', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))/((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e']
				version split: ['hƿ', 'o', 'nn', 'e', '_']
				{'string': 'hƿ/o/nn/e/_', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, nn
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _, nn
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					> version: _/_/_/_/w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/w/a/n/n/e(AAAACVCCV)
_/_/_/_/w/a/nn/e(AAAACVCV)
_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
				version split: ['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, _, nn, ȝ
					> version: _/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> ȝw, n, _, nn
					> version: _/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> n, _, nn, ȝ
					> version: _/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> ȝw, n, _, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/ȝ/w/a/n/n/e/s(AAAACCVCCVC)
_/_/_/_/ȝw/a/n/n/e/s(AAAACVCCVC)
_/_/_/_/ȝ/w/a/nn/e/s(AAAACCVCVC)
_/_/_/_/ȝw/a/nn/e/s(AAAACVCVC)
_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVCVCV : 5___
				ANALYSING: hƿanene
				adding littera based on matching pattern
				ANALYSING: hƿeonene
				adding littera based on matching pattern
				ANALYSING: whonene
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/_/a/n/n/e/s
					TRYING: n
					> version: h/u/_/a/n/n/e/s
					TRYING: n
					> version: h/u/_/a/nn/e/s
					TRYING: e
					> version: h/u/_/a/nn/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a/n/n/e', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/_/a/n/n/e', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', '_', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a/nn/e/s', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', '_', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', '_', 'a', 'nn', 'e', 's']
				{'string': 'h/u/_/a/nn/e/s', 'rgx': '((h))/((u))/((_))/((a))/((n)|(nn))/((e))$'}
				_____REMOVING________['h', 'u', '_', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanon
					resolving (1)
					> version: hƿ/a/n/o/n
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'a', 'n', 'o', 'n', '_']
				hƿ/a/n/o/n(CVCVC)
hƿ/a/n/o/n/_(CVCVCA)
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a/n/o/n', 'rgx': '((h)|(hƿ))/((a))/((n))/((o))/((n))/((_))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				version split: ['hƿ', 'a', 'n', 'o', 'n', '_']
				{'string': 'hƿ/a/n/o/n/_', 'rgx': '((h)|(hƿ))/((a))/((n))/((o))/((n))/((_))$'}
				ANALYSING: hƿenne
					resolving (1)
					> version: hƿ/e/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'e', 'nn', 'e', '_', '_']
				hƿ/e/nn/e/_(CVCVA)
hƿ/e/nn/e/_/_(CVCVAA)
				version split: ['hƿ', 'e', 'nn', 'e', '_']
				{'string': 'hƿ/e/nn/e/_', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['hƿ', 'e', 'nn', 'e', '_']
				version split: ['hƿ', 'e', 'nn', 'e', '_', '_']
				{'string': 'hƿ/e/nn/e/_/_', 'rgx': '((h)|(hƿ))/((e))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: hƿonne
					resolving (1)
					> version: hƿ/o/nn/e/_
					RESULT:  ['_']
				adding dashed alternative: ['hƿ', 'o', 'nn', 'e', '_', '_']
				hƿ/o/nn/e/_(CVCVA)
hƿ/o/nn/e/_/_(CVCVAA)
				version split: ['hƿ', 'o', 'nn', 'e', '_']
				{'string': 'hƿ/o/nn/e/_', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))/((_))/((_))$'}
				_____REMOVING________['hƿ', 'o', 'nn', 'e', '_']
				version split: ['hƿ', 'o', 'nn', 'e', '_', '_']
				{'string': 'hƿ/o/nn/e/_/_', 'rgx': '((h)|(hƿ))/((o))/((n)|(nn))/((e))/((_))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (2)
					> version: _/_/_/_/_/w/a/n/n/e
					TRYING: w
					> version: _/_/_/_/_/w/a/nn/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				_/_/_/_/_/w/a/n/n/e(AAAAACVCCV)
_/_/_/_/_/w/a/nn/e(AAAAACVCV)
_/_/_/_/_/_/w/a/n/n/e(AAAAAACVCCV)
_/_/_/_/_/_/w/a/nn/e(AAAAAACVCV)
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/w/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'a', 'nn', 'e']
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/_/_/_/_/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/ȝw/a/n/n/e/s
					TRYING: ȝw
					> version: _/_/_/_/_/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/_/_/_/_/ȝw/a/nn/e/s
					TRYING: ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAACCVCCVC)
_/_/_/_/_/ȝw/a/n/n/e/s(AAAAACVCCVC)
_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAACCVCVC)
_/_/_/_/_/ȝw/a/nn/e/s(AAAAACVCVC)
_/_/_/_/_/_/ȝ/w/a/n/n/e/s(AAAAAACCVCCVC)
_/_/_/_/_/_/ȝw/a/n/n/e/s(AAAAAACVCCVC)
_/_/_/_/_/_/ȝ/w/a/nn/e/s(AAAAAACCVCVC)
_/_/_/_/_/_/ȝw/a/nn/e/s(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝ/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/ȝw/a', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/_/_/_/_/_/ȝw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ȝw', 'a', 'nn', 'e', 's']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['hƿ', 'a', 'n', 'o', 'n', '_']
		only one version left: ['hƿ', 'e', 'nn', 'e', '_', '_']
		only one version left: ['hƿ', 'o', 'nn', 'e', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['hƿ', 'a', 'n', 'e', 'n', 'e']
		SPLIT: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
		SPLIT: ['wh', 'o', 'n', 'e', 'n', 'e']
		SPLIT: ["['h']", "['u']", "['_']", "['a']", "['n', 'nn']", "['e']"]
		SPLIT: ['hƿ', 'a', 'n', 'o', 'n', '_']
		['hƿ', 'a', 'n', 'o', 'n', '_']
		SPLIT: ['hƿ', 'e', 'nn', 'e', '_', '_']
		['hƿ', 'e', 'nn', 'e', '_', '_']
		SPLIT: ['hƿ', 'o', 'nn', 'e', '_', '_']
		['hƿ', 'o', 'nn', 'e', '_', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCVCV

faulty splits: 4
['h']['u']['']['a']['n', 'nn']['e'] <-! huannes
[''][''][''][''][''][''] <-! queþen
[''][''][''][''][''][''] <-! wanne
[''][''][''][''][''][''] <-! ȝwannes
hƿ | a | n | e | n | e
hƿ | eo | n | e | n | e
wh | o | n | e | n | e
['h'] | ['u'] | ['_'] | ['a'] | ['n', 'nn'] | ['e']
hƿ | a | n | o | n | _
hƿ | e | nn | e | _ | _
hƿ | o | nn | e | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'hƿ', 'h', 'ȝw', '_', 'wh'},{'qu', 'h', 'wh', 'hƿ'},{'hƿ', 'ȝ', 'h', '_', 'wh'},{'h', 'q', 'wh', 'hƿ'},{'w', 'hƿ', 'h', '_', 'wh'}
2 : {'qu', 'n', 'nn', '_'},{'n', 'w', '_', 'nn'},{'n', 'q', 'nn', '_'},{'n', 'nn', '_', 'ȝ'},{'n', 'nn', 'ȝw', '_'}
4 : {'qu', 'n', '_', 'nn'},{'n', 'q', '_', 'nn'},{'n', 'w', 'nn', '_'},{'ȝw', 'n', '_', 'nn'},{'n', '_', 'nn', 'ȝ'}
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hu', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'eo', 'ln': 2, 'index': 2}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'eo', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'hƿ', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'qu', 'ln': 2, 'index': 0}], [{'lit': 'ue', 'ln': 2, 'index': 1}], [{'lit': 'qu', 'ln': 2, 'index': 0}, {'lit': 'ue', 'ln': 2, 'index': 1}]]
	[[{'lit': 'nn', 'ln': 2, 'index': 2}]]
	[[{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}], [{'lit': 'nn', 'ln': 2, 'index': 3}], [{'lit': 'ȝw', 'ln': 2, 'index': 0}, {'lit': 'nn', 'ln': 2, 'index': 3}]]
	MIN pattern length=6
	Pattern CVCCVC is valid
	Pattern CCVCCVC is valid
	Pattern CVVCVCV is valid
	Pattern CCVVCVCV is valid
	Pattern CVCCV is invalid
	Pattern CVVCCVC is valid
	Pattern CCVCV is invalid
	Pattern CCVCVCV is valid
	Pattern CVVCVC is valid
	Pattern CCVCVC is valid
	Pattern CVCVCV is valid
	Pattern CCVCCV is valid
	Pattern CVCVC is invalid
	Pattern CVCV is invalid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (6)
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: h/u/a/n/n/e/s
					TRYING: h
					> version: hu/a/n/n/e/s
					TRYING: hu
					adding blocked set: C = C >> h, hu
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: h/u/a/nn/e/s
					TRYING: h
					> version: hu/a/nn/e/s
					TRYING: hu
					adding blocked set: C = C >> h, hu
					RESULT:  ['h']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'n', 'n', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hu', 'a', 'nn', 'e', 's']
				{'string': 'hu', 'rgx': '((h))$'}
				_____REMOVING________['hu', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: h
					> version: hƿ/a/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: h
					> version: hƿ/a/n/o/n
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: h
					> version: hƿ/e/o/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: h/ƿ/eo/n/e/n/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/eo/n/e/n/e
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: queþen
					resolving (5)
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					> version: q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> h, q, hƿ
					> version: qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, h, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', 'qu', 'e', 'þ', 'e', 'n']
				q/u/e/þ/e/n(CCVCVC)
q/u/e/þ/e/n(CVVCVC)
qu/e/þ/e/n(CVCVC)
q/ue/þ/e/n(CVCVC)
qu/e/þ/e/n(CVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['q', 'u', 'e', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['q', 'ue', 'þ', 'e', 'n']
				{'string': 'q', 'rgx': '((_))$'}
				_____REMOVING________['q', 'ue', 'þ', 'e', 'n']
				version split: ['qu', 'e', 'þ', 'e', 'n']
				{'string': 'qu', 'rgx': '((_))$'}
				_____REMOVING________['qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: w/a/n/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					> version: w/a/nn/e
					TRYING: w
					adding blocked set: C = C >> w, h, hƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'a', 'n', 'n', 'e']
				adding dashed alternative: ['_', 'w', 'a', 'nn', 'e']
				w/a/n/n/e(CVCCV)
w/a/nn/e(CVCV)
_/w/a/n/n/e(ACVCCV)
_/w/a/nn/e(ACVCV)
				version split: ['w', 'a', 'n', 'n', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'n', 'n', 'e']
				version split: ['w', 'a', 'nn', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'a', 'nn', 'e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whonene
					resolving (2)
					> version: w/h/o/n/e/n/e
					TRYING: w
					adding blocked set: C = C >> w, h, _, hƿ
					> version: wh/o/n/e/n/e
					TRYING: wh
					RESULT:  ['wh']
				version split: ['w', 'h', 'o', 'n', 'e', 'n', 'e']
				{'string': 'w', 'rgx': '((wh))$'}
				_____REMOVING________['w', 'h', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh', 'rgx': '((wh))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: ȝ/w/a/n/n/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					> version: ȝ/w/a/nn/e/s
					TRYING: ȝ
					adding blocked set: C = C >> hƿ, ȝ, h, _, wh
					> version: ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> hƿ, h, ȝw, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				adding dashed alternative: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				ȝ/w/a/n/n/e/s(CCVCCVC)
ȝw/a/n/n/e/s(CVCCVC)
ȝ/w/a/nn/e/s(CCVCVC)
ȝw/a/nn/e/s(CVCVC)
_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝw/a/n/n/e/s(ACVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝw/a/nn/e/s(ACVCVC)
				version split: ['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': 'ȝ', 'rgx': '((_))$'}
				_____REMOVING________['ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['ȝw', 'a', 'nn', 'e', 's']
				{'string': 'ȝw', 'rgx': '((_))$'}
				_____REMOVING________['ȝw', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCCV : 1___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/n/n/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					> version: h/u/a/nn/e/s
					TRYING: u
					RESULT:  ['u']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u', 'rgx': '((h))/((u))$'}
				ANALYSING: hƿanene
					resolving (2)
					> version: h/ƿ/a/n/e/n/e
					TRYING: ƿ
					> version: hƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (2)
					> version: h/ƿ/a/n/o/n
					TRYING: ƿ
					> version: hƿ/a/n/o/n
					TRYING: a
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'a', 'n', 'o', 'n']
				{'string': 'hƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'a', 'n', 'o', 'n']
				ANALYSING: hƿeonene
					resolving (4)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: ƿ
					> version: hƿ/e/o/n/e/n/e
					TRYING: e
					> version: h/ƿ/eo/n/e/n/e
					TRYING: ƿ
					> version: hƿ/eo/n/e/n/e
					TRYING: eo
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'hƿ/eo', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'eo', 'n', 'e', 'n', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, ƿ, qu
					> version: _/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> u, q, ƿ
					> version: _/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> u, ƿ, qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/q/u/e/þ/e/n(ACAVCVC)
_/q/u/e/þ/e/n(ACAVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/q/ue/þ/e/n(ACVCVC)
_/qu/e/þ/e/n(ACVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/q', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/qu', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: w
					> version: _/w/a/nn/e
					TRYING: w
					RESULT:  ['w']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w', 'rgx': '((_))/((w))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/o/n/e/n/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				wh/o/n/e/n/e(CVCVCV)
wh/_/o/n/e/n/e(CAVCVCV)
				version split: ['wh', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/o', 'rgx': '((wh))/((_))$'}
				_____REMOVING________['wh', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_', 'rgx': '((wh))/((_))$'}
				ANALYSING: ȝwannes
					resolving (4)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: ȝ
					> version: _/ȝw/a/n/n/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, ƿ, u, ȝw, _
					> version: _/ȝ/w/a/nn/e/s
					TRYING: ȝ
					> version: _/ȝw/a/nn/e/s
					TRYING: ȝw
					adding blocked set: C = C >> w, ƿ, u, ȝw, _
					RESULT:  ['ȝ']
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((ȝ))$'}
				version split: ['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((ȝ))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ', 'rgx': '((_))/((ȝ))$'}
				version split: ['_', 'ȝw', 'a', 'nn', 'e', 's']
				{'string': '_/ȝw', 'rgx': '((_))/((ȝ))$'}
				_____REMOVING________['_', 'ȝw', 'a', 'nn', 'e', 's']
			___CCVCCV : 2___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/n/n/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					> version: h/u/a/nn/e/s
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a', 'rgx': '((h))/((u))/((a))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))/((a))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: a
					RESULT:  ['a']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a', 'rgx': '((h)|(hƿ))/((ƿ))/((a))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: e
					> version: h/ƿ/eo/n/e/n/e
					TRYING: eo
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'eo'}
					RESULT:  ['e', 'eo']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))$'}
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/q/u/e/þ/e/n(AACAVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/q/ue/þ/e/n(AACVCVC)
_/_/qu/e/þ/e/n(AACVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/q', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/qu', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: a
					> version: _/w/a/nn/e
					TRYING: a
					RESULT:  ['a']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a', 'rgx': '((_))/((w))/((a))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/e/n/e
					TRYING: o
					RESULT:  ['o']
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o', 'rgx': '((wh))/((_))/((o))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/w/a/n/n/e/s(ACCVCCVC)
_/ȝ/w/a/nn/e/s(ACCVCVC)
_/ȝ/_/w/a/n/n/e/s(ACACVCCVC)
_/ȝ/_/w/a/nn/e/s(ACACVCVC)
				version split: ['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/w', 'rgx': '((_))/((ȝ))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/w', 'rgx': '((_))/((ȝ))/((_))$'}
				_____REMOVING________['_', 'ȝ', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_', 'rgx': '((_))/((ȝ))/((_))$'}
				version split: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_', 'rgx': '((_))/((ȝ))/((_))$'}
			___CCVCCV : 3___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					> version: h/u/a/nn/e/s
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn', 'rgx': '((h))/((u))/((a))/((n)|(nn))$'}
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))$'}
				ANALYSING: hƿeonene
					resolving (2)
					> version: h/ƿ/e/o/n/e/n/e
					TRYING: o
					> version: h/ƿ/eo/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/e/o', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))/((n))$'}
				_____REMOVING________['h', 'ƿ', 'e', 'o', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))/((n))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					> version: _/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, nn
					> version: _/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, nn
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/q/u/e/þ/e/n(AAACAVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/q/ue/þ/e/n(AAACVCVC)
_/_/_/qu/e/þ/e/n(AAACVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: n
					> version: _/w/a/nn/e
					TRYING: nn
					>>> MULTIPLE RESOLVE OPTIONS: {'n', 'nn'}
					RESULT:  ['n', 'nn']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a/n', 'rgx': '((_))/((w))/((a))/((n)|(nn))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a/nn', 'rgx': '((_))/((w))/((a))/((n)|(nn))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/e/n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/n', 'rgx': '((wh))/((_))/((o))/((n))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/w/a/n/n/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					> version: _/ȝ/_/w/a/nn/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, nn, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/w/a/n/n/e/s(ACACVCCVC)
_/ȝ/_/w/a/nn/e/s(ACACVCVC)
_/ȝ/_/_/w/a/n/n/e/s(ACAACVCCVC)
_/ȝ/_/_/w/a/nn/e/s(ACAACVCVC)
				version split: ['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))$'}
			___CCVCCV : 4___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (4)
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/n/n/e/s
					TRYING: n
					> version: h/u/a/nn/e/s
					TRYING: e
					> version: h/u/a/nn/e/s
					TRYING: e
					RESULT:  ['n']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))$'}
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))$'}
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				version split: ['h', 'u', 'a', 'nn', 'e', 's']
				{'string': 'h/u/a/nn/e', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))$'}
				_____REMOVING________['h', 'u', 'a', 'nn', 'e', 's']
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				h/ƿ/a/n/e/n/e(CCVCVCV)
h/ƿ/a/n/_/e/n/e(CCVCAVCV)
				version split: ['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/e', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/_', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))$'}
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/o/n
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				h/ƿ/a/n/o/n(CCVCVC)
h/ƿ/a/n/_/o/n(CCVCAVC)
				version split: ['h', 'ƿ', 'a', 'n', 'o', 'n']
				{'string': 'h/ƿ/a/n/o', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', 'o', 'n']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				{'string': 'h/ƿ/a/n/_', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))$'}
				ANALYSING: hƿeonene
					resolving (1)
					> version: h/ƿ/eo/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				h/ƿ/eo/n/e/n/e(CCVCVCV)
h/ƿ/eo/n/_/e/n/e(CCVCAVCV)
				version split: ['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/e', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))/((n))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', 'e', 'n', 'e']
				version split: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/_', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))/((n))/((_))$'}
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/q/u/e/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					> version: _/_/_/_/q/ue/þ/e/n
					TRYING: q
					adding blocked set: C = C >> n, q, _
					> version: _/_/_/_/qu/e/þ/e/n
					TRYING: qu
					adding blocked set: C = C >> qu, n, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/q/u/e/þ/e/n(AAAACAVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/q/ue/þ/e/n(AAAACVCVC)
_/_/_/_/qu/e/þ/e/n(AAAACVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wanne
					resolving (2)
					> version: _/w/a/n/n/e
					TRYING: n
					> version: _/w/a/nn/e
					TRYING: e
					RESULT:  ['n']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a/n/n', 'rgx': '((_))/((w))/((a))/((n)|(nn))/((n))$'}
				version split: ['_', 'w', 'a', 'nn', 'e']
				{'string': '_/w/a/nn/e', 'rgx': '((_))/((w))/((a))/((n)|(nn))/((n))$'}
				_____REMOVING________['_', 'w', 'a', 'nn', 'e']
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/e/n/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['wh', '_', 'o', 'n', '_', 'e', 'n', 'e']
				wh/_/o/n/e/n/e(CAVCVCV)
wh/_/o/n/_/e/n/e(CAVCAVCV)
				version split: ['wh', '_', 'o', 'n', 'e', 'n', 'e']
				{'string': 'wh/_/o/n/e', 'rgx': '((wh))/((_))/((o))/((n))/((_))$'}
				_____REMOVING________['wh', '_', 'o', 'n', 'e', 'n', 'e']
				version split: ['wh', '_', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'wh/_/o/n/_', 'rgx': '((wh))/((_))/((o))/((n))/((_))$'}
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/w/a/n/n/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, _
					> version: _/ȝ/_/_/w/a/nn/e/s
					TRYING: w
					adding blocked set: C = C >> n, w, _
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/w/a/n/n/e/s(ACAACVCCVC)
_/ȝ/_/_/w/a/nn/e/s(ACAACVCVC)
_/ȝ/_/_/_/w/a/n/n/e/s(ACAAACVCCVC)
_/ȝ/_/_/_/w/a/nn/e/s(ACAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))$'}
			___CCVCCV : 5___
				ANALYSING: hƿenne
				adding littera based on matching pattern
				ANALYSING: hƿonne
				adding littera based on matching pattern
				ANALYSING: huannes
					resolving (2)
					> version: h/u/a/n/n/e/s
					TRYING: e
					> version: h/u/a/n/n/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				version split: ['h', 'u', 'a', 'n', 'n', 'e', 's']
				{'string': 'h/u/a/n/n/e/s', 'rgx': '((h))/((u))/((a))/((n)|(nn))/((n))/((e))$'}
				_____REMOVING________['h', 'u', 'a', 'n', 'n', 'e', 's']
				ANALYSING: hƿanene
					resolving (1)
					> version: h/ƿ/a/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/a/n/_/e/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', '_', 'e', 'n', 'e']
				ANALYSING: hƿanon
					resolving (1)
					> version: h/ƿ/a/n/_/o/n
					TRYING: o
					RESULT:  ['o']
				version split: ['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				{'string': 'h/ƿ/a/n/_/o/n', 'rgx': '((h)|(hƿ))/((ƿ))/((a))/((n))/((_))/((o))$'}
				_____REMOVING________['h', 'ƿ', 'a', 'n', '_', 'o', 'n']
				ANALYSING: hƿeonene
					resolving (1)
					> version: h/ƿ/eo/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				{'string': 'h/ƿ/eo/n/_/e/n', 'rgx': '((h)|(hƿ))/((ƿ))/((e)|(eo))/((n))/((_))/((e))$'}
				_____REMOVING________['h', 'ƿ', 'eo', 'n', '_', 'e', 'n', 'e']
				ANALYSING: queþen
					resolving (5)
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/q/u/e/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					> version: _/_/_/_/_/q/ue/þ/e/n
					TRYING: q
					> version: _/_/_/_/_/qu/e/þ/e/n
					TRYING: qu
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/q/u/e/þ/e/n(AAAAACAVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/q/ue/þ/e/n(AAAAACVCVC)
_/_/_/_/_/qu/e/þ/e/n(AAAAACVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/q/u/e/þ/e/n(AAAAAACAVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/q/ue/þ/e/n(AAAAAACVCVC)
_/_/_/_/_/_/qu/e/þ/e/n(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/q/ue', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/qu/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'u', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/q', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'q', 'ue', 'þ', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				{'string': '_/_/_/_/_/_/qu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'qu', 'e', 'þ', 'e', 'n']
				ANALYSING: wanne
					resolving (1)
					> version: _/w/a/n/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'w', 'a', 'n', 'n', 'e']
				{'string': '_/w/a/n/n/e', 'rgx': '((_))/((w))/((a))/((n)|(nn))/((n))/((e))$'}
				ANALYSING: whonene
					resolving (1)
					> version: wh/_/o/n/_/e/n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['wh', '_', 'o', 'n', '_', 'e', 'n', 'e']
				{'string': 'wh/_/o/n/_/e/n', 'rgx': '((wh))/((_))/((o))/((n))/((_))/((e))$'}
				_____REMOVING________['wh', '_', 'o', 'n', '_', 'e', 'n', 'e']
				ANALYSING: ȝwannes
					resolving (2)
					> version: _/ȝ/_/_/_/w/a/n/n/e/s
					TRYING: w
					> version: _/ȝ/_/_/_/w/a/nn/e/s
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				adding dashed alternative: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				_/ȝ/_/_/_/w/a/n/n/e/s(ACAAACVCCVC)
_/ȝ/_/_/_/w/a/nn/e/s(ACAAACVCVC)
_/ȝ/_/_/_/_/w/a/n/n/e/s(ACAAAACVCCVC)
_/ȝ/_/_/_/_/w/a/nn/e/s(ACAAAACVCVC)
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/w/a', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/w/a', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'n', 'n', 'e', 's']
				version split: ['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
				{'string': '_/ȝ/_/_/_/_/w', 'rgx': '((_))/((ȝ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', 'ȝ', '_', '_', '_', '_', 'w', 'a', 'nn', 'e', 's']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['_', 'w', 'a', 'n', 'n', 'e']
		FAIL: 
		FAIL: 
		SPLIT: ['h', 'ƿ', 'e', 'n', 'n', 'e']
		SPLIT: ['h', 'ƿ', 'o', 'n', 'n', 'e']
		SPLIT: ["['h']", "['u']", "['a']", "['n', 'nn']", "['n']", "['e']"]
		SPLIT: ["['h', 'hƿ']", "['ƿ']", "['a']", "['n']", "['_']", "['e']"]
		SPLIT: ["['h', 'hƿ']", "['ƿ']", "['a']", "['n']", "['_']", "['o']"]
		SPLIT: ["['h', 'hƿ']", "['ƿ']", "['e', 'eo']", "['n']", "['_']", "['e']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['_', 'w', 'a', 'n', 'n', 'e']
		['_', 'w', 'a', 'n', 'n', 'e']
		SPLIT: ["['wh']", "['_']", "['o']", "['n']", "['_']", "['e']"]
		SPLIT: ["['_']", "['ȝ']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCCV is INVALID
		[]
		7
		OVERVIEW: version for pattern CCVCCV

faulty splits: 7
['h']['u']['a']['n', 'nn']['n']['e'] <-! huannes
['h', 'hƿ']['ƿ']['a']['n']['']['e'] <-! hƿanene
['h', 'hƿ']['ƿ']['a']['n']['']['o'] <-! hƿanon
['h', 'hƿ']['ƿ']['e', 'eo']['n']['']['e'] <-! hƿeonene
[''][''][''][''][''][''] <-! queþen
['wh']['']['o']['n']['']['e'] <-! whonene
['']['ȝ'][''][''][''][''] <-! ȝwannes
h | ƿ | e | n | n | e
h | ƿ | o | n | n | e
['h'] | ['u'] | ['a'] | ['n', 'nn'] | ['n'] | ['e']
['h', 'hƿ'] | ['ƿ'] | ['a'] | ['n'] | ['_'] | ['e']
['h', 'hƿ'] | ['ƿ'] | ['a'] | ['n'] | ['_'] | ['o']
['h', 'hƿ'] | ['ƿ'] | ['e', 'eo'] | ['n'] | ['_'] | ['e']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
_ | w | a | n | n | e
['wh'] | ['_'] | ['o'] | ['n'] | ['_'] | ['e']
['_'] | ['ȝ'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'hƿ', 'h', 'ȝw', '_', 'wh'},{'h', 'q', 'hƿ'},{'hƿ', 'ȝ', 'h', '_', 'wh'},{'w', 'h', 'hƿ', '_'},{'qu', 'h', 'hƿ'}
1 : {'u', 'q', 'ƿ'},{'u', 'ƿ', 'qu'}
3 : {'n', 'w', 'nn', '_'},{'n', 'q', 'nn'},{'qu', 'n', 'nn'}
4 : {'qu', 'n', '_'},{'n', 'q', '_'},{'n', 'w', '_'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCVCVCV

faulty splits: 1
[''][''][''][''][''][''][''] <-! queþen
h | ƿ | a | n | e | n | e
h | ƿ | eo | n | e | n | e
w | h | o | n | e | n | e
h | u | a | nn | e | s | _
h | ƿ | a | n | o | n | _
h | ƿ | e | nn | e | _ | _
h | ƿ | o | nn | e | _ | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
w | _ | a | nn | e | _ | _
ȝ | w | a | nn | e | s | _
0 : {'qu', 'w', 'h'},{'w', 'q', 'h'}
1 : {'u', 'h', 'q', 'ƿ'},{'u', 'h', 'ƿ', 'qu'}
3 : {'n', 'q', 'nn'},{'qu', 'n', 'nn'}
5 : {'n', 'q', '_', 's'},{'qu', 'n', '_', 's'}
	{'CCVCVCCV', 'CCVCCVCC', 'CCVCCCVC', 'CVVCVCCV', 'CVCVCVC', 'CCCVCVCV', 'CVVCCCVC', 'CVCCVCV', 'CCVCCVC', 'CCVVCCVCV', 'CVCVCCVC', 'CVCVCCV', 'CVCVCVCV', 'CCVVCVCCV', 'CCVVCVCVC', 'CVVCCVC', 'CVCCVCC', 'CCVCVCVC', 'CCCVCCV', 'CCCVVCVCV', 'CVVCCVCV', 'CCVCCCV', 'CVVCVCVC', 'CVVCCVCC', 'CCVCVCC', 'CVCCCVC', 'CCCVCCVC', 'CCVCCVCV', 'CVVCVCC', 'CCVCVCVCV'}
