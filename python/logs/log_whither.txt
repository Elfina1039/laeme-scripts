Analysis object initialized
{'fwider': 1, 'hider': 1, 'hƿi': 2, 'hƿiðer': 1, 'hƿider': 4, 'hwider': 2, 'hƿuder': 4, 'quider': 1, 'weder': 5, 'wedir': 1, 'ƿhider': 1, 'whuder': 2, 'whudere': 1, 'ƿider': 2, 'wider': 2, 'woder': 9, 'wuder': 5, 'wydir': 1, 'wydur': 1, 'wȝide': 1, 'ȝwider': 1, 'ȝwoder': 1, 'ȝwodere': 5}
Lexel initialized
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
[[{'lit': 'hw', 'ln': 2, 'index': 0}]]
[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}]]
[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'wh', 'ln': 2, 'index': 0}]]
[[{'lit': 'ȝw', 'ln': 2, 'index': 0}]]
MIN pattern length=6
Pattern CCCCVC is invalid
Pattern CCC is invalid
Pattern CV is invalid
Pattern CVCVCV is valid
Pattern CCVCVC is valid
Pattern CCCVC is invalid
Pattern CVCVC is invalid
Pattern CCV is invalid
Pattern CC is invalid
Pattern CCVCVCV is valid
{'value': 4, 'patterns': ['CCVCVC']}
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hw', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}]]
	MIN pattern length=6
	Pattern CCCCVC is invalid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern CVCVCV is valid
	Pattern CCVCVC is valid
	Pattern CCCVC is invalid
	Pattern CVCVC is invalid
	Pattern CCV is invalid
	Pattern CC is invalid
	Pattern CCVCVCV is valid
	Making the selection for pattern: CVCVCV
	Selection for pattern: CVCVCV completed
	Making a version for pattern: CVCVCV
			___CVCVCV : 0___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> h, ȝw
					> version: h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> h, ȝw
					> version: hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> ȝw, hƿ
					> version: hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> ȝw, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', 'hƿ', 'i']
				adding dashed alternative: ['_', 'hƿ', 'i']
				h/ƿ/i(CCC)
h/ƿ/i(CCV)
hƿ/i(CC)
hƿ/i(CV)
_/h/ƿ/i(ACCA)
_/h/ƿ/i(ACCA)
_/hƿ/i(ACA)
_/hƿ/i(ACA)
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i']
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i']
				version split: ['_', 'h', 'ƿ', 'i']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'i']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, ȝw, hƿ
					> version: hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, ȝw, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				h/ƿ/i/d/e/r(CCCCVC)
h/ƿ/i/d/e/r(CCVCVC)
hƿ/i/d/e/r(CCCVC)
hƿ/i/d/e/r(CVCVC)
_/h/ƿ/i/d/e/r(ACCACVC)
_/h/ƿ/i/d/e/r(ACCACVC)
_/hƿ/i/d/e/r(ACACVC)
_/hƿ/i/d/e/r(ACACVC)
				version split: ['h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['hƿ', 'i', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i', 'd', 'e', 'r']
				version split: ['hƿ', 'i', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, ȝw
					> version: hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hw', 'i', 'd', 'e', 'r']
				h/w/i/d/e/r(CCCCVC)
h/w/i/d/e/r(CCVCVC)
hw/i/d/e/r(CCCVC)
hw/i/d/e/r(CVCVC)
_/h/w/i/d/e/r(ACCACVC)
_/h/w/i/d/e/r(ACCACVC)
_/hw/i/d/e/r(ACACVC)
_/hw/i/d/e/r(ACACVC)
				version split: ['h', 'w', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'w', 'i', 'd', 'e', 'r']
				version split: ['h', 'w', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'w', 'i', 'd', 'e', 'r']
				version split: ['hw', 'i', 'd', 'e', 'r']
				{'string': 'hw', 'rgx': '((_))$'}
				_____REMOVING________['hw', 'i', 'd', 'e', 'r']
				version split: ['hw', 'i', 'd', 'e', 'r']
				{'string': 'hw', 'rgx': '((_))$'}
				_____REMOVING________['hw', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, ȝw
					> version: hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, ȝw, hƿ
					> version: hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, ȝw, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				h/ƿ/u/d/e/r(CCCCVC)
h/ƿ/u/d/e/r(CCVCVC)
hƿ/u/d/e/r(CCCVC)
hƿ/u/d/e/r(CVCVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/hƿ/u/d/e/r(ACACVC)
_/hƿ/u/d/e/r(ACACVC)
				version split: ['h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['hƿ', 'u', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'u', 'd', 'e', 'r']
				version split: ['hƿ', 'u', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'e', 'd', 'e', 'r']
				w/e/d/e/r(CVCVC)
_/w/e/d/e/r(ACVCVC)
				version split: ['w', 'e', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'e', 'd', 'e', 'r']
				version split: ['_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					> version: w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					> version: w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, ȝw
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, ȝw
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, ȝw
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				w/h/u/d/e/r(CCCCVC)
w/h/u/d/e/r(CCVCVC)
w/hu/d/e/r(CCCVC)
wh/u/d/e/r(CCCVC)
wh/u/d/e/r(CVCVC)
wh/u/d/e/r(CCCVC)
wh/u/d/e/r(CVCVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/hu/d/e/r(ACCCVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
				version split: ['w', 'h', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'u', 'd', 'e', 'r']
				version split: ['w', 'h', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'u', 'd', 'e', 'r']
				version split: ['w', 'hu', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'hu', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, ȝw, ƿ
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, ȝw, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				ƿ/i/d/e/r(CCCVC)
ƿ/i/d/e/r(CVCVC)
_/ƿ/i/d/e/r(ACACVC)
_/ƿ/i/d/e/r(ACACVC)
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					> version: w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'i', 'd', 'e', 'r']
				w/i/d/e/r(CCCVC)
w/i/d/e/r(CVCVC)
_/w/i/d/e/r(ACACVC)
_/w/i/d/e/r(ACACVC)
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'o', 'd', 'e', 'r']
				w/o/d/e/r(CVCVC)
_/w/o/d/e/r(ACVCVC)
				version split: ['w', 'o', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'o', 'd', 'e', 'r']
				version split: ['_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					> version: w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, ȝw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'u', 'd', 'e', 'r']
				w/u/d/e/r(CCCVC)
w/u/d/e/r(CVCVC)
_/w/u/d/e/r(ACACVC)
_/w/u/d/e/r(ACACVC)
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___CVCVCV : 1___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: _/h/ƿ/i
					TRYING: h
					> version: _/h/ƿ/i
					TRYING: h
					> version: _/hƿ/i
					TRYING: hƿ
					> version: _/hƿ/i
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', 'hƿ', 'i']
				adding dashed alternative: ['_', '_', 'hƿ', 'i']
				_/h/ƿ/i(ACCA)
_/h/ƿ/i(ACCA)
_/hƿ/i(ACA)
_/hƿ/i(ACA)
_/_/h/ƿ/i(AACCA)
_/_/h/ƿ/i(AACCA)
_/_/hƿ/i(AACA)
_/_/hƿ/i(AACA)
				version split: ['_', 'h', 'ƿ', 'i']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i']
				version split: ['_', 'h', 'ƿ', 'i']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i']
				version split: ['_', 'hƿ', 'i']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i']
				version split: ['_', 'hƿ', 'i']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i']
				version split: ['_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'i']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'i']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: _/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/hƿ/i/d/e/r
					TRYING: hƿ
					> version: _/hƿ/i/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				_/h/ƿ/i/d/e/r(ACCACVC)
_/h/ƿ/i/d/e/r(ACCACVC)
_/hƿ/i/d/e/r(ACACVC)
_/hƿ/i/d/e/r(ACACVC)
_/_/h/ƿ/i/d/e/r(AACCACVC)
_/_/h/ƿ/i/d/e/r(AACCACVC)
_/_/hƿ/i/d/e/r(AACACVC)
_/_/hƿ/i/d/e/r(AACACVC)
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/h/w/i/d/e/r
					TRYING: h
					> version: _/h/w/i/d/e/r
					TRYING: h
					> version: _/hw/i/d/e/r
					TRYING: hw
					> version: _/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/h/w/i/d/e/r(ACCACVC)
_/h/w/i/d/e/r(ACCACVC)
_/hw/i/d/e/r(ACACVC)
_/hw/i/d/e/r(ACACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/hw/i/d/e/r(AACACVC)
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/hw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/hw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/h/ƿ/u/d/e/r(ACCACVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/hƿ/u/d/e/r(ACACVC)
_/hƿ/u/d/e/r(ACACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/hƿ/u/d/e/r(AACACVC)
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				_/w/e/d/e/r(ACVCVC)
_/_/w/e/d/e/r(AACVCVC)
				version split: ['_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/w/h/u/d/e/r
					TRYING: w
					> version: _/w/h/u/d/e/r
					TRYING: w
					> version: _/w/hu/d/e/r
					TRYING: w
					> version: _/wh/u/d/e/r
					TRYING: wh
					> version: _/wh/u/d/e/r
					TRYING: wh
					> version: _/wh/u/d/e/r
					TRYING: wh
					> version: _/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/w/h/u/d/e/r(ACCACVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/hu/d/e/r(ACCCVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/hu/d/e/r(AACCCVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/ƿ/i/d/e/r(ACACVC)
_/ƿ/i/d/e/r(ACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/w/i/d/e/r
					TRYING: w
					> version: _/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				_/w/i/d/e/r(ACACVC)
_/w/i/d/e/r(ACACVC)
_/_/w/i/d/e/r(AACACVC)
_/_/w/i/d/e/r(AACACVC)
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				_/w/o/d/e/r(ACVCVC)
_/_/w/o/d/e/r(AACVCVC)
				version split: ['_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/w/u/d/e/r
					TRYING: w
					> version: _/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				_/w/u/d/e/r(ACACVC)
_/w/u/d/e/r(ACACVC)
_/_/w/u/d/e/r(AACACVC)
_/_/w/u/d/e/r(AACACVC)
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVCVCV : 2___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: _/_/h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> h, d
					> version: _/_/h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> h, d
					> version: _/_/hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> d, hƿ
					> version: _/_/hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> d, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'i']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'i']
				_/_/h/ƿ/i(AACCA)
_/_/h/ƿ/i(AACCA)
_/_/hƿ/i(AACA)
_/_/hƿ/i(AACA)
_/_/_/h/ƿ/i(AAACCA)
_/_/_/h/ƿ/i(AAACCA)
_/_/_/hƿ/i(AAACA)
_/_/_/hƿ/i(AAACA)
				version split: ['_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', 'hƿ', 'i']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'i']
				version split: ['_', '_', 'hƿ', 'i']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: _/_/h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					> version: _/_/hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				_/_/h/ƿ/i/d/e/r(AACCACVC)
_/_/h/ƿ/i/d/e/r(AACCACVC)
_/_/hƿ/i/d/e/r(AACACVC)
_/_/hƿ/i/d/e/r(AACACVC)
_/_/_/h/ƿ/i/d/e/r(AAACCACVC)
_/_/_/h/ƿ/i/d/e/r(AAACCACVC)
_/_/_/hƿ/i/d/e/r(AAACACVC)
_/_/_/hƿ/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, d
					> version: _/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/h/w/i/d/e/r(AACCACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/hw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/hw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					> version: _/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/w/e/d/e/r(AACVCVC)
_/_/_/w/e/d/e/r(AAACVCVC)
				version split: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/hu/d/e/r(AACCCVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/hu/d/e/r(AAACCCVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, d, ƿ
					> version: _/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, d, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/ƿ/i/d/e/r(AACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/w/i/d/e/r(AACACVC)
_/_/w/i/d/e/r(AACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/w/o/d/e/r(AACVCVC)
_/_/_/w/o/d/e/r(AAACVCVC)
				version split: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/w/u/d/e/r(AACACVC)
_/_/w/u/d/e/r(AACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVCVCV : 3___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: _/_/_/h/ƿ/i
					TRYING: h
					> version: _/_/_/h/ƿ/i
					TRYING: h
					> version: _/_/_/hƿ/i
					TRYING: hƿ
					> version: _/_/_/hƿ/i
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'i']
				_/_/_/h/ƿ/i(AAACCA)
_/_/_/h/ƿ/i(AAACCA)
_/_/_/hƿ/i(AAACA)
_/_/_/hƿ/i(AAACA)
_/_/_/_/h/ƿ/i(AAAACCA)
_/_/_/_/h/ƿ/i(AAAACCA)
_/_/_/_/hƿ/i(AAAACA)
_/_/_/_/hƿ/i(AAAACA)
				version split: ['_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: _/_/_/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/_/_/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					> version: _/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				_/_/_/h/ƿ/i/d/e/r(AAACCACVC)
_/_/_/h/ƿ/i/d/e/r(AAACCACVC)
_/_/_/hƿ/i/d/e/r(AAACACVC)
_/_/_/hƿ/i/d/e/r(AAACACVC)
_/_/_/_/h/ƿ/i/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/i/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/i/d/e/r(AAAACACVC)
_/_/_/_/hƿ/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/hw/i/d/e/r
					TRYING: hw
					> version: _/_/_/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/w/e/d/e/r(AAACVCVC)
_/_/_/_/w/e/d/e/r(AAAACVCVC)
				version split: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/w/hu/d/e/r
					TRYING: w
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/hu/d/e/r(AAACCCVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/hu/d/e/r(AAAACCCVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/w/i/d/e/r
					TRYING: w
					> version: _/_/_/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/w/o/d/e/r(AAACVCVC)
_/_/_/_/w/o/d/e/r(AAAACVCVC)
				version split: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/w/u/d/e/r
					TRYING: w
					> version: _/_/_/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CVCVCV : 4___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: _/_/_/_/h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> r, h
					> version: _/_/_/_/h/ƿ/i
					TRYING: h
					adding blocked set: C = C >> r, h
					> version: _/_/_/_/hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> r, hƿ
					> version: _/_/_/_/hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> r, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				_/_/_/_/h/ƿ/i(AAAACCA)
_/_/_/_/h/ƿ/i(AAAACCA)
_/_/_/_/hƿ/i(AAAACA)
_/_/_/_/hƿ/i(AAAACA)
_/_/_/_/_/h/ƿ/i(AAAAACCA)
_/_/_/_/_/h/ƿ/i(AAAAACCA)
_/_/_/_/_/hƿ/i(AAAAACA)
_/_/_/_/_/hƿ/i(AAAAACA)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: _/_/_/_/h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					> version: _/_/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/h/ƿ/i/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/i/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/i/d/e/r(AAAACACVC)
_/_/_/_/hƿ/i/d/e/r(AAAACACVC)
_/_/_/_/_/h/ƿ/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> r, _, hw
					> version: _/_/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> r, _, hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					> version: _/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/_/w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/_/w/e/d/e/r(AAAACVCVC)
_/_/_/_/_/w/e/d/e/r(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/hu/d/e/r(AAAACCCVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/hu/d/e/r(AAAAACCCVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> r, _, ƿ
					> version: _/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> r, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/_/w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/_/w/o/d/e/r(AAAACVCVC)
_/_/_/_/_/w/o/d/e/r(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CVCVCV : 5___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/i
					TRYING: h
					> version: _/_/_/_/_/h/ƿ/i
					TRYING: h
					> version: _/_/_/_/_/hƿ/i
					TRYING: hƿ
					> version: _/_/_/_/_/hƿ/i
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				_/_/_/_/_/h/ƿ/i(AAAAACCA)
_/_/_/_/_/h/ƿ/i(AAAAACCA)
_/_/_/_/_/hƿ/i(AAAAACA)
_/_/_/_/_/hƿ/i(AAAAACA)
_/_/_/_/_/_/h/ƿ/i(AAAAAACCA)
_/_/_/_/_/_/h/ƿ/i(AAAAAACCA)
_/_/_/_/_/_/hƿ/i(AAAAAACA)
_/_/_/_/_/_/hƿ/i(AAAAAACA)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_/hƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_/hƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'i']
				ANALYSING: hƿider
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					> version: _/_/_/_/_/hƿ/i/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/_/h/ƿ/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/h/ƿ/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/ƿ/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hƿ/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hƿ/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'i', 'd', 'e', 'r']
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					> version: _/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hw/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hw/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/_/_/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/_/_/w/e/d/e/r(AAAAACVCVC)
_/_/_/_/_/_/w/e/d/e/r(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/w/hu/d/e/r
					TRYING: w
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/hu/d/e/r(AAAAACCCVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/hu/d/e/r(AAAAAACCCVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/hu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/_/_/w/i/d/e/r
					TRYING: w
					> version: _/_/_/_/_/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/_/_/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/_/_/w/o/d/e/r(AAAAACVCVC)
_/_/_/_/_/_/w/o/d/e/r(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/_/_/w/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ȝw', 'o', 'd', 'e', 'r', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCV is INVALID
		[{'_', 'ȝw'}]
		10
		OVERVIEW: version for pattern CVCVCV
{'_', 'ȝw'}
faulty splits: 10
[''][''][''][''][''][''] <-! hƿi
[''][''][''][''][''][''] <-! hƿider
[''][''][''][''][''][''] <-! hwider
[''][''][''][''][''][''] <-! hƿuder
[''][''][''][''][''][''] <-! weder
[''][''][''][''][''][''] <-! whuder
[''][''][''][''][''][''] <-! ƿider
[''][''][''][''][''][''] <-! wider
[''][''][''][''][''][''] <-! woder
[''][''][''][''][''][''] <-! wuder
ȝw | o | d | e | r | e
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'w', '_', 'ȝw'},{'_', 'ȝw', 'hƿ'},{'ȝw', 'hƿ'},{'h', '_', 'ȝw'},{'_', 'hw', 'ȝw'},{'_', 'wh', 'ȝw'},{'h', 'ȝw'},{'_', 'ȝw', 'ƿ'}
2 : {'h', 'd'},{'d', 'hƿ'},{'w', '_', 'd'},{'_', 'd', 'ƿ'},{'_', 'wh', 'd'},{'_', 'hw', 'd'},{'h', '_', 'd'},{'_', 'd', 'hƿ'}
4 : {'r', '_', 'ƿ'},{'r', '_', 'hƿ'},{'r', 'h'},{'r', '_', 'h'},{'r', '_', 'wh'},{'r', 'hƿ'},{'r', '_', 'hw'},{'r', '_', 'w'}
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hw', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}]]
	MIN pattern length=6
	Pattern CCCCVC is invalid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern CVCVCV is valid
	Pattern CCVCVC is valid
	Pattern CCCVC is invalid
	Pattern CVCVC is invalid
	Pattern CCV is invalid
	Pattern CC is invalid
	Pattern CCVCVCV is valid
	Making the selection for pattern: CCVCVC
	Selection for pattern: CCVCVC completed
	Making a version for pattern: CCVCVC
			___CCVCVC : 0___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: h/ƿ/i
					TRYING: h
					> version: h/ƿ/i
					TRYING: h
					> version: hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> h, w, hƿ
					> version: hƿ/i
					TRYING: hƿ
					adding blocked set: C = C >> h, w, hƿ
					RESULT:  ['h']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((h))$'}
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'i']
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((h))$'}
				_____REMOVING________['hƿ', 'i']
				ANALYSING: weder
					resolving (1)
					> version: w/e/d/e/r
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'e', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/i/d/e/r
					TRYING: w
					> version: w/i/d/e/r
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/o/d/e/r
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'o', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/d/e/r
					TRYING: w
					> version: w/u/d/e/r
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ȝwodere
					resolving (2)
					> version: ȝ/w/o/d/e/r/e
					TRYING: ȝ
					> version: ȝw/o/d/e/r/e
					TRYING: ȝw
					adding blocked set: C = C >> h, w, ȝw, ƿ
					RESULT:  ['ȝ']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ', 'rgx': '((ȝ))$'}
				version split: ['ȝw', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝw', 'rgx': '((ȝ))$'}
				_____REMOVING________['ȝw', 'o', 'd', 'e', 'r', 'e']
			___CCVCVC : 1___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i
					TRYING: ƿ
					> version: h/ƿ/i
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ', 'rgx': '((h))/((ƿ))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/e/d/e/r
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'e', 'd', 'e', 'r']
				w/e/d/e/r(CVCVC)
w/_/e/d/e/r(CAVCVC)
				version split: ['w', 'e', 'd', 'e', 'r']
				{'string': 'w/e', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'e', 'd', 'e', 'r']
				version split: ['w', '_', 'e', 'd', 'e', 'r']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/i/d/e/r
					TRYING: i
					adding blocked set: C = C >> h, _, ƿ, i, w
					> version: ƿ/i/d/e/r
					TRYING: i
					adding blocked set: C = C >> h, _, ƿ, i, w
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', '_', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['ƿ', '_', 'i', 'd', 'e', 'r']
				ƿ/i/d/e/r(CCCVC)
ƿ/i/d/e/r(CVCVC)
ƿ/_/i/d/e/r(CAACVC)
ƿ/_/i/d/e/r(CAACVC)
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_', 'rgx': '((ƿ))/((_))$'}
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_', 'rgx': '((ƿ))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/i/d/e/r
					TRYING: i
					adding blocked set: C = C >> h, _, ƿ, i, w
					> version: w/i/d/e/r
					TRYING: i
					adding blocked set: C = C >> h, _, ƿ, i, w
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['w', '_', 'i', 'd', 'e', 'r']
				w/i/d/e/r(CCCVC)
w/i/d/e/r(CVCVC)
w/_/i/d/e/r(CAACVC)
w/_/i/d/e/r(CAACVC)
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w/i', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w/i', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/o/d/e/r
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['w', '_', 'o', 'd', 'e', 'r']
				w/o/d/e/r(CVCVC)
w/_/o/d/e/r(CAVCVC)
				version split: ['w', 'o', 'd', 'e', 'r']
				{'string': 'w/o', 'rgx': '((w))/((_))$'}
				_____REMOVING________['w', 'o', 'd', 'e', 'r']
				version split: ['w', '_', 'o', 'd', 'e', 'r']
				{'string': 'w/_', 'rgx': '((w))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/d/e/r
					TRYING: u
					> version: w/u/d/e/r
					TRYING: u
					RESULT:  ['u']
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w/u', 'rgx': '((w))/((u))$'}
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w/u', 'rgx': '((w))/((u))$'}
				ANALYSING: ȝwodere
					resolving (1)
					> version: ȝ/w/o/d/e/r/e
					TRYING: w
					RESULT:  ['w']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ/w', 'rgx': '((ȝ))/((w))$'}
			___CCVCVC : 2___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i
					TRYING: i
					> version: h/ƿ/i
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h))/((ƿ))/((i))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h))/((ƿ))/((i))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/_/e/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'e', 'd', 'e', 'r']
				{'string': 'w/_/e', 'rgx': '((w))/((_))/((e))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/_/i/d/e/r
					TRYING: i
					> version: ƿ/_/i/d/e/r
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i', 'rgx': '((ƿ))/((_))/((i))$'}
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i', 'rgx': '((ƿ))/((_))/((i))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/_/i/d/e/r
					TRYING: i
					> version: w/_/i/d/e/r
					TRYING: i
					RESULT:  ['i']
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i', 'rgx': '((w))/((_))/((i))$'}
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i', 'rgx': '((w))/((_))/((i))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/_/o/d/e/r
					TRYING: o
					RESULT:  ['o']
				version split: ['w', '_', 'o', 'd', 'e', 'r']
				{'string': 'w/_/o', 'rgx': '((w))/((_))/((o))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/d/e/r
					TRYING: d
					> version: w/u/d/e/r
					TRYING: d
					RESULT:  ['_']
				adding dashed alternative: ['w', 'u', '_', 'd', 'e', 'r']
				adding dashed alternative: ['w', 'u', '_', 'd', 'e', 'r']
				w/u/d/e/r(CCCVC)
w/u/d/e/r(CVCVC)
w/u/_/d/e/r(CAACVC)
w/u/_/d/e/r(CAACVC)
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w/u/d', 'rgx': '((w))/((u))/((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w/u/d', 'rgx': '((w))/((u))/((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_', 'rgx': '((w))/((u))/((_))$'}
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_', 'rgx': '((w))/((u))/((_))$'}
				ANALYSING: ȝwodere
					resolving (1)
					> version: ȝ/w/o/d/e/r/e
					TRYING: o
					RESULT:  ['o']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ/w/o', 'rgx': '((ȝ))/((w))/((o))$'}
			___CCVCVC : 3___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i
					> version: h/ƿ/i
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_']
				h/ƿ/i(CCC)
h/ƿ/i(CCV)
h/ƿ/i/_(CCAA)
h/ƿ/i/_(CCAA)
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h))/((ƿ))/((i))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h))/((ƿ))/((i))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/_/e/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['w', '_', 'e', 'd', 'e', 'r']
				{'string': 'w/_/e/d', 'rgx': '((w))/((_))/((e))/((d))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/_/i/d/e/r
					TRYING: d
					> version: ƿ/_/i/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d', 'rgx': '((ƿ))/((_))/((i))/((d))$'}
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d', 'rgx': '((ƿ))/((_))/((i))/((d))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/_/i/d/e/r
					TRYING: d
					> version: w/_/i/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d', 'rgx': '((w))/((_))/((i))/((d))$'}
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d', 'rgx': '((w))/((_))/((i))/((d))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/_/o/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['w', '_', 'o', 'd', 'e', 'r']
				{'string': 'w/_/o/d', 'rgx': '((w))/((_))/((o))/((d))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/_/d/e/r
					TRYING: d
					> version: w/u/_/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d', 'rgx': '((w))/((u))/((_))/((d))$'}
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d', 'rgx': '((w))/((u))/((_))/((d))$'}
				ANALYSING: ȝwodere
					resolving (1)
					> version: ȝ/w/o/d/e/r/e
					TRYING: d
					RESULT:  ['d']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ/w/o/d', 'rgx': '((ȝ))/((w))/((o))/((d))$'}
			___CCVCVC : 4___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i/_
					> version: h/ƿ/i/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_']
				h/ƿ/i/_(CCAA)
h/ƿ/i/_(CCAA)
h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_(CCAAA)
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_']
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_']
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/_/e/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'e', 'd', 'e', 'r']
				{'string': 'w/_/e/d/e', 'rgx': '((w))/((_))/((e))/((d))/((e))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/_/i/d/e/r
					TRYING: e
					> version: ƿ/_/i/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d/e', 'rgx': '((ƿ))/((_))/((i))/((d))/((e))$'}
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d/e', 'rgx': '((ƿ))/((_))/((i))/((d))/((e))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/_/i/d/e/r
					TRYING: e
					> version: w/_/i/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d/e', 'rgx': '((w))/((_))/((i))/((d))/((e))$'}
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d/e', 'rgx': '((w))/((_))/((i))/((d))/((e))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/_/o/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['w', '_', 'o', 'd', 'e', 'r']
				{'string': 'w/_/o/d/e', 'rgx': '((w))/((_))/((o))/((d))/((e))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/_/d/e/r
					TRYING: e
					> version: w/u/_/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d/e', 'rgx': '((w))/((u))/((_))/((d))/((e))$'}
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d/e', 'rgx': '((w))/((u))/((_))/((d))/((e))$'}
				ANALYSING: ȝwodere
					resolving (1)
					> version: ȝ/w/o/d/e/r/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ/w/o/d/e', 'rgx': '((ȝ))/((w))/((o))/((d))/((e))$'}
			___CCVCVC : 5___
				ANALYSING: hƿider
				adding littera based on matching pattern
				ANALYSING: hwider
				adding littera based on matching pattern
				ANALYSING: hƿuder
				adding littera based on matching pattern
				ANALYSING: whuder
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i/_/_
					> version: h/ƿ/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_']
				h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_/_(CCAAAA)
h/ƿ/i/_/_/_(CCAAAA)
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h))/((ƿ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/_/e/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['w', '_', 'e', 'd', 'e', 'r']
				{'string': 'w/_/e/d/e/r', 'rgx': '((w))/((_))/((e))/((d))/((e))/((r))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/_/i/d/e/r
					TRYING: r
					> version: ƿ/_/i/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d/e/r', 'rgx': '((ƿ))/((_))/((i))/((d))/((e))/((r))$'}
				version split: ['ƿ', '_', 'i', 'd', 'e', 'r']
				{'string': 'ƿ/_/i/d/e/r', 'rgx': '((ƿ))/((_))/((i))/((d))/((e))/((r))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/_/i/d/e/r
					TRYING: r
					> version: w/_/i/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d/e/r', 'rgx': '((w))/((_))/((i))/((d))/((e))/((r))$'}
				version split: ['w', '_', 'i', 'd', 'e', 'r']
				{'string': 'w/_/i/d/e/r', 'rgx': '((w))/((_))/((i))/((d))/((e))/((r))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/_/o/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['w', '_', 'o', 'd', 'e', 'r']
				{'string': 'w/_/o/d/e/r', 'rgx': '((w))/((_))/((o))/((d))/((e))/((r))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/_/d/e/r
					TRYING: r
					> version: w/u/_/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d/e/r', 'rgx': '((w))/((u))/((_))/((d))/((e))/((r))$'}
				version split: ['w', 'u', '_', 'd', 'e', 'r']
				{'string': 'w/u/_/d/e/r', 'rgx': '((w))/((u))/((_))/((d))/((e))/((r))$'}
				ANALYSING: ȝwodere
					resolving (1)
					> version: ȝ/w/o/d/e/r/e
					TRYING: r
					RESULT:  ['r']
				version split: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
				{'string': 'ȝ/w/o/d/e/r/e', 'rgx': '((ȝ))/((w))/((o))/((d))/((e))/((r))$'}
				_____REMOVING________['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['h', 'ƿ', 'i', '_', '_', '_']
		only one version left: ['w', '_', 'e', 'd', 'e', 'r']
		only one version left: ['ƿ', '_', 'i', 'd', 'e', 'r']
		only one version left: ['w', '_', 'i', 'd', 'e', 'r']
		only one version left: ['w', '_', 'o', 'd', 'e', 'r']
		only one version left: ['w', 'u', '_', 'd', 'e', 'r']
		FAIL: 
		SPLIT: ['h', 'ƿ', 'i', 'd', 'e', 'r']
		SPLIT: ['h', 'w', 'i', 'd', 'e', 'r']
		SPLIT: ['h', 'ƿ', 'u', 'd', 'e', 'r']
		SPLIT: ['w', 'h', 'u', 'd', 'e', 'r']
		SPLIT: ['h', 'ƿ', 'i', '_', '_', '_']
		['h', 'ƿ', 'i', '_', '_', '_']
		['h', 'ƿ', 'i', '_', '_', '_']
		SPLIT: ['w', '_', 'e', 'd', 'e', 'r']
		['w', '_', 'e', 'd', 'e', 'r']
		SPLIT: ['ƿ', '_', 'i', 'd', 'e', 'r']
		['ƿ', '_', 'i', 'd', 'e', 'r']
		['ƿ', '_', 'i', 'd', 'e', 'r']
		SPLIT: ['w', '_', 'i', 'd', 'e', 'r']
		['w', '_', 'i', 'd', 'e', 'r']
		['w', '_', 'i', 'd', 'e', 'r']
		SPLIT: ['w', '_', 'o', 'd', 'e', 'r']
		['w', '_', 'o', 'd', 'e', 'r']
		SPLIT: ['w', 'u', '_', 'd', 'e', 'r']
		['w', 'u', '_', 'd', 'e', 'r']
		['w', 'u', '_', 'd', 'e', 'r']
		SPLIT: ["['ȝ']", "['w']", "['o']", "['d']", "['e']", "['r']"]
		version for pattern CCVCVC is INVALID
		[]
		1
		OVERVIEW: version for pattern CCVCVC

faulty splits: 1
['ȝ']['w']['o']['d']['e']['r'] <-! ȝwodere
h | ƿ | i | d | e | r
h | w | i | d | e | r
h | ƿ | u | d | e | r
w | h | u | d | e | r
h | ƿ | i | _ | _ | _
w | _ | e | d | e | r
ƿ | _ | i | d | e | r
w | _ | i | d | e | r
w | _ | o | d | e | r
w | u | _ | d | e | r
['ȝ'] | ['w'] | ['o'] | ['d'] | ['e'] | ['r']
1 : {'h', '_', 'ƿ', 'i', 'w'}
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hw', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hƿ', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'wh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'wh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ȝw', 'ln': 2, 'index': 0}]]
	MIN pattern length=6
	Pattern CCCCVC is invalid
	Pattern CCC is invalid
	Pattern CV is invalid
	Pattern CVCVCV is valid
	Pattern CCVCVC is valid
	Pattern CCCVC is invalid
	Pattern CVCVC is invalid
	Pattern CCV is invalid
	Pattern CC is invalid
	Pattern CCVCVCV is valid
	Making the selection for pattern: CCVCVCV
	Selection for pattern: CCVCVCV completed
	Making a version for pattern: CCVCVCV
			___CCVCVCV : 0___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: h/ƿ/i
					TRYING: h
					> version: h/ƿ/i
					TRYING: h
					> version: hƿ/i
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: hƿ/i
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				version split: ['hƿ', 'i']
				{'string': 'hƿ', 'rgx': '((h)|(hƿ))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, h, hƿ
					> version: h/ƿ/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, h, hƿ
					> version: hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> ȝ, h, hƿ
					> version: hƿ/i/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> ȝ, h, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				h/ƿ/i/d/e/r(CCCCVC)
h/ƿ/i/d/e/r(CCVCVC)
hƿ/i/d/e/r(CCCVC)
hƿ/i/d/e/r(CVCVC)
_/h/ƿ/i/d/e/r(ACCACVC)
_/h/ƿ/i/d/e/r(ACCACVC)
_/hƿ/i/d/e/r(ACACVC)
_/hƿ/i/d/e/r(ACACVC)
				version split: ['h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['hƿ', 'i', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i', 'd', 'e', 'r']
				version split: ['hƿ', 'i', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, _, h, hƿ
					> version: h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, _, h, hƿ
					> version: hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> ȝ, h, hƿ, _, hw
					> version: hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> ȝ, h, hƿ, _, hw
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hw', 'i', 'd', 'e', 'r']
				h/w/i/d/e/r(CCCCVC)
h/w/i/d/e/r(CCVCVC)
hw/i/d/e/r(CCCVC)
hw/i/d/e/r(CVCVC)
_/h/w/i/d/e/r(ACCACVC)
_/h/w/i/d/e/r(ACCACVC)
_/hw/i/d/e/r(ACACVC)
_/hw/i/d/e/r(ACACVC)
				version split: ['h', 'w', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'w', 'i', 'd', 'e', 'r']
				version split: ['h', 'w', 'i', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'w', 'i', 'd', 'e', 'r']
				version split: ['hw', 'i', 'd', 'e', 'r']
				{'string': 'hw', 'rgx': '((_))$'}
				_____REMOVING________['hw', 'i', 'd', 'e', 'r']
				version split: ['hw', 'i', 'd', 'e', 'r']
				{'string': 'hw', 'rgx': '((_))$'}
				_____REMOVING________['hw', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, _, h, hƿ
					> version: h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> ȝ, _, h, hƿ
					> version: hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> ȝ, _, h, hƿ
					> version: hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> ȝ, _, h, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				h/ƿ/u/d/e/r(CCCCVC)
h/ƿ/u/d/e/r(CCVCVC)
hƿ/u/d/e/r(CCCVC)
hƿ/u/d/e/r(CVCVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/hƿ/u/d/e/r(ACACVC)
_/hƿ/u/d/e/r(ACACVC)
				version split: ['h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': 'h', 'rgx': '((_))$'}
				_____REMOVING________['h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['hƿ', 'u', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'u', 'd', 'e', 'r']
				version split: ['hƿ', 'u', 'd', 'e', 'r']
				{'string': 'hƿ', 'rgx': '((_))$'}
				_____REMOVING________['hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'e', 'd', 'e', 'r']
				w/e/d/e/r(CVCVC)
_/w/e/d/e/r(ACVCVC)
				version split: ['w', 'e', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'e', 'd', 'e', 'r']
				version split: ['_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					> version: w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					> version: w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> ȝ, h, hƿ, _, wh
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> ȝ, h, hƿ, _, wh
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> ȝ, h, hƿ, _, wh
					> version: wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> ȝ, h, hƿ, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'wh', 'u', 'd', 'e', 'r']
				w/h/u/d/e/r(CCCCVC)
w/h/u/d/e/r(CCVCVC)
w/hu/d/e/r(CCCVC)
wh/u/d/e/r(CCCVC)
wh/u/d/e/r(CVCVC)
wh/u/d/e/r(CCCVC)
wh/u/d/e/r(CVCVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/hu/d/e/r(ACCCVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
				version split: ['w', 'h', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'u', 'd', 'e', 'r']
				version split: ['w', 'h', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'h', 'u', 'd', 'e', 'r']
				version split: ['w', 'hu', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'hu', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['wh', 'u', 'd', 'e', 'r']
				{'string': 'wh', 'rgx': '((_))$'}
				_____REMOVING________['wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, h, hƿ, _, ƿ
					> version: ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> ȝ, h, hƿ, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				ƿ/i/d/e/r(CCCVC)
ƿ/i/d/e/r(CVCVC)
_/ƿ/i/d/e/r(ACACVC)
_/ƿ/i/d/e/r(ACACVC)
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['ƿ', 'i', 'd', 'e', 'r']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					> version: w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'i', 'd', 'e', 'r']
				w/i/d/e/r(CCCVC)
w/i/d/e/r(CVCVC)
_/w/i/d/e/r(ACACVC)
_/w/i/d/e/r(ACACVC)
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['w', 'i', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'd', 'e', 'r']
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'o', 'd', 'e', 'r']
				w/o/d/e/r(CVCVC)
_/w/o/d/e/r(ACVCVC)
				version split: ['w', 'o', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'o', 'd', 'e', 'r']
				version split: ['_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					> version: w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> ȝ, h, hƿ, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', 'w', 'u', 'd', 'e', 'r']
				w/u/d/e/r(CCCVC)
w/u/d/e/r(CVCVC)
_/w/u/d/e/r(ACACVC)
_/w/u/d/e/r(ACACVC)
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['w', 'u', 'd', 'e', 'r']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_', 'rgx': '((_))$'}
			___CCVCVCV : 1___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (4)
					> version: h/ƿ/i
					TRYING: ƿ
					> version: h/ƿ/i
					TRYING: ƿ
					> version: hƿ/i
					TRYING: i
					adding blocked set: C = C >> w, i
					> version: hƿ/i
					TRYING: i
					adding blocked set: C = C >> w, i
					RESULT:  ['ƿ']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				version split: ['hƿ', 'i']
				{'string': 'hƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'i']
				version split: ['hƿ', 'i']
				{'string': 'hƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))$'}
				_____REMOVING________['hƿ', 'i']
				ANALYSING: hƿider
					resolving (4)
					> version: _/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/h/ƿ/i/d/e/r
					TRYING: h
					> version: _/hƿ/i/d/e/r
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					> version: _/hƿ/i/d/e/r
					TRYING: hƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hƿ'}
					RESULT:  ['h', 'hƿ']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((h)|(hƿ))$'}
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((h)|(hƿ))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((h)|(hƿ))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((h)|(hƿ))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, w, hƿ, ƿ
					> version: _/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, w, hƿ, ƿ
					> version: _/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> h, hƿ, ƿ, w, hw
					> version: _/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> h, hƿ, ƿ, w, hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/h/w/i/d/e/r(ACCACVC)
_/h/w/i/d/e/r(ACCACVC)
_/hw/i/d/e/r(ACACVC)
_/hw/i/d/e/r(ACACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/hw/i/d/e/r(AACACVC)
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/hw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/hw', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/h/ƿ/u/d/e/r(ACCACVC)
_/h/ƿ/u/d/e/r(ACCACVC)
_/hƿ/u/d/e/r(ACACVC)
_/hƿ/u/d/e/r(ACACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/hƿ/u/d/e/r(AACACVC)
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/h', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/hƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				_/w/e/d/e/r(ACVCVC)
_/_/w/e/d/e/r(AACVCVC)
				version split: ['_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> h, hƿ, _, wh, ƿ, w
					> version: _/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> h, hƿ, _, wh, ƿ, w
					> version: _/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> h, hƿ, _, wh, ƿ, w
					> version: _/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> h, hƿ, _, wh, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/w/h/u/d/e/r(ACCACVC)
_/w/h/u/d/e/r(ACCACVC)
_/w/hu/d/e/r(ACCCVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/wh/u/d/e/r(ACACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/hu/d/e/r(AACCCVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/wh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/ƿ/i/d/e/r(ACACVC)
_/ƿ/i/d/e/r(ACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				_/w/i/d/e/r(ACACVC)
_/w/i/d/e/r(ACACVC)
_/_/w/i/d/e/r(AACACVC)
_/_/w/i/d/e/r(AACACVC)
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				_/w/o/d/e/r(ACVCVC)
_/_/w/o/d/e/r(AACVCVC)
				version split: ['_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					> version: _/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> h, hƿ, _, ƿ, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				_/w/u/d/e/r(ACACVC)
_/w/u/d/e/r(ACACVC)
_/_/w/u/d/e/r(AACACVC)
_/_/w/u/d/e/r(AACACVC)
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCVCVCV : 2___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i
					TRYING: i
					> version: h/ƿ/i
					TRYING: i
					RESULT:  ['i']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))/((i))$'}
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))/((i))$'}
				ANALYSING: hƿider
					resolving (4)
					> version: _/h/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/h/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/hƿ/i/d/e/r
					TRYING: i
					> version: _/hƿ/i/d/e/r
					TRYING: i
					RESULT:  ['i']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h)|(hƿ))/((i))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/h/ƿ', 'rgx': '((_))/((h)|(hƿ))/((i))$'}
				_____REMOVING________['_', 'h', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i', 'rgx': '((_))/((h)|(hƿ))/((i))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i', 'rgx': '((_))/((h)|(hƿ))/((i))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/hw/i/d/e/r
					TRYING: hw
					> version: _/_/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/h/w/i/d/e/r(AACCACVC)
_/_/h/w/i/d/e/r(AACCACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/hw/i/d/e/r(AACACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/hw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/hw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/_/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/h/ƿ/u/d/e/r(AACCACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/hƿ/u/d/e/r(AACACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/hƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/w/e/d/e/r(AACVCVC)
_/_/_/w/e/d/e/r(AAACVCVC)
				version split: ['_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/w/hu/d/e/r
					TRYING: w
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/h/u/d/e/r(AACCACVC)
_/_/w/hu/d/e/r(AACCCVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/wh/u/d/e/r(AACACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/hu/d/e/r(AAACCCVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/wh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/_/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/ƿ/i/d/e/r(AACACVC)
_/_/ƿ/i/d/e/r(AACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/w/i/d/e/r
					TRYING: w
					> version: _/_/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/w/i/d/e/r(AACACVC)
_/_/w/i/d/e/r(AACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/w/o/d/e/r(AACVCVC)
_/_/_/w/o/d/e/r(AAACVCVC)
				version split: ['_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/w/u/d/e/r
					TRYING: w
					> version: _/_/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/w/u/d/e/r(AACACVC)
_/_/w/u/d/e/r(AACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CCVCVCV : 3___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i
					> version: h/ƿ/i
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_']
				h/ƿ/i(CCC)
h/ƿ/i(CCV)
h/ƿ/i/_(CCAA)
h/ƿ/i/_(CCAA)
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['h', 'ƿ', 'i']
				{'string': 'h/ƿ/i', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i']
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))$'}
				ANALYSING: hƿider
					resolving (2)
					> version: _/hƿ/i/d/e/r
					TRYING: d
					> version: _/hƿ/i/d/e/r
					TRYING: d
					RESULT:  ['d']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, d
					> version: _/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> _, hw, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/h/w/i/d/e/r(AAACCACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/hw/i/d/e/r(AAACACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> h, _, d
					> version: _/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					> version: _/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> _, d, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/h/ƿ/u/d/e/r(AAACCACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/hƿ/u/d/e/r(AAACACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/w/e/d/e/r(AAACVCVC)
_/_/_/_/w/e/d/e/r(AAAACVCVC)
				version split: ['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/_/w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					> version: _/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> _, wh, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/h/u/d/e/r(AAACCACVC)
_/_/_/w/hu/d/e/r(AAACCCVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/wh/u/d/e/r(AAACACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/hu/d/e/r(AAAACCCVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, d, ƿ
					> version: _/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> _, d, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/ƿ/i/d/e/r(AAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/w/i/d/e/r(AAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/w/o/d/e/r(AAACVCVC)
_/_/_/_/w/o/d/e/r(AAAACVCVC)
				version split: ['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					> version: _/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> w, _, d
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/w/u/d/e/r(AAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___CCVCVCV : 4___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i/_
					> version: h/ƿ/i/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_']
				h/ƿ/i/_(CCAA)
h/ƿ/i/_(CCAA)
h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_(CCAAA)
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_']
				version split: ['h', 'ƿ', 'i', '_']
				{'string': 'h/ƿ/i/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_']
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (2)
					> version: _/hƿ/i/d/e/r
					TRYING: e
					> version: _/hƿ/i/d/e/r
					TRYING: e
					RESULT:  ['e']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/hw/i/d/e/r
					TRYING: hw
					> version: _/_/_/_/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/h/w/i/d/e/r(AAAACCACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/hw/i/d/e/r(AAAACACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/h/ƿ/u/d/e/r(AAAACCACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/hƿ/u/d/e/r(AAAACACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/_/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/_/w/e/d/e/r(AAAACVCVC)
_/_/_/_/_/w/e/d/e/r(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/w/hu/d/e/r
					TRYING: w
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/h/u/d/e/r(AAAACCACVC)
_/_/_/_/w/hu/d/e/r(AAAACCCVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/wh/u/d/e/r(AAAACACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/hu/d/e/r(AAAAACCCVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/ƿ/i/d/e/r(AAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/_/w/i/d/e/r
					TRYING: w
					> version: _/_/_/_/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/w/i/d/e/r(AAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/_/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/_/w/o/d/e/r(AAAACVCVC)
_/_/_/_/_/w/o/d/e/r(AAAAACVCVC)
				version split: ['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/_/w/u/d/e/r
					TRYING: w
					> version: _/_/_/_/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/w/u/d/e/r(AAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
			___CCVCVCV : 5___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i/_/_
					> version: h/ƿ/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_']
				h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_(CCAAA)
h/ƿ/i/_/_/_(CCAAAA)
h/ƿ/i/_/_/_(CCAAAA)
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_']
				{'string': 'h/ƿ/i/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (2)
					> version: _/hƿ/i/d/e/r
					TRYING: r
					> version: _/hƿ/i/d/e/r
					TRYING: r
					RESULT:  ['r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e/r', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e/r', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> r, _, hw
					> version: _/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					adding blocked set: C = C >> r, _, hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/w/i/d/e/r(AAAAACCACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/hw/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					adding blocked set: C = C >> r, _, h
					> version: _/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					> version: _/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					adding blocked set: C = C >> r, _, hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/h/ƿ/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/hƿ/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/_/_/w/e/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/_/_/w/e/d/e/r(AAAAACVCVC)
_/_/_/_/_/_/w/e/d/e/r(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/_/w/hu/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					> version: _/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					adding blocked set: C = C >> r, _, wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/h/u/d/e/r(AAAAACCACVC)
_/_/_/_/_/w/hu/d/e/r(AAAAACCCVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/wh/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/hu/d/e/r(AAAAAACCCVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> r, _, ƿ
					> version: _/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					adding blocked set: C = C >> r, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/ƿ/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/_/w/i/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/w/i/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/_/_/w/o/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/_/_/w/o/d/e/r(AAAAACVCVC)
_/_/_/_/_/_/w/o/d/e/r(AAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					> version: _/_/_/_/_/w/u/d/e/r
					TRYING: w
					adding blocked set: C = C >> r, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/w/u/d/e/r(AAAAACACVC)
_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))$'}
			___CCVCVCV : 6___
				ANALYSING: ȝwodere
				adding littera based on matching pattern
				ANALYSING: hƿi
					resolving (2)
					> version: h/ƿ/i/_/_/_
					> version: h/ƿ/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['h', 'ƿ', 'i', '_', '_', '_', '_']
				h/ƿ/i/_/_/_(CCAAAA)
h/ƿ/i/_/_/_(CCAAAA)
h/ƿ/i/_/_/_/_(CCAAAAA)
h/ƿ/i/_/_/_/_(CCAAAAA)
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['h', 'ƿ', 'i', '_', '_', '_']
				version split: ['h', 'ƿ', 'i', '_', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['h', 'ƿ', 'i', '_', '_', '_', '_']
				{'string': 'h/ƿ/i/_/_/_/_', 'rgx': '((h)|(hƿ))/((ƿ))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: hƿider
					resolving (2)
					> version: _/hƿ/i/d/e/r
					> version: _/hƿ/i/d/e/r
					RESULT:  ['_']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
				adding dashed alternative: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
				_/hƿ/i/d/e/r(ACACVC)
_/hƿ/i/d/e/r(ACACVC)
_/hƿ/i/d/e/r/_(ACACVCA)
_/hƿ/i/d/e/r/_(ACACVCA)
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e/r', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r']
				{'string': '_/hƿ/i/d/e/r', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))/((_))$'}
				_____REMOVING________['_', 'hƿ', 'i', 'd', 'e', 'r']
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
				{'string': '_/hƿ/i/d/e/r/_', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))/((_))$'}
				version split: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
				{'string': '_/hƿ/i/d/e/r/_', 'rgx': '((_))/((h)|(hƿ))/((i))/((d))/((e))/((r))/((_))$'}
				ANALYSING: hwider
					resolving (4)
					> version: _/_/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/_/h/w/i/d/e/r
					TRYING: h
					> version: _/_/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					> version: _/_/_/_/_/_/hw/i/d/e/r
					TRYING: hw
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/w/i/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hw/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/h/w/i/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/h/w/i/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/hw/i/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/hw/i/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hw/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hw/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/hw', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hw', 'i', 'd', 'e', 'r']
				ANALYSING: hƿuder
					resolving (4)
					> version: _/_/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/_/_/h/ƿ/u/d/e/r
					TRYING: h
					> version: _/_/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					> version: _/_/_/_/_/_/hƿ/u/d/e/r
					TRYING: hƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/h/ƿ/u/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/hƿ/u/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/h/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/hƿ/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'h', 'ƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/hƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'hƿ', 'u', 'd', 'e', 'r']
				ANALYSING: weder
					resolving (1)
					> version: _/_/_/_/_/_/w/e/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				_/_/_/_/_/_/w/e/d/e/r(AAAAAACVCVC)
_/_/_/_/_/_/_/w/e/d/e/r(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/e', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'e', 'd', 'e', 'r']
				ANALYSING: whuder
					resolving (7)
					> version: _/_/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/_/w/h/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/_/w/hu/d/e/r
					TRYING: w
					> version: _/_/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					> version: _/_/_/_/_/_/wh/u/d/e/r
					TRYING: wh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/h/u/d/e/r(AAAAAACCACVC)
_/_/_/_/_/_/w/hu/d/e/r(AAAAAACCCVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/wh/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/w/h/u/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/w/h/u/d/e/r(AAAAAAACCACVC)
_/_/_/_/_/_/_/w/hu/d/e/r(AAAAAAACCCVC)
_/_/_/_/_/_/_/wh/u/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/wh/u/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/wh/u/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/wh/u/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/h', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/hu', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/wh/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'h', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'hu', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/wh', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'wh', 'u', 'd', 'e', 'r']
				ANALYSING: ƿider
					resolving (2)
					> version: _/_/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					> version: _/_/_/_/_/_/ƿ/i/d/e/r
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/ƿ/i/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'ƿ', 'i', 'd', 'e', 'r']
				ANALYSING: wider
					resolving (2)
					> version: _/_/_/_/_/_/w/i/d/e/r
					TRYING: w
					> version: _/_/_/_/_/_/w/i/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/i/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/w/i/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/w/i/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'i', 'd', 'e', 'r']
				ANALYSING: woder
					resolving (1)
					> version: _/_/_/_/_/_/w/o/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				_/_/_/_/_/_/w/o/d/e/r(AAAAAACVCVC)
_/_/_/_/_/_/_/w/o/d/e/r(AAAAAAACVCVC)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/o', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'o', 'd', 'e', 'r']
				ANALYSING: wuder
					resolving (2)
					> version: _/_/_/_/_/_/w/u/d/e/r
					TRYING: w
					> version: _/_/_/_/_/_/w/u/d/e/r
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				adding dashed alternative: ['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/w/u/d/e/r(AAAAAACACVC)
_/_/_/_/_/_/_/w/u/d/e/r(AAAAAAACACVC)
_/_/_/_/_/_/_/w/u/d/e/r(AAAAAAACACVC)
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/w/u', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				version split: ['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
				{'string': '_/_/_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', '_', '_', 'w', 'u', 'd', 'e', 'r']
		FAIL: 
		only one version left: ['h', 'ƿ', 'i', '_', '_', '_', '_']
		only one version left: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ȝ', 'w', 'o', 'd', 'e', 'r', 'e']
		SPLIT: ['h', 'ƿ', 'i', '_', '_', '_', '_']
		['h', 'ƿ', 'i', '_', '_', '_', '_']
		['h', 'ƿ', 'i', '_', '_', '_', '_']
		SPLIT: ['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
		['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
		['_', 'hƿ', 'i', 'd', 'e', 'r', '_']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CCVCVCV is INVALID
		[{'ȝ', '_', 'h', 'hƿ'}, {'h', 'hƿ', '_', 'ƿ', 'w'}]
		8
		OVERVIEW: version for pattern CCVCVCV
{'ȝ', '_', 'h', 'hƿ'}, {'h', 'hƿ', '_', 'ƿ', 'w'}
faulty splits: 8
[''][''][''][''][''][''][''] <-! hwider
[''][''][''][''][''][''][''] <-! hƿuder
[''][''][''][''][''][''][''] <-! weder
[''][''][''][''][''][''][''] <-! whuder
[''][''][''][''][''][''][''] <-! ƿider
[''][''][''][''][''][''][''] <-! wider
[''][''][''][''][''][''][''] <-! woder
[''][''][''][''][''][''][''] <-! wuder
ȝ | w | o | d | e | r | e
h | ƿ | i | _ | _ | _ | _
_ | hƿ | i | d | e | r | _
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_'] | ['_']
0 : {'ȝ', 'h', 'hƿ', '_', 'hw'},{'ȝ', '_', 'h', 'hƿ'},{'ȝ', 'h', 'hƿ'},{'ȝ', 'h', 'hƿ', '_', 'wh'},{'ȝ', 'h', 'hƿ', '_', 'w'},{'ȝ', 'h', 'hƿ', '_', 'ƿ'}
1 : {'h', 'hƿ', '_', 'wh', 'ƿ', 'w'},{'h', 'hƿ', 'ƿ', 'w', 'hw'},{'h', 'w', 'hƿ', 'ƿ'},{'h', 'hƿ', '_', 'ƿ', 'w'}
3 : {'w', '_', 'd'},{'_', 'd', 'ƿ'},{'_', 'wh', 'd'},{'_', 'hw', 'd'},{'h', '_', 'd'},{'_', 'd', 'hƿ'}
5 : {'r', '_', 'ƿ'},{'r', '_', 'hƿ'},{'r', '_', 'h'},{'r', '_', 'wh'},{'r', '_', 'hw'},{'r', '_', 'w'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCVCVC

faulty splits: 1
['ȝ']['w']['o']['d']['e']['r'] <-! ȝwodere
h | ƿ | i | d | e | r
h | w | i | d | e | r
h | ƿ | u | d | e | r
w | h | u | d | e | r
h | ƿ | i | _ | _ | _
w | _ | e | d | e | r
ƿ | _ | i | d | e | r
w | _ | i | d | e | r
w | _ | o | d | e | r
w | u | _ | d | e | r
['ȝ'] | ['w'] | ['o'] | ['d'] | ['e'] | ['r']
1 : {'h', '_', 'ƿ', 'i', 'w'}
	{'CVCCVCV', 'CVCVCCV', 'CVCVCVC', 'CCVCCVC', 'CCVCCVCV', 'CCVCVCVC', 'CCVCVCCV'}
