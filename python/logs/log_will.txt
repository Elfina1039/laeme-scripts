Analysis object initialized
{'vil': 1, 'vill': 1, 'ville': 7, 'vuille': 1, 'ƿel': 1, 'ƿelle': 1, 'welle': 1, 'ƿil': 154, 'wil': 66, 'ƿile': 2, 'wile': 2, 'ƿill': 33, 'will': 27, 'ƿilla': 2, 'willa': 2, 'ƿillæn': 1, 'ƿillan': 4, 'ƿille': 183, 'wille': 220, 'ƿillen': 2, 'willen': 4, 'ƿilles': 2, 'willes': 1, 'wils': 1, 'ƿíl': 1, 'ƿíll': 1, 'wulle': 1, 'wyl': 21, 'wyll': 2, 'wylle': 19}
Lexel initialized
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
[[{'lit': 'll', 'ln': 2, 'index': 2}]]
MIN pattern length=5
Pattern VVCV is invalid
Pattern CVCVC is valid
Pattern CCCCV is invalid
Pattern CVC is invalid
Pattern CCCVC is valid
Pattern CVCCV is valid
Pattern CCCCVC is invalid
Pattern CCCV is invalid
Pattern CVCCVC is valid
Pattern CCC is invalid
Pattern VVCCV is valid
Pattern CCCC is invalid
Pattern CVCV is invalid
Pattern CVCC is invalid
{'value': 5, 'patterns': ['CVCCV']}
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern VVCV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCCVC is valid
	Pattern CVCCV is valid
	Pattern CCCCVC is invalid
	Pattern CCCV is invalid
	Pattern CVCCVC is valid
	Pattern CCC is invalid
	Pattern VVCCV is valid
	Pattern CCCC is invalid
	Pattern CVCV is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: ƿ
					> version: ƿ/i/l
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: w
					> version: w/i/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: ƿ
					> version: ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: w
					> version: w/i/l/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: w
					> version: w/i/l/l
					TRYING: w
					> version: w/i/ll
					TRYING: w
					> version: w/i/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: w
					> version: w/y/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: w
					> version: w/y/l/l
					TRYING: w
					> version: w/y/ll
					TRYING: w
					> version: w/y/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
			___CVCVC : 1___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: i
					> version: ƿ/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: i
					> version: w/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: i
					> version: ƿ/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: i
					> version: w/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: i
					> version: w/i/l/l
					TRYING: i
					> version: w/i/ll
					TRYING: i
					> version: w/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: y
					> version: w/y/l
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: y
					> version: w/y/l/l
					TRYING: y
					> version: w/y/ll
					TRYING: y
					> version: w/y/ll
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
			___CVCVC : 2___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: l
					> version: ƿ/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: l
					> version: w/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: l
					> version: ƿ/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: l
					> version: w/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: l
					> version: w/y/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
			___CVCVC : 3___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: e
					> version: v/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					> version: ƿ/i/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				ƿ/i/l(CCC)
ƿ/i/l(CVC)
ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					> version: w/i/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				w/i/l(CCC)
w/i/l(CVC)
w/i/l/_(CACA)
w/i/l/_(CACA)
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: e
					> version: ƿ/i/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: e
					> version: w/i/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					> version: ƿ/i/ll
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'll', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', '_']
				ƿ/i/l/l(CCCC)
ƿ/i/l/l(CVCC)
ƿ/i/ll(CCC)
ƿ/i/ll(CVC)
ƿ/i/l/_/l(CACAC)
ƿ/i/l/_/l(CACAC)
ƿ/i/ll/_(CACA)
ƿ/i/ll/_(CACA)
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					> version: w/i/ll
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'l']
				adding dashed alternative: ['w', 'i', 'l', '_', 'l']
				adding dashed alternative: ['w', 'i', 'll', '_']
				adding dashed alternative: ['w', 'i', 'll', '_']
				w/i/l/l(CCCC)
w/i/l/l(CVCC)
w/i/ll(CCC)
w/i/ll(CVC)
w/i/l/_/l(CACAC)
w/i/l/_/l(CACAC)
w/i/ll/_(CACA)
w/i/ll/_(CACA)
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: a
					> version: ƿ/i/ll/a
					TRYING: a
					RESULT:  ['a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: a
					> version: w/i/ll/a
					TRYING: a
					RESULT:  ['a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: e
					> version: ƿ/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: e
					> version: w/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					> version: w/y/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				w/y/l(CCC)
w/y/l(CVC)
w/y/l/_(CACA)
w/y/l/_(CACA)
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					> version: w/y/ll
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', 'l']
				adding dashed alternative: ['w', 'y', 'l', '_', 'l']
				adding dashed alternative: ['w', 'y', 'll', '_']
				adding dashed alternative: ['w', 'y', 'll', '_']
				w/y/l/l(CCCC)
w/y/l/l(CVCC)
w/y/ll(CCC)
w/y/ll(CVC)
w/y/l/_/l(CACAC)
w/y/l/_/l(CACAC)
w/y/ll/_(CACA)
w/y/ll/_(CACA)
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: e
					> version: w/y/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
			___CVCVC : 4___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (2)
					> version: v/i/ll/e
					> version: v/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['v', 'i', 'll', 'e', '_']
				adding dashed alternative: ['v', 'i', 'll', 'e', '_']
				v/i/ll/e(CCCV)
v/i/ll/e(VVCV)
v/i/ll/e/_(AACVA)
v/i/ll/e/_(AACVA)
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e', '_']
				{'string': 'v/i/ll/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['v', 'i', 'll', 'e', '_']
				{'string': 'v/i/ll/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l/_
					> version: ƿ/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l/_
					> version: w/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				w/i/l/_(CACA)
w/i/l/_(CACA)
w/i/l/_/_(CACAA)
w/i/l/_/_(CACAA)
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					> version: ƿ/i/l/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'e', '_']
				ƿ/i/l/e(CCCV)
ƿ/i/l/e(CVCV)
ƿ/i/l/e/_(CACVA)
ƿ/i/l/e/_(CACVA)
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e', '_']
				{'string': 'ƿ/i/l/e/_', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'e', '_']
				{'string': 'ƿ/i/l/e/_', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					> version: w/i/l/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'e', '_']
				adding dashed alternative: ['w', 'i', 'l', 'e', '_']
				w/i/l/e(CCCV)
w/i/l/e(CVCV)
w/i/l/e/_(CACVA)
w/i/l/e/_(CACVA)
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e', '_']
				{'string': 'w/i/l/e/_', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				version split: ['w', 'i', 'l', 'e', '_']
				{'string': 'w/i/l/e/_', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: ƿ/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: ƿ/i/ll/_
					> version: ƿ/i/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'll', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', '_', '_']
				ƿ/i/l/_/l(CACAC)
ƿ/i/l/_/l(CACAC)
ƿ/i/ll/_(CACA)
ƿ/i/ll/_(CACA)
ƿ/i/l/_/_/l(CACAAC)
ƿ/i/l/_/_/l(CACAAC)
ƿ/i/ll/_/_(CACAA)
ƿ/i/ll/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'l']
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'l']
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', '_']
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', '_']
				version split: ['ƿ', 'i', 'l', '_', '_', 'l']
				{'string': 'ƿ/i/l/_/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_', 'l']
				version split: ['ƿ', 'i', 'l', '_', '_', 'l']
				{'string': 'ƿ/i/l/_/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_', 'l']
				version split: ['ƿ', 'i', 'll', '_', '_']
				{'string': 'ƿ/i/ll/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_', '_']
				{'string': 'ƿ/i/ll/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/i/ll/_
					> version: w/i/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'i', 'll', '_', '_']
				adding dashed alternative: ['w', 'i', 'll', '_', '_']
				w/i/l/_/l(CACAC)
w/i/l/_/l(CACAC)
w/i/ll/_(CACA)
w/i/ll/_(CACA)
w/i/l/_/_/l(CACAAC)
w/i/l/_/_/l(CACAAC)
w/i/ll/_/_(CACAA)
w/i/ll/_/_(CACAA)
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'l']
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'l']
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'll', '_']
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'll', '_']
				version split: ['w', 'i', 'l', '_', '_', 'l']
				{'string': 'w/i/l/_/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_', 'l']
				version split: ['w', 'i', 'l', '_', '_', 'l']
				{'string': 'w/i/l/_/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_', 'l']
				version split: ['w', 'i', 'll', '_', '_']
				{'string': 'w/i/ll/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				version split: ['w', 'i', 'll', '_', '_']
				{'string': 'w/i/ll/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (2)
					> version: ƿ/i/ll/a
					> version: ƿ/i/ll/a
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'a', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'a', '_']
				ƿ/i/ll/a(CCCV)
ƿ/i/ll/a(CVCV)
ƿ/i/ll/a/_(CACVA)
ƿ/i/ll/a/_(CACVA)
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a', '_']
				{'string': 'ƿ/i/ll/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				version split: ['ƿ', 'i', 'll', 'a', '_']
				{'string': 'ƿ/i/ll/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				ANALYSING: willa
					resolving (2)
					> version: w/i/ll/a
					> version: w/i/ll/a
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'll', 'a', '_']
				adding dashed alternative: ['w', 'i', 'll', 'a', '_']
				w/i/ll/a(CCCV)
w/i/ll/a(CVCV)
w/i/ll/a/_(CACVA)
w/i/ll/a/_(CACVA)
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a', '_']
				{'string': 'w/i/ll/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				version split: ['w', 'i', 'll', 'a', '_']
				{'string': 'w/i/ll/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				ANALYSING: ƿille
					resolving (2)
					> version: ƿ/i/ll/e
					> version: ƿ/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'e', '_']
				ƿ/i/ll/e(CCCV)
ƿ/i/ll/e(CVCV)
ƿ/i/ll/e/_(CACVA)
ƿ/i/ll/e/_(CACVA)
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e', '_']
				{'string': 'ƿ/i/ll/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'll', 'e', '_']
				{'string': 'ƿ/i/ll/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: wille
					resolving (2)
					> version: w/i/ll/e
					> version: w/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'll', 'e', '_']
				adding dashed alternative: ['w', 'i', 'll', 'e', '_']
				w/i/ll/e(CCCV)
w/i/ll/e(CVCV)
w/i/ll/e/_(CACVA)
w/i/ll/e/_(CACVA)
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e', '_']
				{'string': 'w/i/ll/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['w', 'i', 'll', 'e', '_']
				{'string': 'w/i/ll/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l/_
					> version: w/y/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				w/y/l/_(CACA)
w/y/l/_(CACA)
w/y/l/_/_(CACAA)
w/y/l/_/_(CACAA)
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/y/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/y/ll/_
					> version: w/y/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'y', 'll', '_', '_']
				adding dashed alternative: ['w', 'y', 'll', '_', '_']
				w/y/l/_/l(CACAC)
w/y/l/_/l(CACAC)
w/y/ll/_(CACA)
w/y/ll/_(CACA)
w/y/l/_/_/l(CACAAC)
w/y/l/_/_/l(CACAAC)
w/y/ll/_/_(CACAA)
w/y/ll/_/_(CACAA)
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', 'l']
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', 'l']
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'll', '_']
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'll', '_']
				version split: ['w', 'y', 'l', '_', '_', 'l']
				{'string': 'w/y/l/_/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_', 'l']
				version split: ['w', 'y', 'l', '_', '_', 'l']
				{'string': 'w/y/l/_/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_', 'l']
				version split: ['w', 'y', 'll', '_', '_']
				{'string': 'w/y/ll/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				version split: ['w', 'y', 'll', '_', '_']
				{'string': 'w/y/ll/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: wylle
					resolving (2)
					> version: w/y/ll/e
					> version: w/y/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'll', 'e', '_']
				adding dashed alternative: ['w', 'y', 'll', 'e', '_']
				w/y/ll/e(CCCV)
w/y/ll/e(CVCV)
w/y/ll/e/_(CACVA)
w/y/ll/e/_(CACVA)
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e', '_']
				{'string': 'w/y/ll/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				version split: ['w', 'y', 'll', 'e', '_']
				{'string': 'w/y/ll/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['v', 'i', 'll', 'e', '_']
		only one version left: ['ƿ', 'i', 'l', '_', '_']
		only one version left: ['w', 'i', 'l', '_', '_']
		only one version left: ['ƿ', 'i', 'l', 'e', '_']
		only one version left: ['w', 'i', 'l', 'e', '_']
		only one version left: ['ƿ', 'i', 'll', '_', '_']
		only one version left: ['w', 'i', 'll', '_', '_']
		only one version left: ['ƿ', 'i', 'll', 'a', '_']
		only one version left: ['w', 'i', 'll', 'a', '_']
		only one version left: ['ƿ', 'i', 'll', 'e', '_']
		only one version left: ['w', 'i', 'll', 'e', '_']
		only one version left: ['w', 'y', 'l', '_', '_']
		only one version left: ['w', 'y', 'll', '_', '_']
		only one version left: ['w', 'y', 'll', 'e', '_']
		SPLIT: ['ƿ', 'i', 'll', 'a', 'n']
		SPLIT: ['ƿ', 'i', 'll', 'e', 'n']
		SPLIT: ['w', 'i', 'll', 'e', 'n']
		SPLIT: ['ƿ', 'i', 'll', 'e', 's']
		SPLIT: ['v', 'i', 'll', 'e', '_']
		['v', 'i', 'll', 'e', '_']
		['v', 'i', 'll', 'e', '_']
		SPLIT: ['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		SPLIT: ['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		SPLIT: ['ƿ', 'i', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'e', '_']
		SPLIT: ['w', 'i', 'l', 'e', '_']
		['w', 'i', 'l', 'e', '_']
		['w', 'i', 'l', 'e', '_']
		SPLIT: ['ƿ', 'i', 'll', '_', '_']
		['ƿ', 'i', 'll', '_', '_']
		['ƿ', 'i', 'll', '_', '_']
		SPLIT: ['w', 'i', 'll', '_', '_']
		['w', 'i', 'll', '_', '_']
		['w', 'i', 'll', '_', '_']
		SPLIT: ['ƿ', 'i', 'll', 'a', '_']
		['ƿ', 'i', 'll', 'a', '_']
		['ƿ', 'i', 'll', 'a', '_']
		SPLIT: ['w', 'i', 'll', 'a', '_']
		['w', 'i', 'll', 'a', '_']
		['w', 'i', 'll', 'a', '_']
		SPLIT: ['ƿ', 'i', 'll', 'e', '_']
		['ƿ', 'i', 'll', 'e', '_']
		['ƿ', 'i', 'll', 'e', '_']
		SPLIT: ['w', 'i', 'll', 'e', '_']
		['w', 'i', 'll', 'e', '_']
		['w', 'i', 'll', 'e', '_']
		SPLIT: ['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		SPLIT: ['w', 'y', 'll', '_', '_']
		['w', 'y', 'll', '_', '_']
		['w', 'y', 'll', '_', '_']
		SPLIT: ['w', 'y', 'll', 'e', '_']
		['w', 'y', 'll', 'e', '_']
		['w', 'y', 'll', 'e', '_']
		OVERVIEW: version for pattern CVCVC

faulty splits: 0
ƿ | i | ll | a | n
ƿ | i | ll | e | n
w | i | ll | e | n
ƿ | i | ll | e | s
v | i | ll | e | _
ƿ | i | l | _ | _
w | i | l | _ | _
ƿ | i | l | e | _
w | i | l | e | _
ƿ | i | ll | _ | _
w | i | ll | _ | _
ƿ | i | ll | a | _
w | i | ll | a | _
ƿ | i | ll | e | _
w | i | ll | e | _
w | y | l | _ | _
w | y | ll | _ | _
w | y | ll | e | _
4 : {'l', 'n', '_', 's'}
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern VVCV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCCVC is valid
	Pattern CVCCV is valid
	Pattern CCCCVC is invalid
	Pattern CCCV is invalid
	Pattern CVCCVC is valid
	Pattern CCC is invalid
	Pattern VVCCV is valid
	Pattern CCCC is invalid
	Pattern CVCV is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: ƿ
					> version: ƿ/i/l
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: w
					> version: w/i/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: ƿ
					> version: ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: w
					> version: w/i/l/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: w
					> version: w/i/l/l
					TRYING: w
					> version: w/i/ll
					TRYING: w
					> version: w/i/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: w
					> version: w/y/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: w
					> version: w/y/l/l
					TRYING: w
					> version: w/y/ll
					TRYING: w
					> version: w/y/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
			___CCCVC : 1___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: i
					> version: ƿ/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: i
					> version: w/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: i
					> version: ƿ/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: i
					> version: w/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: i
					> version: w/i/l/l
					TRYING: i
					> version: w/i/ll
					TRYING: i
					> version: w/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: y
					> version: w/y/l
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: y
					> version: w/y/l/l
					TRYING: y
					> version: w/y/ll
					TRYING: y
					> version: w/y/ll
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
			___CCCVC : 2___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: l
					> version: ƿ/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: l
					> version: w/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: l
					> version: ƿ/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: l
					> version: w/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: l
					> version: w/y/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
			___CCCVC : 3___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: e
					> version: v/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					> version: ƿ/i/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				ƿ/i/l(CCC)
ƿ/i/l(CVC)
ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					> version: w/i/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				w/i/l(CCC)
w/i/l(CVC)
w/i/l/_(CACA)
w/i/l/_(CACA)
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: e
					> version: ƿ/i/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: e
					> version: w/i/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					> version: ƿ/i/ll
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'll', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', '_']
				ƿ/i/l/l(CCCC)
ƿ/i/l/l(CVCC)
ƿ/i/ll(CCC)
ƿ/i/ll(CVC)
ƿ/i/l/_/l(CACAC)
ƿ/i/l/_/l(CACAC)
ƿ/i/ll/_(CACA)
ƿ/i/ll/_(CACA)
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					> version: w/i/ll
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'l']
				adding dashed alternative: ['w', 'i', 'l', '_', 'l']
				adding dashed alternative: ['w', 'i', 'll', '_']
				adding dashed alternative: ['w', 'i', 'll', '_']
				w/i/l/l(CCCC)
w/i/l/l(CVCC)
w/i/ll(CCC)
w/i/ll(CVC)
w/i/l/_/l(CACAC)
w/i/l/_/l(CACAC)
w/i/ll/_(CACA)
w/i/ll/_(CACA)
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: a
					> version: ƿ/i/ll/a
					TRYING: a
					RESULT:  ['a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: a
					> version: w/i/ll/a
					TRYING: a
					RESULT:  ['a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: e
					> version: ƿ/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: e
					> version: w/i/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					> version: w/y/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				w/y/l(CCC)
w/y/l(CVC)
w/y/l/_(CACA)
w/y/l/_(CACA)
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					> version: w/y/ll
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', 'l']
				adding dashed alternative: ['w', 'y', 'l', '_', 'l']
				adding dashed alternative: ['w', 'y', 'll', '_']
				adding dashed alternative: ['w', 'y', 'll', '_']
				w/y/l/l(CCCC)
w/y/l/l(CVCC)
w/y/ll(CCC)
w/y/ll(CVC)
w/y/l/_/l(CACAC)
w/y/l/_/l(CACAC)
w/y/ll/_(CACA)
w/y/ll/_(CACA)
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: e
					> version: w/y/ll/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))$'}
			___CCCVC : 4___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (2)
					> version: v/i/ll/e
					> version: v/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['v', 'i', 'll', 'e', '_']
				adding dashed alternative: ['v', 'i', 'll', 'e', '_']
				v/i/ll/e(CCCV)
v/i/ll/e(VVCV)
v/i/ll/e/_(AACVA)
v/i/ll/e/_(AACVA)
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e', '_']
				{'string': 'v/i/ll/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['v', 'i', 'll', 'e', '_']
				{'string': 'v/i/ll/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l/_
					> version: ƿ/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l/_
					> version: w/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				w/i/l/_(CACA)
w/i/l/_(CACA)
w/i/l/_/_(CACAA)
w/i/l/_/_(CACAA)
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					> version: ƿ/i/l/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'e', '_']
				ƿ/i/l/e(CCCV)
ƿ/i/l/e(CVCV)
ƿ/i/l/e/_(CACVA)
ƿ/i/l/e/_(CACVA)
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e', '_']
				{'string': 'ƿ/i/l/e/_', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'e', '_']
				{'string': 'ƿ/i/l/e/_', 'rgx': '((ƿ))/((i))/((l))/((e))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					> version: w/i/l/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'e', '_']
				adding dashed alternative: ['w', 'i', 'l', 'e', '_']
				w/i/l/e(CCCV)
w/i/l/e(CVCV)
w/i/l/e/_(CACVA)
w/i/l/e/_(CACVA)
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e', '_']
				{'string': 'w/i/l/e/_', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				version split: ['w', 'i', 'l', 'e', '_']
				{'string': 'w/i/l/e/_', 'rgx': '((w))/((i))/((l))/((e))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: ƿ/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: ƿ/i/ll/_
					> version: ƿ/i/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['ƿ', 'i', 'll', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', '_', '_']
				ƿ/i/l/_/l(CACAC)
ƿ/i/l/_/l(CACAC)
ƿ/i/ll/_(CACA)
ƿ/i/ll/_(CACA)
ƿ/i/l/_/_/l(CACAAC)
ƿ/i/l/_/_/l(CACAAC)
ƿ/i/ll/_/_(CACAA)
ƿ/i/ll/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'l']
				version split: ['ƿ', 'i', 'l', '_', 'l']
				{'string': 'ƿ/i/l/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'l']
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', '_']
				version split: ['ƿ', 'i', 'll', '_']
				{'string': 'ƿ/i/ll/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', '_']
				version split: ['ƿ', 'i', 'l', '_', '_', 'l']
				{'string': 'ƿ/i/l/_/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_', 'l']
				version split: ['ƿ', 'i', 'l', '_', '_', 'l']
				{'string': 'ƿ/i/l/_/_/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_', 'l']
				version split: ['ƿ', 'i', 'll', '_', '_']
				{'string': 'ƿ/i/ll/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'll', '_', '_']
				{'string': 'ƿ/i/ll/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/i/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/i/ll/_
					> version: w/i/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'i', 'll', '_', '_']
				adding dashed alternative: ['w', 'i', 'll', '_', '_']
				w/i/l/_/l(CACAC)
w/i/l/_/l(CACAC)
w/i/ll/_(CACA)
w/i/ll/_(CACA)
w/i/l/_/_/l(CACAAC)
w/i/l/_/_/l(CACAAC)
w/i/ll/_/_(CACAA)
w/i/ll/_/_(CACAA)
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'l']
				version split: ['w', 'i', 'l', '_', 'l']
				{'string': 'w/i/l/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'l']
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'll', '_']
				version split: ['w', 'i', 'll', '_']
				{'string': 'w/i/ll/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'll', '_']
				version split: ['w', 'i', 'l', '_', '_', 'l']
				{'string': 'w/i/l/_/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_', 'l']
				version split: ['w', 'i', 'l', '_', '_', 'l']
				{'string': 'w/i/l/_/_/l', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_', 'l']
				version split: ['w', 'i', 'll', '_', '_']
				{'string': 'w/i/ll/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				version split: ['w', 'i', 'll', '_', '_']
				{'string': 'w/i/ll/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (2)
					> version: ƿ/i/ll/a
					> version: ƿ/i/ll/a
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'a', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'a', '_']
				ƿ/i/ll/a(CCCV)
ƿ/i/ll/a(CVCV)
ƿ/i/ll/a/_(CACVA)
ƿ/i/ll/a/_(CACVA)
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a', '_']
				{'string': 'ƿ/i/ll/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				version split: ['ƿ', 'i', 'll', 'a', '_']
				{'string': 'ƿ/i/ll/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((a))/((_))$'}
				ANALYSING: willa
					resolving (2)
					> version: w/i/ll/a
					> version: w/i/ll/a
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'll', 'a', '_']
				adding dashed alternative: ['w', 'i', 'll', 'a', '_']
				w/i/ll/a(CCCV)
w/i/ll/a(CVCV)
w/i/ll/a/_(CACVA)
w/i/ll/a/_(CACVA)
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a', '_']
				{'string': 'w/i/ll/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				version split: ['w', 'i', 'll', 'a', '_']
				{'string': 'w/i/ll/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((a))/((_))$'}
				ANALYSING: ƿille
					resolving (2)
					> version: ƿ/i/ll/e
					> version: ƿ/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'll', 'e', '_']
				ƿ/i/ll/e(CCCV)
ƿ/i/ll/e(CVCV)
ƿ/i/ll/e/_(CACVA)
ƿ/i/ll/e/_(CACVA)
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e', '_']
				{'string': 'ƿ/i/ll/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'll', 'e', '_']
				{'string': 'ƿ/i/ll/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: wille
					resolving (2)
					> version: w/i/ll/e
					> version: w/i/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'll', 'e', '_']
				adding dashed alternative: ['w', 'i', 'll', 'e', '_']
				w/i/ll/e(CCCV)
w/i/ll/e(CVCV)
w/i/ll/e/_(CACVA)
w/i/ll/e/_(CACVA)
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e', '_']
				{'string': 'w/i/ll/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				version split: ['w', 'i', 'll', 'e', '_']
				{'string': 'w/i/ll/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((e))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l/_
					> version: w/y/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				w/y/l/_(CACA)
w/y/l/_(CACA)
w/y/l/_/_(CACAA)
w/y/l/_/_(CACAA)
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/y/l/_/l
					TRYING: l
					adding blocked set: C = C >> l, n, _, s
					> version: w/y/ll/_
					> version: w/y/ll/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', 'l']
				adding dashed alternative: ['w', 'y', 'll', '_', '_']
				adding dashed alternative: ['w', 'y', 'll', '_', '_']
				w/y/l/_/l(CACAC)
w/y/l/_/l(CACAC)
w/y/ll/_(CACA)
w/y/ll/_(CACA)
w/y/l/_/_/l(CACAAC)
w/y/l/_/_/l(CACAAC)
w/y/ll/_/_(CACAA)
w/y/ll/_/_(CACAA)
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', 'l']
				version split: ['w', 'y', 'l', '_', 'l']
				{'string': 'w/y/l/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', 'l']
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'll', '_']
				version split: ['w', 'y', 'll', '_']
				{'string': 'w/y/ll/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'll', '_']
				version split: ['w', 'y', 'l', '_', '_', 'l']
				{'string': 'w/y/l/_/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_', 'l']
				version split: ['w', 'y', 'l', '_', '_', 'l']
				{'string': 'w/y/l/_/_/l', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_', 'l']
				version split: ['w', 'y', 'll', '_', '_']
				{'string': 'w/y/ll/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				version split: ['w', 'y', 'll', '_', '_']
				{'string': 'w/y/ll/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((_))/((_))$'}
				ANALYSING: wylle
					resolving (2)
					> version: w/y/ll/e
					> version: w/y/ll/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'll', 'e', '_']
				adding dashed alternative: ['w', 'y', 'll', 'e', '_']
				w/y/ll/e(CCCV)
w/y/ll/e(CVCV)
w/y/ll/e/_(CACVA)
w/y/ll/e/_(CACVA)
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e', '_']
				{'string': 'w/y/ll/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
				version split: ['w', 'y', 'll', 'e', '_']
				{'string': 'w/y/ll/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((e))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['v', 'i', 'll', 'e', '_']
		only one version left: ['ƿ', 'i', 'l', '_', '_']
		only one version left: ['w', 'i', 'l', '_', '_']
		only one version left: ['ƿ', 'i', 'l', 'e', '_']
		only one version left: ['w', 'i', 'l', 'e', '_']
		only one version left: ['ƿ', 'i', 'll', '_', '_']
		only one version left: ['w', 'i', 'll', '_', '_']
		only one version left: ['ƿ', 'i', 'll', 'a', '_']
		only one version left: ['w', 'i', 'll', 'a', '_']
		only one version left: ['ƿ', 'i', 'll', 'e', '_']
		only one version left: ['w', 'i', 'll', 'e', '_']
		only one version left: ['w', 'y', 'l', '_', '_']
		only one version left: ['w', 'y', 'll', '_', '_']
		only one version left: ['w', 'y', 'll', 'e', '_']
		SPLIT: ['ƿ', 'i', 'll', 'a', 'n']
		SPLIT: ['ƿ', 'i', 'll', 'e', 'n']
		SPLIT: ['w', 'i', 'll', 'e', 'n']
		SPLIT: ['ƿ', 'i', 'll', 'e', 's']
		SPLIT: ['v', 'i', 'll', 'e', '_']
		['v', 'i', 'll', 'e', '_']
		['v', 'i', 'll', 'e', '_']
		SPLIT: ['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		SPLIT: ['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		SPLIT: ['ƿ', 'i', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'e', '_']
		SPLIT: ['w', 'i', 'l', 'e', '_']
		['w', 'i', 'l', 'e', '_']
		['w', 'i', 'l', 'e', '_']
		SPLIT: ['ƿ', 'i', 'll', '_', '_']
		['ƿ', 'i', 'll', '_', '_']
		['ƿ', 'i', 'll', '_', '_']
		SPLIT: ['w', 'i', 'll', '_', '_']
		['w', 'i', 'll', '_', '_']
		['w', 'i', 'll', '_', '_']
		SPLIT: ['ƿ', 'i', 'll', 'a', '_']
		['ƿ', 'i', 'll', 'a', '_']
		['ƿ', 'i', 'll', 'a', '_']
		SPLIT: ['w', 'i', 'll', 'a', '_']
		['w', 'i', 'll', 'a', '_']
		['w', 'i', 'll', 'a', '_']
		SPLIT: ['ƿ', 'i', 'll', 'e', '_']
		['ƿ', 'i', 'll', 'e', '_']
		['ƿ', 'i', 'll', 'e', '_']
		SPLIT: ['w', 'i', 'll', 'e', '_']
		['w', 'i', 'll', 'e', '_']
		['w', 'i', 'll', 'e', '_']
		SPLIT: ['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		SPLIT: ['w', 'y', 'll', '_', '_']
		['w', 'y', 'll', '_', '_']
		['w', 'y', 'll', '_', '_']
		SPLIT: ['w', 'y', 'll', 'e', '_']
		['w', 'y', 'll', 'e', '_']
		['w', 'y', 'll', 'e', '_']
		OVERVIEW: version for pattern CCCVC

faulty splits: 0
ƿ | i | ll | a | n
ƿ | i | ll | e | n
w | i | ll | e | n
ƿ | i | ll | e | s
v | i | ll | e | _
ƿ | i | l | _ | _
w | i | l | _ | _
ƿ | i | l | e | _
w | i | l | e | _
ƿ | i | ll | _ | _
w | i | ll | _ | _
ƿ | i | ll | a | _
w | i | ll | a | _
ƿ | i | ll | e | _
w | i | ll | e | _
w | y | l | _ | _
w | y | ll | _ | _
w | y | ll | e | _
4 : {'l', 'n', '_', 's'}
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern VVCV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCCVC is valid
	Pattern CVCCV is valid
	Pattern CCCCVC is invalid
	Pattern CCCV is invalid
	Pattern CVCCVC is valid
	Pattern CCC is invalid
	Pattern VVCCV is valid
	Pattern CCCC is invalid
	Pattern CVCV is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: ƿilla
				adding littera based on matching pattern
				ANALYSING: willa
				adding littera based on matching pattern
				ANALYSING: ƿille
				adding littera based on matching pattern
				ANALYSING: wille
				adding littera based on matching pattern
				ANALYSING: wylle
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: ƿ
					> version: ƿ/i/l
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: w
					> version: w/i/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: ƿ
					> version: ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: w
					> version: w/i/l/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: w
					> version: w/i/l/l
					TRYING: w
					> version: w/i/ll
					TRYING: w
					> version: w/i/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: ƿ/i/ll/a/n
					TRYING: ƿ
					> version: ƿ/i/ll/a/n
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: ƿ/i/ll/e/n
					TRYING: ƿ
					> version: ƿ/i/ll/e/n
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: willen
					resolving (4)
					> version: w/i/l/l/e/n
					TRYING: w
					> version: w/i/l/l/e/n
					TRYING: w
					> version: w/i/ll/e/n
					TRYING: w
					> version: w/i/ll/e/n
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: ƿ/i/ll/e/s
					TRYING: ƿ
					> version: ƿ/i/ll/e/s
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: w
					> version: w/y/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: w
					> version: w/y/l/l
					TRYING: w
					> version: w/y/ll
					TRYING: w
					> version: w/y/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
			___CVCCV : 1___
				ANALYSING: ƿilla
				adding littera based on matching pattern
				ANALYSING: willa
				adding littera based on matching pattern
				ANALYSING: ƿille
				adding littera based on matching pattern
				ANALYSING: wille
				adding littera based on matching pattern
				ANALYSING: wylle
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: i
					> version: ƿ/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: i
					> version: w/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: i
					> version: ƿ/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: i
					> version: w/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: i
					> version: w/i/l/l
					TRYING: i
					> version: w/i/ll
					TRYING: i
					> version: w/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: ƿ/i/l/l/a/n
					TRYING: i
					> version: ƿ/i/l/l/a/n
					TRYING: i
					> version: ƿ/i/ll/a/n
					TRYING: i
					> version: ƿ/i/ll/a/n
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: ƿ/i/l/l/e/n
					TRYING: i
					> version: ƿ/i/l/l/e/n
					TRYING: i
					> version: ƿ/i/ll/e/n
					TRYING: i
					> version: ƿ/i/ll/e/n
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: willen
					resolving (4)
					> version: w/i/l/l/e/n
					TRYING: i
					> version: w/i/l/l/e/n
					TRYING: i
					> version: w/i/ll/e/n
					TRYING: i
					> version: w/i/ll/e/n
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: ƿ/i/l/l/e/s
					TRYING: i
					> version: ƿ/i/l/l/e/s
					TRYING: i
					> version: ƿ/i/ll/e/s
					TRYING: i
					> version: ƿ/i/ll/e/s
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: y
					> version: w/y/l
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: y
					> version: w/y/l/l
					TRYING: y
					> version: w/y/ll
					TRYING: y
					> version: w/y/ll
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
			___CVCCV : 2___
				ANALYSING: ƿilla
				adding littera based on matching pattern
				ANALYSING: willa
				adding littera based on matching pattern
				ANALYSING: ƿille
				adding littera based on matching pattern
				ANALYSING: wille
				adding littera based on matching pattern
				ANALYSING: wylle
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: l
					> version: ƿ/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: l
					> version: w/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: l
					> version: ƿ/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: l
					> version: w/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: ƿ/i/l/l/a/n
					TRYING: l
					> version: ƿ/i/l/l/a/n
					TRYING: l
					> version: ƿ/i/ll/a/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/a/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: ƿ/i/l/l/e/n
					TRYING: l
					> version: ƿ/i/l/l/e/n
					TRYING: l
					> version: ƿ/i/ll/e/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/e/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: willen
					resolving (4)
					> version: w/i/l/l/e/n
					TRYING: l
					> version: w/i/l/l/e/n
					TRYING: l
					> version: w/i/ll/e/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/e/n
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: ƿ/i/l/l/e/s
					TRYING: l
					> version: ƿ/i/l/l/e/s
					TRYING: l
					> version: ƿ/i/ll/e/s
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/e/s
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: l
					> version: w/y/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
			___CVCCV : 3___
				ANALYSING: ƿilla
				adding littera based on matching pattern
				ANALYSING: willa
				adding littera based on matching pattern
				ANALYSING: ƿille
				adding littera based on matching pattern
				ANALYSING: wille
				adding littera based on matching pattern
				ANALYSING: wylle
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: e
					> version: v/i/ll/e
					TRYING: e
					RESULT:  ['l']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					> version: ƿ/i/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				ƿ/i/l(CCC)
ƿ/i/l(CVC)
ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					> version: w/i/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				w/i/l(CCC)
w/i/l(CVC)
w/i/l/_(CACA)
w/i/l/_(CACA)
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: e
					> version: ƿ/i/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e']
				ƿ/i/l/e(CCCV)
ƿ/i/l/e(CVCV)
ƿ/i/l/_/e(CACAV)
ƿ/i/l/_/e(CACAV)
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: e
					> version: w/i/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e']
				w/i/l/e(CCCV)
w/i/l/e(CVCV)
w/i/l/_/e(CACAV)
w/i/l/_/e(CACAV)
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					> version: ƿ/i/ll
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					> version: w/i/ll
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll']
				ANALYSING: ƿillan
					resolving (4)
					> version: ƿ/i/l/l/a/n
					TRYING: l
					> version: ƿ/i/l/l/a/n
					TRYING: l
					> version: ƿ/i/ll/a/n
					TRYING: a
					> version: ƿ/i/ll/a/n
					TRYING: a
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a', 'n']
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a', 'n']
				ANALYSING: ƿillen
					resolving (4)
					> version: ƿ/i/l/l/e/n
					TRYING: l
					> version: ƿ/i/l/l/e/n
					TRYING: l
					> version: ƿ/i/ll/e/n
					TRYING: e
					> version: ƿ/i/ll/e/n
					TRYING: e
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 'n']
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 'n']
				ANALYSING: willen
					resolving (4)
					> version: w/i/l/l/e/n
					TRYING: l
					> version: w/i/l/l/e/n
					TRYING: l
					> version: w/i/ll/e/n
					TRYING: e
					> version: w/i/ll/e/n
					TRYING: e
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'e', 'n']
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'e', 'n']
				ANALYSING: ƿilles
					resolving (4)
					> version: ƿ/i/l/l/e/s
					TRYING: l
					> version: ƿ/i/l/l/e/s
					TRYING: l
					> version: ƿ/i/ll/e/s
					TRYING: e
					> version: ƿ/i/ll/e/s
					TRYING: e
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 's']
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 's']
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					> version: w/y/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				w/y/l(CCC)
w/y/l(CVC)
w/y/l/_(CACA)
w/y/l/_(CACA)
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					> version: w/y/ll
					RESULT:  ['l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll']
			___CVCCV : 4___
				ANALYSING: ƿilla
				adding littera based on matching pattern
				ANALYSING: willa
				adding littera based on matching pattern
				ANALYSING: ƿille
				adding littera based on matching pattern
				ANALYSING: wille
				adding littera based on matching pattern
				ANALYSING: wylle
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (2)
					> version: v/i/l/l/e
					TRYING: e
					> version: v/i/l/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l/_
					> version: ƿ/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l/_
					> version: w/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				w/i/l/_(CACA)
w/i/l/_(CACA)
w/i/l/_/_(CACAA)
w/i/l/_/_(CACAA)
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/_/e
					TRYING: e
					> version: ƿ/i/l/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))$'}
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/_/e
					TRYING: e
					> version: w/i/l/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))$'}
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))$'}
				ANALYSING: ƿill
					resolving (2)
					> version: ƿ/i/l/l
					> version: ƿ/i/l/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_']
				ƿ/i/l/l(CCCC)
ƿ/i/l/l(CVCC)
ƿ/i/l/l/_(CACCA)
ƿ/i/l/l/_(CACCA)
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				ANALYSING: will
					resolving (2)
					> version: w/i/l/l
					> version: w/i/l/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_']
				w/i/l/l(CCCC)
w/i/l/l(CVCC)
w/i/l/l/_(CACCA)
w/i/l/l/_(CACCA)
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				ANALYSING: ƿillan
					resolving (2)
					> version: ƿ/i/l/l/a/n
					TRYING: a
					> version: ƿ/i/l/l/a/n
					TRYING: a
					RESULT:  ['a']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l/l/a/n', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ/i/l/l/a/n', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a', 'n']
				ANALYSING: ƿillen
					resolving (2)
					> version: ƿ/i/l/l/e/n
					TRYING: e
					> version: ƿ/i/l/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l/l/e/n', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ/i/l/l/e/n', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 'n']
				ANALYSING: willen
					resolving (2)
					> version: w/i/l/l/e/n
					TRYING: e
					> version: w/i/l/l/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l/l/e/n', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e', 'n']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w/i/l/l/e/n', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e', 'n']
				ANALYSING: ƿilles
					resolving (2)
					> version: ƿ/i/l/l/e/s
					TRYING: e
					> version: ƿ/i/l/l/e/s
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l/l/e/s', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ/i/l/l/e/s', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 's']
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l/_
					> version: w/y/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				w/y/l/_(CACA)
w/y/l/_(CACA)
w/y/l/_/_(CACAA)
w/y/l/_/_(CACAA)
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (2)
					> version: w/y/l/l
					> version: w/y/l/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_']
				w/y/l/l(CCCC)
w/y/l/l(CVCC)
w/y/l/l/_(CACCA)
w/y/l/l/_(CACCA)
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['v', 'i', 'l', 'l', 'e']
		only one version left: ['ƿ', 'i', 'l', '_', '_']
		only one version left: ['w', 'i', 'l', '_', '_']
		only one version left: ['ƿ', 'i', 'l', '_', 'e']
		only one version left: ['w', 'i', 'l', '_', 'e']
		only one version left: ['ƿ', 'i', 'l', 'l', '_']
		only one version left: ['w', 'i', 'l', 'l', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['w', 'y', 'l', '_', '_']
		only one version left: ['w', 'y', 'l', 'l', '_']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'a']
		SPLIT: ['w', 'i', 'l', 'l', 'a']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'e']
		SPLIT: ['w', 'i', 'l', 'l', 'e']
		SPLIT: ['w', 'y', 'l', 'l', 'e']
		SPLIT: ['v', 'i', 'l', 'l', 'e']
		['v', 'i', 'l', 'l', 'e']
		['v', 'i', 'l', 'l', 'e']
		SPLIT: ['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		['ƿ', 'i', 'l', '_', '_']
		SPLIT: ['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		['w', 'i', 'l', '_', '_']
		SPLIT: ['ƿ', 'i', 'l', '_', 'e']
		['ƿ', 'i', 'l', '_', 'e']
		['ƿ', 'i', 'l', '_', 'e']
		SPLIT: ['w', 'i', 'l', '_', 'e']
		['w', 'i', 'l', '_', 'e']
		['w', 'i', 'l', '_', 'e']
		SPLIT: ['ƿ', 'i', 'l', 'l', '_']
		['ƿ', 'i', 'l', 'l', '_']
		['ƿ', 'i', 'l', 'l', '_']
		SPLIT: ['w', 'i', 'l', 'l', '_']
		['w', 'i', 'l', 'l', '_']
		['w', 'i', 'l', 'l', '_']
		SPLIT: ["['ƿ']", "['i']", "['l', 'll']", "['l']", "['a']"]
		SPLIT: ["['ƿ']", "['i']", "['l', 'll']", "['l']", "['e']"]
		SPLIT: ["['w']", "['i']", "['l', 'll']", "['l']", "['e']"]
		SPLIT: ["['ƿ']", "['i']", "['l', 'll']", "['l']", "['e']"]
		SPLIT: ['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		['w', 'y', 'l', '_', '_']
		SPLIT: ['w', 'y', 'l', 'l', '_']
		['w', 'y', 'l', 'l', '_']
		['w', 'y', 'l', 'l', '_']
		version for pattern CVCCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCCV

faulty splits: 4
['ƿ']['i']['l', 'll']['l']['a'] <-! ƿillan
['ƿ']['i']['l', 'll']['l']['e'] <-! ƿillen
['w']['i']['l', 'll']['l']['e'] <-! willen
['ƿ']['i']['l', 'll']['l']['e'] <-! ƿilles
ƿ | i | l | l | a
w | i | l | l | a
ƿ | i | l | l | e
w | i | l | l | e
w | y | l | l | e
v | i | l | l | e
ƿ | i | l | _ | _
w | i | l | _ | _
ƿ | i | l | _ | e
w | i | l | _ | e
ƿ | i | l | l | _
w | i | l | l | _
['ƿ'] | ['i'] | ['l', 'll'] | ['l'] | ['a']
['ƿ'] | ['i'] | ['l', 'll'] | ['l'] | ['e']
['w'] | ['i'] | ['l', 'll'] | ['l'] | ['e']
['ƿ'] | ['i'] | ['l', 'll'] | ['l'] | ['e']
w | y | l | _ | _
w | y | l | l | _
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern VVCV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCCVC is valid
	Pattern CVCCV is valid
	Pattern CCCCVC is invalid
	Pattern CCCV is invalid
	Pattern CVCCVC is valid
	Pattern CCC is invalid
	Pattern VVCCV is valid
	Pattern CCCC is invalid
	Pattern CVCV is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCCVC
	Selection for pattern: CVCCVC completed
	Making a version for pattern: CVCCVC
			___CVCCVC : 0___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/l/l/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					> version: v/i/ll/e
					TRYING: v
					RESULT:  ['v']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v', 'rgx': '((v))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: ƿ
					> version: ƿ/i/l
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: w
					> version: w/i/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: ƿ
					> version: ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: w
					> version: w/i/l/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: w
					> version: w/i/l/l
					TRYING: w
					> version: w/i/ll
					TRYING: w
					> version: w/i/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((ƿ))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: w
					> version: w/y/l
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: w
					> version: w/y/l/l
					TRYING: w
					> version: w/y/ll
					TRYING: w
					> version: w/y/ll
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((w))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					RESULT:  ['w']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((w))$'}
			___CVCCVC : 1___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/l/l/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					> version: v/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i', 'rgx': '((v))/((i))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: i
					> version: ƿ/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: i
					> version: w/i/l
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: i
					> version: ƿ/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: i
					> version: w/i/l/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/l/l
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					> version: ƿ/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: i
					> version: w/i/l/l
					TRYING: i
					> version: w/i/ll
					TRYING: i
					> version: w/i/ll
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/l/l/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					> version: ƿ/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/l/l/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					> version: w/i/ll/a
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/l/l/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					> version: ƿ/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i', 'rgx': '((ƿ))/((i))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/l/l/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					> version: w/i/ll/e
					TRYING: i
					RESULT:  ['i']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i', 'rgx': '((w))/((i))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: y
					> version: w/y/l
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: y
					> version: w/y/l/l
					TRYING: y
					> version: w/y/ll
					TRYING: y
					> version: w/y/ll
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/l/l/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					> version: w/y/ll/e
					TRYING: y
					RESULT:  ['y']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y', 'rgx': '((w))/((y))$'}
			___CVCCVC : 2___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: v/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll', 'rgx': '((v))/((i))/((l)|(ll))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: l
					> version: ƿ/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: l
					> version: w/i/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: l
					> version: ƿ/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: l
					> version: w/i/l/e
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/a
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: ƿ/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/i/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: l
					> version: w/y/l
					TRYING: l
					RESULT:  ['l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					> version: w/y/ll/e
					TRYING: ll
					>>> MULTIPLE RESOLVE OPTIONS: {'l', 'll'}
					RESULT:  ['l', 'll']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))$'}
			___CVCCVC : 3___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (4)
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/l/l/e
					TRYING: l
					> version: v/i/ll/e
					TRYING: e
					> version: v/i/ll/e
					TRYING: e
					RESULT:  ['l']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				version split: ['v', 'i', 'll', 'e']
				{'string': 'v/i/ll/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['v', 'i', 'll', 'e']
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					> version: ƿ/i/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_']
				ƿ/i/l(CCC)
ƿ/i/l(CVC)
ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ/i/l', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					> version: w/i/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', '_']
				w/i/l(CCC)
w/i/l(CVC)
w/i/l/_(CACA)
w/i/l/_(CACA)
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l']
				{'string': 'w/i/l', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: e
					> version: ƿ/i/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e']
				ƿ/i/l/e(CCCV)
ƿ/i/l/e(CVCV)
ƿ/i/l/_/e(CACAV)
ƿ/i/l/_/e(CACAV)
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ/i/l/e', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: e
					> version: w/i/l/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e']
				w/i/l/e(CCCV)
w/i/l/e(CVCV)
w/i/l/_/e(CACAV)
w/i/l/_/e(CACAV)
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w/i/l/e', 'rgx': '((w))/((i))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/l/l
					TRYING: l
					> version: ƿ/i/ll
					> version: ƿ/i/ll
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ/i/ll', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: l
					> version: w/i/l/l
					TRYING: l
					> version: w/i/ll
					> version: w/i/ll
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'll']
				{'string': 'w/i/ll', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll']
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/l/l/a
					TRYING: l
					> version: ƿ/i/ll/a
					TRYING: a
					> version: ƿ/i/ll/a
					TRYING: a
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ/i/ll/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/l/l/a
					TRYING: l
					> version: w/i/ll/a
					TRYING: a
					> version: w/i/ll/a
					TRYING: a
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w/i/ll/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/l/l/e
					TRYING: l
					> version: ƿ/i/ll/e
					TRYING: e
					> version: ƿ/i/ll/e
					TRYING: e
					RESULT:  ['l']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ/i/ll/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/l/l/e
					TRYING: l
					> version: w/i/ll/e
					TRYING: e
					> version: w/i/ll/e
					TRYING: e
					RESULT:  ['l']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w/i/ll/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					> version: w/y/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', '_']
				w/y/l(CCC)
w/y/l(CVC)
w/y/l/_(CACA)
w/y/l/_(CACA)
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l']
				{'string': 'w/y/l', 'rgx': '((w))/((y))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: l
					> version: w/y/l/l
					TRYING: l
					> version: w/y/ll
					> version: w/y/ll
					RESULT:  ['l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'll']
				{'string': 'w/y/ll', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll']
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/l/l/e
					TRYING: l
					> version: w/y/ll/e
					TRYING: e
					> version: w/y/ll/e
					TRYING: e
					RESULT:  ['l']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w/y/ll/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
			___CVCCVC : 4___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (2)
					> version: v/i/l/l/e
					TRYING: e
					> version: v/i/l/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))$'}
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l/_
					> version: ƿ/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_']
				ƿ/i/l/_(CACA)
ƿ/i/l/_(CACA)
ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_(CACAA)
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_']
				{'string': 'ƿ/i/l/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_']
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l/_
					> version: w/i/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_']
				w/i/l/_(CACA)
w/i/l/_(CACA)
w/i/l/_/_(CACAA)
w/i/l/_/_(CACAA)
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_']
				{'string': 'w/i/l/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_']
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/_/e
					TRYING: e
					> version: ƿ/i/l/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))$'}
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/_/e
					TRYING: e
					> version: w/i/l/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))$'}
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))$'}
				ANALYSING: ƿill
					resolving (2)
					> version: ƿ/i/l/l
					> version: ƿ/i/l/l
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_']
				ƿ/i/l/l(CCCC)
ƿ/i/l/l(CVCC)
ƿ/i/l/l/_(CACCA)
ƿ/i/l/l/_(CACCA)
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ/i/l/l', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))$'}
				ANALYSING: will
					resolving (2)
					> version: w/i/l/l
					> version: w/i/l/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_']
				w/i/l/l(CCCC)
w/i/l/l(CVCC)
w/i/l/l/_(CACCA)
w/i/l/l/_(CACCA)
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w/i/l/l', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))$'}
				ANALYSING: ƿilla
					resolving (2)
					> version: ƿ/i/l/l/a
					TRYING: a
					> version: ƿ/i/l/l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))$'}
				ANALYSING: willa
					resolving (2)
					> version: w/i/l/l/a
					TRYING: a
					> version: w/i/l/l/a
					TRYING: a
					RESULT:  ['a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))$'}
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))$'}
				ANALYSING: ƿille
					resolving (2)
					> version: ƿ/i/l/l/e
					TRYING: e
					> version: ƿ/i/l/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))$'}
				ANALYSING: wille
					resolving (2)
					> version: w/i/l/l/e
					TRYING: e
					> version: w/i/l/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))$'}
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l/_
					> version: w/y/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_']
				w/y/l/_(CACA)
w/y/l/_(CACA)
w/y/l/_/_(CACAA)
w/y/l/_/_(CACAA)
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_']
				{'string': 'w/y/l/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_']
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (2)
					> version: w/y/l/l
					> version: w/y/l/l
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_']
				w/y/l/l(CCCC)
w/y/l/l(CVCC)
w/y/l/l/_(CACCA)
w/y/l/l/_(CACCA)
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w/y/l/l', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))$'}
				ANALYSING: wylle
					resolving (2)
					> version: w/y/l/l/e
					TRYING: e
					> version: w/y/l/l/e
					TRYING: e
					RESULT:  ['e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))$'}
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))$'}
			___CVCCVC : 5___
				ANALYSING: ƿillan
				adding littera based on matching pattern
				ANALYSING: ƿillen
				adding littera based on matching pattern
				ANALYSING: willen
				adding littera based on matching pattern
				ANALYSING: ƿilles
				adding littera based on matching pattern
				ANALYSING: ville
					resolving (2)
					> version: v/i/l/l/e
					> version: v/i/l/l/e
					RESULT:  ['_']
				adding dashed alternative: ['v', 'i', 'l', 'l', 'e', '_']
				adding dashed alternative: ['v', 'i', 'l', 'l', 'e', '_']
				v/i/l/l/e(CCCCV)
v/i/l/l/e(VVCCV)
v/i/l/l/e/_(AACCVA)
v/i/l/l/e/_(AACCVA)
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'l', 'l', 'e']
				{'string': 'v/i/l/l/e', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['v', 'i', 'l', 'l', 'e']
				version split: ['v', 'i', 'l', 'l', 'e', '_']
				{'string': 'v/i/l/l/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				version split: ['v', 'i', 'l', 'l', 'e', '_']
				{'string': 'v/i/l/l/e/_', 'rgx': '((v))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l/_/_
					> version: ƿ/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', '_', '_']
				ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_(CACAA)
ƿ/i/l/_/_/_(CACAAA)
ƿ/i/l/_/_/_(CACAAA)
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_']
				version split: ['ƿ', 'i', 'l', '_', '_']
				{'string': 'ƿ/i/l/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', '_']
				version split: ['ƿ', 'i', 'l', '_', '_', '_']
				{'string': 'ƿ/i/l/_/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', '_', '_']
				{'string': 'ƿ/i/l/_/_/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l/_/_
					> version: w/i/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', '_', '_']
				w/i/l/_/_(CACAA)
w/i/l/_/_(CACAA)
w/i/l/_/_/_(CACAAA)
w/i/l/_/_/_(CACAAA)
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_']
				version split: ['w', 'i', 'l', '_', '_']
				{'string': 'w/i/l/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', '_']
				version split: ['w', 'i', 'l', '_', '_', '_']
				{'string': 'w/i/l/_/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))/((_))$'}
				version split: ['w', 'i', 'l', '_', '_', '_']
				{'string': 'w/i/l/_/_/_', 'rgx': '((w))/((i))/((l))/((_))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/_/e
					> version: ƿ/i/l/_/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', '_', 'e', '_']
				ƿ/i/l/_/e(CACAV)
ƿ/i/l/_/e(CACAV)
ƿ/i/l/_/e/_(CACAVA)
ƿ/i/l/_/e/_(CACAVA)
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'e']
				version split: ['ƿ', 'i', 'l', '_', 'e']
				{'string': 'ƿ/i/l/_/e', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', '_', 'e']
				version split: ['ƿ', 'i', 'l', '_', 'e', '_']
				{'string': 'ƿ/i/l/_/e/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'l', '_', 'e', '_']
				{'string': 'ƿ/i/l/_/e/_', 'rgx': '((ƿ))/((i))/((l))/((_))/((e))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/_/e
					> version: w/i/l/_/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e', '_']
				adding dashed alternative: ['w', 'i', 'l', '_', 'e', '_']
				w/i/l/_/e(CACAV)
w/i/l/_/e(CACAV)
w/i/l/_/e/_(CACAVA)
w/i/l/_/e/_(CACAVA)
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'e']
				version split: ['w', 'i', 'l', '_', 'e']
				{'string': 'w/i/l/_/e', 'rgx': '((w))/((i))/((l))/((_))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', '_', 'e']
				version split: ['w', 'i', 'l', '_', 'e', '_']
				{'string': 'w/i/l/_/e/_', 'rgx': '((w))/((i))/((l))/((_))/((e))/((_))$'}
				version split: ['w', 'i', 'l', '_', 'e', '_']
				{'string': 'w/i/l/_/e/_', 'rgx': '((w))/((i))/((l))/((_))/((e))/((_))$'}
				ANALYSING: ƿill
					resolving (2)
					> version: ƿ/i/l/l/_
					> version: ƿ/i/l/l/_
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', '_', '_']
				ƿ/i/l/l/_(CACCA)
ƿ/i/l/l/_(CACCA)
ƿ/i/l/l/_/_(CACCAA)
ƿ/i/l/l/_/_(CACCAA)
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', '_']
				version split: ['ƿ', 'i', 'l', 'l', '_']
				{'string': 'ƿ/i/l/l/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', '_']
				version split: ['ƿ', 'i', 'l', 'l', '_', '_']
				{'string': 'ƿ/i/l/l/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'l', '_', '_']
				{'string': 'ƿ/i/l/l/_/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				ANALYSING: will
					resolving (2)
					> version: w/i/l/l/_
					> version: w/i/l/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_', '_']
				adding dashed alternative: ['w', 'i', 'l', 'l', '_', '_']
				w/i/l/l/_(CACCA)
w/i/l/l/_(CACCA)
w/i/l/l/_/_(CACCAA)
w/i/l/l/_/_(CACCAA)
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', '_']
				version split: ['w', 'i', 'l', 'l', '_']
				{'string': 'w/i/l/l/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', '_']
				version split: ['w', 'i', 'l', 'l', '_', '_']
				{'string': 'w/i/l/l/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				version split: ['w', 'i', 'l', 'l', '_', '_']
				{'string': 'w/i/l/l/_/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (2)
					> version: ƿ/i/l/l/a
					> version: ƿ/i/l/l/a
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', 'a', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', 'a', '_']
				ƿ/i/l/l/a(CCCCV)
ƿ/i/l/l/a(CVCCV)
ƿ/i/l/l/a/_(CACCVA)
ƿ/i/l/l/a/_(CACCVA)
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ/i/l/l/a', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'l', 'l', 'a', '_']
				{'string': 'ƿ/i/l/l/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'a', '_']
				{'string': 'ƿ/i/l/l/a/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				ANALYSING: willa
					resolving (2)
					> version: w/i/l/l/a
					> version: w/i/l/l/a
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'l', 'a', '_']
				adding dashed alternative: ['w', 'i', 'l', 'l', 'a', '_']
				w/i/l/l/a(CCCCV)
w/i/l/l/a(CVCCV)
w/i/l/l/a/_(CACCVA)
w/i/l/l/a/_(CACCVA)
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w/i/l/l/a', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'l', 'l', 'a', '_']
				{'string': 'w/i/l/l/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				version split: ['w', 'i', 'l', 'l', 'a', '_']
				{'string': 'w/i/l/l/a/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((a))/((_))$'}
				ANALYSING: ƿille
					resolving (2)
					> version: ƿ/i/l/l/e
					> version: ƿ/i/l/l/e
					RESULT:  ['_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', 'e', '_']
				adding dashed alternative: ['ƿ', 'i', 'l', 'l', 'e', '_']
				ƿ/i/l/l/e(CCCCV)
ƿ/i/l/l/e(CVCCV)
ƿ/i/l/l/e/_(CACCVA)
ƿ/i/l/l/e/_(CACCVA)
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ/i/l/l/e', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'l', 'e', '_']
				{'string': 'ƿ/i/l/l/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				version split: ['ƿ', 'i', 'l', 'l', 'e', '_']
				{'string': 'ƿ/i/l/l/e/_', 'rgx': '((ƿ))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				ANALYSING: wille
					resolving (2)
					> version: w/i/l/l/e
					> version: w/i/l/l/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'i', 'l', 'l', 'e', '_']
				adding dashed alternative: ['w', 'i', 'l', 'l', 'e', '_']
				w/i/l/l/e(CCCCV)
w/i/l/l/e(CVCCV)
w/i/l/l/e/_(CACCVA)
w/i/l/l/e/_(CACCVA)
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w/i/l/l/e', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'l', 'l', 'e', '_']
				{'string': 'w/i/l/l/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				version split: ['w', 'i', 'l', 'l', 'e', '_']
				{'string': 'w/i/l/l/e/_', 'rgx': '((w))/((i))/((l)|(ll))/((l))/((e))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l/_/_
					> version: w/y/l/_/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', '_', '_', '_']
				w/y/l/_/_(CACAA)
w/y/l/_/_(CACAA)
w/y/l/_/_/_(CACAAA)
w/y/l/_/_/_(CACAAA)
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_']
				version split: ['w', 'y', 'l', '_', '_']
				{'string': 'w/y/l/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', '_', '_']
				version split: ['w', 'y', 'l', '_', '_', '_']
				{'string': 'w/y/l/_/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))/((_))$'}
				version split: ['w', 'y', 'l', '_', '_', '_']
				{'string': 'w/y/l/_/_/_', 'rgx': '((w))/((y))/((l))/((_))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (2)
					> version: w/y/l/l/_
					> version: w/y/l/l/_
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_', '_']
				adding dashed alternative: ['w', 'y', 'l', 'l', '_', '_']
				w/y/l/l/_(CACCA)
w/y/l/l/_(CACCA)
w/y/l/l/_/_(CACCAA)
w/y/l/l/_/_(CACCAA)
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', '_']
				version split: ['w', 'y', 'l', 'l', '_']
				{'string': 'w/y/l/l/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', '_']
				version split: ['w', 'y', 'l', 'l', '_', '_']
				{'string': 'w/y/l/l/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))/((_))$'}
				version split: ['w', 'y', 'l', 'l', '_', '_']
				{'string': 'w/y/l/l/_/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((_))/((_))$'}
				ANALYSING: wylle
					resolving (2)
					> version: w/y/l/l/e
					> version: w/y/l/l/e
					RESULT:  ['_']
				adding dashed alternative: ['w', 'y', 'l', 'l', 'e', '_']
				adding dashed alternative: ['w', 'y', 'l', 'l', 'e', '_']
				w/y/l/l/e(CCCCV)
w/y/l/l/e(CVCCV)
w/y/l/l/e/_(CACCVA)
w/y/l/l/e/_(CACCVA)
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w/y/l/l/e', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))/((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'l', 'l', 'e', '_']
				{'string': 'w/y/l/l/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))/((_))$'}
				version split: ['w', 'y', 'l', 'l', 'e', '_']
				{'string': 'w/y/l/l/e/_', 'rgx': '((w))/((y))/((l)|(ll))/((l))/((e))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['v', 'i', 'l', 'l', 'e', '_']
		only one version left: ['ƿ', 'i', 'l', '_', '_', '_']
		only one version left: ['w', 'i', 'l', '_', '_', '_']
		only one version left: ['ƿ', 'i', 'l', '_', 'e', '_']
		only one version left: ['w', 'i', 'l', '_', 'e', '_']
		only one version left: ['ƿ', 'i', 'l', 'l', '_', '_']
		only one version left: ['w', 'i', 'l', 'l', '_', '_']
		only one version left: ['ƿ', 'i', 'l', 'l', 'a', '_']
		only one version left: ['w', 'i', 'l', 'l', 'a', '_']
		only one version left: ['ƿ', 'i', 'l', 'l', 'e', '_']
		only one version left: ['w', 'i', 'l', 'l', 'e', '_']
		only one version left: ['w', 'y', 'l', '_', '_', '_']
		only one version left: ['w', 'y', 'l', 'l', '_', '_']
		only one version left: ['w', 'y', 'l', 'l', 'e', '_']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'a', 'n']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'e', 'n']
		SPLIT: ['w', 'i', 'l', 'l', 'e', 'n']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'e', 's']
		SPLIT: ['v', 'i', 'l', 'l', 'e', '_']
		['v', 'i', 'l', 'l', 'e', '_']
		['v', 'i', 'l', 'l', 'e', '_']
		SPLIT: ['ƿ', 'i', 'l', '_', '_', '_']
		['ƿ', 'i', 'l', '_', '_', '_']
		['ƿ', 'i', 'l', '_', '_', '_']
		SPLIT: ['w', 'i', 'l', '_', '_', '_']
		['w', 'i', 'l', '_', '_', '_']
		['w', 'i', 'l', '_', '_', '_']
		SPLIT: ['ƿ', 'i', 'l', '_', 'e', '_']
		['ƿ', 'i', 'l', '_', 'e', '_']
		['ƿ', 'i', 'l', '_', 'e', '_']
		SPLIT: ['w', 'i', 'l', '_', 'e', '_']
		['w', 'i', 'l', '_', 'e', '_']
		['w', 'i', 'l', '_', 'e', '_']
		SPLIT: ['ƿ', 'i', 'l', 'l', '_', '_']
		['ƿ', 'i', 'l', 'l', '_', '_']
		['ƿ', 'i', 'l', 'l', '_', '_']
		SPLIT: ['w', 'i', 'l', 'l', '_', '_']
		['w', 'i', 'l', 'l', '_', '_']
		['w', 'i', 'l', 'l', '_', '_']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'a', '_']
		['ƿ', 'i', 'l', 'l', 'a', '_']
		['ƿ', 'i', 'l', 'l', 'a', '_']
		SPLIT: ['w', 'i', 'l', 'l', 'a', '_']
		['w', 'i', 'l', 'l', 'a', '_']
		['w', 'i', 'l', 'l', 'a', '_']
		SPLIT: ['ƿ', 'i', 'l', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'l', 'e', '_']
		['ƿ', 'i', 'l', 'l', 'e', '_']
		SPLIT: ['w', 'i', 'l', 'l', 'e', '_']
		['w', 'i', 'l', 'l', 'e', '_']
		['w', 'i', 'l', 'l', 'e', '_']
		SPLIT: ['w', 'y', 'l', '_', '_', '_']
		['w', 'y', 'l', '_', '_', '_']
		['w', 'y', 'l', '_', '_', '_']
		SPLIT: ['w', 'y', 'l', 'l', '_', '_']
		['w', 'y', 'l', 'l', '_', '_']
		['w', 'y', 'l', 'l', '_', '_']
		SPLIT: ['w', 'y', 'l', 'l', 'e', '_']
		['w', 'y', 'l', 'l', 'e', '_']
		['w', 'y', 'l', 'l', 'e', '_']
		OVERVIEW: version for pattern CVCCVC

faulty splits: 0
ƿ | i | l | l | a | n
ƿ | i | l | l | e | n
w | i | l | l | e | n
ƿ | i | l | l | e | s
v | i | l | l | e | _
ƿ | i | l | _ | _ | _
w | i | l | _ | _ | _
ƿ | i | l | _ | e | _
w | i | l | _ | e | _
ƿ | i | l | l | _ | _
w | i | l | l | _ | _
ƿ | i | l | l | a | _
w | i | l | l | a | _
ƿ | i | l | l | e | _
w | i | l | l | e | _
w | y | l | _ | _ | _
w | y | l | l | _ | _
w | y | l | l | e | _
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	[[{'lit': 'll', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern VVCV is invalid
	Pattern CVCVC is valid
	Pattern CCCCV is invalid
	Pattern CVC is invalid
	Pattern CCCVC is valid
	Pattern CVCCV is valid
	Pattern CCCCVC is invalid
	Pattern CCCV is invalid
	Pattern CVCCVC is valid
	Pattern CCC is invalid
	Pattern VVCCV is valid
	Pattern CCCC is invalid
	Pattern CVCV is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: VVCCV
	Selection for pattern: VVCCV completed
	Making a version for pattern: VVCCV
			___VVCCV : 0___
				ANALYSING: ville
				adding littera based on matching pattern
				ANALYSING: ƿil
					resolving (2)
					> version: ƿ/i/l
					TRYING: ƿ
					> version: ƿ/i/l
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l']
				ƿ/i/l(CCC)
ƿ/i/l(CVC)
_/ƿ/i/l(ACAC)
_/ƿ/i/l(ACAC)
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['ƿ', 'i', 'l']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l']
				version split: ['_', 'ƿ', 'i', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: w/i/l
					TRYING: w
					> version: w/i/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l']
				adding dashed alternative: ['_', 'w', 'i', 'l']
				w/i/l(CCC)
w/i/l(CVC)
_/w/i/l(ACAC)
_/w/i/l(ACAC)
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['w', 'i', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l']
				version split: ['_', 'w', 'i', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: ƿ/i/l/e
					TRYING: ƿ
					> version: ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'e']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'e']
				ƿ/i/l/e(CCCV)
ƿ/i/l/e(CVCV)
_/ƿ/i/l/e(ACACV)
_/ƿ/i/l/e(ACACV)
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'e']
				version split: ['_', 'ƿ', 'i', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: w/i/l/e
					TRYING: w
					> version: w/i/l/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'e']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'e']
				w/i/l/e(CCCV)
w/i/l/e(CVCV)
_/w/i/l/e(ACACV)
_/w/i/l/e(ACACV)
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['w', 'i', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'e']
				version split: ['_', 'w', 'i', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/l/l
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					> version: ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll']
				ƿ/i/l/l(CCCC)
ƿ/i/l/l(CVCC)
ƿ/i/ll(CCC)
ƿ/i/ll(CVC)
_/ƿ/i/l/l(ACACC)
_/ƿ/i/l/l(ACACC)
_/ƿ/i/ll(ACAC)
_/ƿ/i/ll(ACAC)
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'l', 'l']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['ƿ', 'i', 'll']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll']
				version split: ['_', 'ƿ', 'i', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: will
					resolving (4)
					> version: w/i/l/l
					TRYING: w
					> version: w/i/l/l
					TRYING: w
					> version: w/i/ll
					TRYING: w
					> version: w/i/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', 'w', 'i', 'll']
				adding dashed alternative: ['_', 'w', 'i', 'll']
				w/i/l/l(CCCC)
w/i/l/l(CVCC)
w/i/ll(CCC)
w/i/ll(CVC)
_/w/i/l/l(ACACC)
_/w/i/l/l(ACACC)
_/w/i/ll(ACAC)
_/w/i/ll(ACAC)
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'l', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l']
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['w', 'i', 'll']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll']
				version split: ['_', 'w', 'i', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/l/l/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					> version: ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'a']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'a']
				ƿ/i/l/l/a(CCCCV)
ƿ/i/l/l/a(CVCCV)
ƿ/i/ll/a(CCCV)
ƿ/i/ll/a(CVCV)
_/ƿ/i/l/l/a(ACACCV)
_/ƿ/i/l/l/a(ACACCV)
_/ƿ/i/ll/a(ACACV)
_/ƿ/i/ll/a(ACACV)
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'l', 'l', 'a']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['ƿ', 'i', 'll', 'a']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: willa
					resolving (4)
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/l/l/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					> version: w/i/ll/a
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'a']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'a']
				w/i/l/l/a(CCCCV)
w/i/l/l/a(CVCCV)
w/i/ll/a(CCCV)
w/i/ll/a(CVCV)
_/w/i/l/l/a(ACACCV)
_/w/i/l/l/a(ACACCV)
_/w/i/ll/a(ACACV)
_/w/i/ll/a(ACACV)
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'l', 'l', 'a']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['w', 'i', 'll', 'a']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'a']
				version split: ['_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'a']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'a']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: ƿ/i/ll/a/n
					TRYING: ƿ
					> version: ƿ/i/ll/a/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				ƿ/i/l/l/a/n(CCCCVC)
ƿ/i/l/l/a/n(CVCCVC)
ƿ/i/ll/a/n(CCCVC)
ƿ/i/ll/a/n(CVCVC)
_/ƿ/i/l/l/a/n(ACACCVC)
_/ƿ/i/l/l/a/n(ACACCVC)
_/ƿ/i/ll/a/n(ACACVC)
_/ƿ/i/ll/a/n(ACACVC)
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a', 'n']
				version split: ['ƿ', 'i', 'll', 'a', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/l/l/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					> version: ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e']
				ƿ/i/l/l/e(CCCCV)
ƿ/i/l/l/e(CVCCV)
ƿ/i/ll/e(CCCV)
ƿ/i/ll/e(CVCV)
_/ƿ/i/l/l/e(ACACCV)
_/ƿ/i/l/l/e(ACACCV)
_/ƿ/i/ll/e(ACACV)
_/ƿ/i/ll/e(ACACV)
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'l', 'l', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['ƿ', 'i', 'll', 'e']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wille
					resolving (4)
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/l/l/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					> version: w/i/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'e']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'e']
				w/i/l/l/e(CCCCV)
w/i/l/l/e(CVCCV)
w/i/ll/e(CCCV)
w/i/ll/e(CVCV)
_/w/i/l/l/e(ACACCV)
_/w/i/l/l/e(ACACCV)
_/w/i/ll/e(ACACV)
_/w/i/ll/e(ACACV)
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['w', 'i', 'll', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e']
				version split: ['_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: ƿ/i/ll/e/n
					TRYING: ƿ
					> version: ƿ/i/ll/e/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				ƿ/i/l/l/e/n(CCCCVC)
ƿ/i/l/l/e/n(CVCCVC)
ƿ/i/ll/e/n(CCCVC)
ƿ/i/ll/e/n(CVCVC)
_/ƿ/i/l/l/e/n(ACACCVC)
_/ƿ/i/l/l/e/n(ACACCVC)
_/ƿ/i/ll/e/n(ACACVC)
_/ƿ/i/ll/e/n(ACACVC)
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 'n']
				version split: ['ƿ', 'i', 'll', 'e', 'n']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: willen
					resolving (4)
					> version: w/i/l/l/e/n
					TRYING: w
					> version: w/i/l/l/e/n
					TRYING: w
					> version: w/i/ll/e/n
					TRYING: w
					> version: w/i/ll/e/n
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', 'w', 'i', 'll', 'e', 'n']
				w/i/l/l/e/n(CCCCVC)
w/i/l/l/e/n(CVCCVC)
w/i/ll/e/n(CCCVC)
w/i/ll/e/n(CVCVC)
_/w/i/l/l/e/n(ACACCVC)
_/w/i/l/l/e/n(ACACCVC)
_/w/i/ll/e/n(ACACVC)
_/w/i/ll/e/n(ACACVC)
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e', 'n']
				version split: ['w', 'i', 'l', 'l', 'e', 'n']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'l', 'l', 'e', 'n']
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e', 'n']
				version split: ['w', 'i', 'll', 'e', 'n']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'i', 'll', 'e', 'n']
				version split: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: ƿ/i/ll/e/s
					TRYING: ƿ
					> version: ƿ/i/ll/e/s
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e', 's']
				adding dashed alternative: ['_', 'ƿ', 'i', 'll', 'e', 's']
				ƿ/i/l/l/e/s(CCCCVC)
ƿ/i/l/l/e/s(CVCCVC)
ƿ/i/ll/e/s(CCCVC)
ƿ/i/ll/e/s(CVCVC)
_/ƿ/i/l/l/e/s(ACACCVC)
_/ƿ/i/l/l/e/s(ACACCVC)
_/ƿ/i/ll/e/s(ACACVC)
_/ƿ/i/ll/e/s(ACACVC)
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 's']
				version split: ['ƿ', 'i', 'll', 'e', 's']
				{'string': 'ƿ', 'rgx': '((_))$'}
				_____REMOVING________['ƿ', 'i', 'll', 'e', 's']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: w/y/l
					TRYING: w
					> version: w/y/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'y', 'l']
				adding dashed alternative: ['_', 'w', 'y', 'l']
				w/y/l(CCC)
w/y/l(CVC)
_/w/y/l(ACAC)
_/w/y/l(ACAC)
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['w', 'y', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l']
				version split: ['_', 'w', 'y', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'l']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: w/y/l/l
					TRYING: w
					> version: w/y/l/l
					TRYING: w
					> version: w/y/ll
					TRYING: w
					> version: w/y/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', 'w', 'y', 'll']
				adding dashed alternative: ['_', 'w', 'y', 'll']
				w/y/l/l(CCCC)
w/y/l/l(CVCC)
w/y/ll(CCC)
w/y/ll(CVC)
_/w/y/l/l(ACACC)
_/w/y/l/l(ACACC)
_/w/y/ll(ACAC)
_/w/y/ll(ACAC)
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'l', 'l']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l']
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['w', 'y', 'll']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'll']
				version split: ['_', 'w', 'y', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'l', 'l']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'll']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'll']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/l/l/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					> version: w/y/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', 'w', 'y', 'll', 'e']
				adding dashed alternative: ['_', 'w', 'y', 'll', 'e']
				w/y/l/l/e(CCCCV)
w/y/l/l/e(CVCCV)
w/y/ll/e(CCCV)
w/y/ll/e(CVCV)
_/w/y/l/l/e(ACACCV)
_/w/y/l/l/e(ACACCV)
_/w/y/ll/e(ACACV)
_/w/y/ll/e(ACACV)
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'l', 'l', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'l', 'l', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['w', 'y', 'll', 'e']
				{'string': 'w', 'rgx': '((_))$'}
				_____REMOVING________['w', 'y', 'll', 'e']
				version split: ['_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'w', 'y', 'll', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___VVCCV : 1___
				ANALYSING: ville
				adding littera based on matching pattern
				ANALYSING: ƿil
					resolving (2)
					> version: _/ƿ/i/l
					TRYING: ƿ
					> version: _/ƿ/i/l
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l']
				_/ƿ/i/l(ACAC)
_/ƿ/i/l(ACAC)
_/_/ƿ/i/l(AACAC)
_/_/ƿ/i/l(AACAC)
				version split: ['_', 'ƿ', 'i', 'l']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l']
				version split: ['_', 'ƿ', 'i', 'l']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l']
				version split: ['_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: _/w/i/l
					TRYING: w
					> version: _/w/i/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l']
				_/w/i/l(ACAC)
_/w/i/l(ACAC)
_/_/w/i/l(AACAC)
_/_/w/i/l(AACAC)
				version split: ['_', 'w', 'i', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l']
				version split: ['_', 'w', 'i', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l']
				version split: ['_', '_', 'w', 'i', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: _/ƿ/i/l/e
					TRYING: ƿ
					> version: _/ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'e']
				_/ƿ/i/l/e(ACACV)
_/ƿ/i/l/e(ACACV)
_/_/ƿ/i/l/e(AACACV)
_/_/ƿ/i/l/e(AACACV)
				version split: ['_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: _/w/i/l/e
					TRYING: w
					> version: _/w/i/l/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'e']
				_/w/i/l/e(ACACV)
_/w/i/l/e(ACACV)
_/_/w/i/l/e(AACACV)
_/_/w/i/l/e(AACACV)
				version split: ['_', 'w', 'i', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'e']
				version split: ['_', 'w', 'i', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: _/ƿ/i/l/l
					TRYING: ƿ
					> version: _/ƿ/i/l/l
					TRYING: ƿ
					> version: _/ƿ/i/ll
					TRYING: ƿ
					> version: _/ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll']
				_/ƿ/i/l/l(ACACC)
_/ƿ/i/l/l(ACACC)
_/ƿ/i/ll(ACAC)
_/ƿ/i/ll(ACAC)
_/_/ƿ/i/l/l(AACACC)
_/_/ƿ/i/l/l(AACACC)
_/_/ƿ/i/ll(AACAC)
_/_/ƿ/i/ll(AACAC)
				version split: ['_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', 'ƿ', 'i', 'll']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll']
				version split: ['_', 'ƿ', 'i', 'll']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: _/w/i/l/l
					TRYING: w
					> version: _/w/i/l/l
					TRYING: w
					> version: _/w/i/ll
					TRYING: w
					> version: _/w/i/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll']
				_/w/i/l/l(ACACC)
_/w/i/l/l(ACACC)
_/w/i/ll(ACAC)
_/w/i/ll(ACAC)
_/_/w/i/l/l(AACACC)
_/_/w/i/l/l(AACACC)
_/_/w/i/ll(AACAC)
_/_/w/i/ll(AACAC)
				version split: ['_', 'w', 'i', 'l', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l']
				version split: ['_', 'w', 'i', 'l', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l']
				version split: ['_', 'w', 'i', 'll']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll']
				version split: ['_', 'w', 'i', 'll']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll']
				version split: ['_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: _/ƿ/i/l/l/a
					TRYING: ƿ
					> version: _/ƿ/i/l/l/a
					TRYING: ƿ
					> version: _/ƿ/i/ll/a
					TRYING: ƿ
					> version: _/ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'a']
				_/ƿ/i/l/l/a(ACACCV)
_/ƿ/i/l/l/a(ACACCV)
_/ƿ/i/ll/a(ACACV)
_/ƿ/i/ll/a(ACACV)
_/_/ƿ/i/l/l/a(AACACCV)
_/_/ƿ/i/l/l/a(AACACCV)
_/_/ƿ/i/ll/a(AACACV)
_/_/ƿ/i/ll/a(AACACV)
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: willa
					resolving (4)
					> version: _/w/i/l/l/a
					TRYING: w
					> version: _/w/i/l/l/a
					TRYING: w
					> version: _/w/i/ll/a
					TRYING: w
					> version: _/w/i/ll/a
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'a']
				_/w/i/l/l/a(ACACCV)
_/w/i/l/l/a(ACACCV)
_/w/i/ll/a(ACACV)
_/w/i/ll/a(ACACV)
_/_/w/i/l/l/a(AACACCV)
_/_/w/i/l/l/a(AACACCV)
_/_/w/i/ll/a(AACACV)
_/_/w/i/ll/a(AACACV)
				version split: ['_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', 'w', 'i', 'll', 'a']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'a']
				version split: ['_', 'w', 'i', 'll', 'a']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: _/ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: _/ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: _/ƿ/i/ll/a/n
					TRYING: ƿ
					> version: _/ƿ/i/ll/a/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				_/ƿ/i/l/l/a/n(ACACCVC)
_/ƿ/i/l/l/a/n(ACACCVC)
_/ƿ/i/ll/a/n(ACACVC)
_/ƿ/i/ll/a/n(ACACVC)
_/_/ƿ/i/l/l/a/n(AACACCVC)
_/_/ƿ/i/l/l/a/n(AACACCVC)
_/_/ƿ/i/ll/a/n(AACACVC)
_/_/ƿ/i/ll/a/n(AACACVC)
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: _/ƿ/i/l/l/e
					TRYING: ƿ
					> version: _/ƿ/i/l/l/e
					TRYING: ƿ
					> version: _/ƿ/i/ll/e
					TRYING: ƿ
					> version: _/ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e']
				_/ƿ/i/l/l/e(ACACCV)
_/ƿ/i/l/l/e(ACACCV)
_/ƿ/i/ll/e(ACACV)
_/ƿ/i/ll/e(ACACV)
_/_/ƿ/i/l/l/e(AACACCV)
_/_/ƿ/i/l/l/e(AACACCV)
_/_/ƿ/i/ll/e(AACACV)
_/_/ƿ/i/ll/e(AACACV)
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wille
					resolving (4)
					> version: _/w/i/l/l/e
					TRYING: w
					> version: _/w/i/l/l/e
					TRYING: w
					> version: _/w/i/ll/e
					TRYING: w
					> version: _/w/i/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'e']
				_/w/i/l/l/e(ACACCV)
_/w/i/l/l/e(ACACCV)
_/w/i/ll/e(ACACV)
_/w/i/ll/e(ACACV)
_/_/w/i/l/l/e(AACACCV)
_/_/w/i/l/l/e(AACACCV)
_/_/w/i/ll/e(AACACV)
_/_/w/i/ll/e(AACACV)
				version split: ['_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', 'w', 'i', 'll', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'e']
				version split: ['_', 'w', 'i', 'll', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: _/ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: _/ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: _/ƿ/i/ll/e/n
					TRYING: ƿ
					> version: _/ƿ/i/ll/e/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				_/ƿ/i/l/l/e/n(ACACCVC)
_/ƿ/i/l/l/e/n(ACACCVC)
_/ƿ/i/ll/e/n(ACACVC)
_/ƿ/i/ll/e/n(ACACVC)
_/_/ƿ/i/l/l/e/n(AACACCVC)
_/_/ƿ/i/l/l/e/n(AACACCVC)
_/_/ƿ/i/ll/e/n(AACACVC)
_/_/ƿ/i/ll/e/n(AACACVC)
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: willen
					resolving (4)
					> version: _/w/i/l/l/e/n
					TRYING: w
					> version: _/w/i/l/l/e/n
					TRYING: w
					> version: _/w/i/ll/e/n
					TRYING: w
					> version: _/w/i/ll/e/n
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				_/w/i/l/l/e/n(ACACCVC)
_/w/i/l/l/e/n(ACACCVC)
_/w/i/ll/e/n(ACACVC)
_/w/i/ll/e/n(ACACVC)
_/_/w/i/l/l/e/n(AACACCVC)
_/_/w/i/l/l/e/n(AACACCVC)
_/_/w/i/ll/e/n(AACACVC)
_/_/w/i/ll/e/n(AACACVC)
				version split: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: _/ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: _/ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: _/ƿ/i/ll/e/s
					TRYING: ƿ
					> version: _/ƿ/i/ll/e/s
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				adding dashed alternative: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				_/ƿ/i/l/l/e/s(ACACCVC)
_/ƿ/i/l/l/e/s(ACACCVC)
_/ƿ/i/ll/e/s(ACACVC)
_/ƿ/i/ll/e/s(ACACVC)
_/_/ƿ/i/l/l/e/s(AACACCVC)
_/_/ƿ/i/l/l/e/s(AACACCVC)
_/_/ƿ/i/ll/e/s(AACACVC)
_/_/ƿ/i/ll/e/s(AACACVC)
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/ƿ', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: _/w/y/l
					TRYING: w
					> version: _/w/y/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l']
				_/w/y/l(ACAC)
_/w/y/l(ACAC)
_/_/w/y/l(AACAC)
_/_/w/y/l(AACAC)
				version split: ['_', 'w', 'y', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l']
				version split: ['_', 'w', 'y', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l']
				version split: ['_', '_', 'w', 'y', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: _/w/y/l/l
					TRYING: w
					> version: _/w/y/l/l
					TRYING: w
					> version: _/w/y/ll
					TRYING: w
					> version: _/w/y/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', 'w', 'y', 'll']
				adding dashed alternative: ['_', '_', 'w', 'y', 'll']
				_/w/y/l/l(ACACC)
_/w/y/l/l(ACACC)
_/w/y/ll(ACAC)
_/w/y/ll(ACAC)
_/_/w/y/l/l(AACACC)
_/_/w/y/l/l(AACACC)
_/_/w/y/ll(AACAC)
_/_/w/y/ll(AACAC)
				version split: ['_', 'w', 'y', 'l', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l', 'l']
				version split: ['_', 'w', 'y', 'l', 'l']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l', 'l']
				version split: ['_', 'w', 'y', 'll']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'll']
				version split: ['_', 'w', 'y', 'll']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'll']
				version split: ['_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'll']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: _/w/y/l/l/e
					TRYING: w
					> version: _/w/y/l/l/e
					TRYING: w
					> version: _/w/y/ll/e
					TRYING: w
					> version: _/w/y/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', 'w', 'y', 'll', 'e']
				adding dashed alternative: ['_', '_', 'w', 'y', 'll', 'e']
				_/w/y/l/l/e(ACACCV)
_/w/y/l/l/e(ACACCV)
_/w/y/ll/e(ACACV)
_/w/y/ll/e(ACACV)
_/_/w/y/l/l/e(AACACCV)
_/_/w/y/l/l/e(AACACCV)
_/_/w/y/ll/e(AACACV)
_/_/w/y/ll/e(AACACV)
				version split: ['_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', 'w', 'y', 'll', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'll', 'e']
				version split: ['_', 'w', 'y', 'll', 'e']
				{'string': '_/w', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___VVCCV : 2___
				ANALYSING: ville
				adding littera based on matching pattern
				ANALYSING: ƿil
					resolving (2)
					> version: _/_/ƿ/i/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l
					> version: _/_/ƿ/i/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l']
				_/_/ƿ/i/l(AACAC)
_/_/ƿ/i/l(AACAC)
_/_/_/ƿ/i/l(AAACAC)
_/_/_/ƿ/i/l(AAACAC)
				version split: ['_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: _/_/w/i/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l']
				_/_/w/i/l(AACAC)
_/_/w/i/l(AACAC)
_/_/_/w/i/l(AAACAC)
_/_/_/w/i/l(AAACAC)
				version split: ['_', '_', 'w', 'i', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l']
				version split: ['_', '_', 'w', 'i', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: _/_/ƿ/i/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				_/_/ƿ/i/l/e(AACACV)
_/_/ƿ/i/l/e(AACACV)
_/_/_/ƿ/i/l/e(AAACACV)
_/_/_/ƿ/i/l/e(AAACACV)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: _/_/w/i/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'e']
				_/_/w/i/l/e(AACACV)
_/_/w/i/l/e(AACACV)
_/_/_/w/i/l/e(AAACACV)
_/_/_/w/i/l/e(AAACACV)
				version split: ['_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: _/_/ƿ/i/l/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll']
				_/_/ƿ/i/l/l(AACACC)
_/_/ƿ/i/l/l(AACACC)
_/_/ƿ/i/ll(AACAC)
_/_/ƿ/i/ll(AACAC)
_/_/_/ƿ/i/l/l(AAACACC)
_/_/_/ƿ/i/l/l(AAACACC)
_/_/_/ƿ/i/ll(AAACAC)
_/_/_/ƿ/i/ll(AAACAC)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: _/_/w/i/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll']
				_/_/w/i/l/l(AACACC)
_/_/w/i/l/l(AACACC)
_/_/w/i/ll(AACAC)
_/_/w/i/ll(AACAC)
_/_/_/w/i/l/l(AAACACC)
_/_/_/w/i/l/l(AAACACC)
_/_/_/w/i/ll(AAACAC)
_/_/_/w/i/ll(AAACAC)
				version split: ['_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', 'w', 'i', 'll']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll']
				version split: ['_', '_', 'w', 'i', 'll']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: _/_/ƿ/i/l/l/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				_/_/ƿ/i/l/l/a(AACACCV)
_/_/ƿ/i/l/l/a(AACACCV)
_/_/ƿ/i/ll/a(AACACV)
_/_/ƿ/i/ll/a(AACACV)
_/_/_/ƿ/i/l/l/a(AAACACCV)
_/_/_/ƿ/i/l/l/a(AAACACCV)
_/_/_/ƿ/i/ll/a(AAACACV)
_/_/_/ƿ/i/ll/a(AAACACV)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: willa
					resolving (4)
					> version: _/_/w/i/l/l/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l/l/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'a']
				_/_/w/i/l/l/a(AACACCV)
_/_/w/i/l/l/a(AACACCV)
_/_/w/i/ll/a(AACACV)
_/_/w/i/ll/a(AACACV)
_/_/_/w/i/l/l/a(AAACACCV)
_/_/_/w/i/l/l/a(AAACACCV)
_/_/_/w/i/ll/a(AAACACV)
_/_/_/w/i/ll/a(AAACACV)
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: _/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				_/_/ƿ/i/l/l/a/n(AACACCVC)
_/_/ƿ/i/l/l/a/n(AACACCVC)
_/_/ƿ/i/ll/a/n(AACACVC)
_/_/ƿ/i/ll/a/n(AACACVC)
_/_/_/ƿ/i/l/l/a/n(AAACACCVC)
_/_/_/ƿ/i/l/l/a/n(AAACACCVC)
_/_/_/ƿ/i/ll/a/n(AAACACVC)
_/_/_/ƿ/i/ll/a/n(AAACACVC)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: _/_/ƿ/i/l/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				_/_/ƿ/i/l/l/e(AACACCV)
_/_/ƿ/i/l/l/e(AACACCV)
_/_/ƿ/i/ll/e(AACACV)
_/_/ƿ/i/ll/e(AACACV)
_/_/_/ƿ/i/l/l/e(AAACACCV)
_/_/_/ƿ/i/l/l/e(AAACACCV)
_/_/_/ƿ/i/ll/e(AAACACV)
_/_/_/ƿ/i/ll/e(AAACACV)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wille
					resolving (4)
					> version: _/_/w/i/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'e']
				_/_/w/i/l/l/e(AACACCV)
_/_/w/i/l/l/e(AACACCV)
_/_/w/i/ll/e(AACACV)
_/_/w/i/ll/e(AACACV)
_/_/_/w/i/l/l/e(AAACACCV)
_/_/_/w/i/l/l/e(AAACACCV)
_/_/_/w/i/ll/e(AAACACV)
_/_/_/w/i/ll/e(AAACACV)
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: _/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				_/_/ƿ/i/l/l/e/n(AACACCVC)
_/_/ƿ/i/l/l/e/n(AACACCVC)
_/_/ƿ/i/ll/e/n(AACACVC)
_/_/ƿ/i/ll/e/n(AACACVC)
_/_/_/ƿ/i/l/l/e/n(AAACACCVC)
_/_/_/ƿ/i/l/l/e/n(AAACACCVC)
_/_/_/ƿ/i/ll/e/n(AAACACVC)
_/_/_/ƿ/i/ll/e/n(AAACACVC)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: willen
					resolving (4)
					> version: _/_/w/i/l/l/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/l/l/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/i/ll/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				_/_/w/i/l/l/e/n(AACACCVC)
_/_/w/i/l/l/e/n(AACACCVC)
_/_/w/i/ll/e/n(AACACVC)
_/_/w/i/ll/e/n(AACACVC)
_/_/_/w/i/l/l/e/n(AAACACCVC)
_/_/_/w/i/l/l/e/n(AAACACCVC)
_/_/_/w/i/ll/e/n(AAACACVC)
_/_/_/w/i/ll/e/n(AAACACVC)
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: _/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/ƿ/i/ll/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				adding dashed alternative: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				_/_/ƿ/i/l/l/e/s(AACACCVC)
_/_/ƿ/i/l/l/e/s(AACACCVC)
_/_/ƿ/i/ll/e/s(AACACVC)
_/_/ƿ/i/ll/e/s(AACACVC)
_/_/_/ƿ/i/l/l/e/s(AAACACCVC)
_/_/_/ƿ/i/l/l/e/s(AAACACCVC)
_/_/_/ƿ/i/ll/e/s(AAACACVC)
_/_/_/ƿ/i/ll/e/s(AAACACVC)
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/ƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: _/_/w/y/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l']
				_/_/w/y/l(AACAC)
_/_/w/y/l(AACAC)
_/_/_/w/y/l(AAACAC)
_/_/_/w/y/l(AAACAC)
				version split: ['_', '_', 'w', 'y', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l']
				version split: ['_', '_', 'w', 'y', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: _/_/w/y/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'll']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'll']
				_/_/w/y/l/l(AACACC)
_/_/w/y/l/l(AACACC)
_/_/w/y/ll(AACAC)
_/_/w/y/ll(AACAC)
_/_/_/w/y/l/l(AAACACC)
_/_/_/w/y/l/l(AAACACC)
_/_/_/w/y/ll(AAACAC)
_/_/_/w/y/ll(AAACAC)
				version split: ['_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', 'w', 'y', 'll']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'll']
				version split: ['_', '_', 'w', 'y', 'll']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: _/_/w/y/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/w/y/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', 'w', 'y', 'll', 'e']
				_/_/w/y/l/l/e(AACACCV)
_/_/w/y/l/l/e(AACACCV)
_/_/w/y/ll/e(AACACV)
_/_/w/y/ll/e(AACACV)
_/_/_/w/y/l/l/e(AAACACCV)
_/_/_/w/y/l/l/e(AAACACCV)
_/_/_/w/y/ll/e(AAACACV)
_/_/_/w/y/ll/e(AAACACV)
				version split: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___VVCCV : 3___
				ANALYSING: ville
				adding littera based on matching pattern
				ANALYSING: ƿil
					resolving (2)
					> version: _/_/_/ƿ/i/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l
					> version: _/_/_/ƿ/i/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				_/_/_/ƿ/i/l(AAACAC)
_/_/_/ƿ/i/l(AAACAC)
_/_/_/_/ƿ/i/l(AAAACAC)
_/_/_/_/ƿ/i/l(AAAACAC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wil
					resolving (2)
					> version: _/_/_/w/i/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l']
				_/_/_/w/i/l(AAACAC)
_/_/_/w/i/l(AAACAC)
_/_/_/_/w/i/l(AAAACAC)
_/_/_/_/w/i/l(AAAACAC)
				version split: ['_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿile
					resolving (2)
					> version: _/_/_/ƿ/i/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				_/_/_/ƿ/i/l/e(AAACACV)
_/_/_/ƿ/i/l/e(AAACACV)
_/_/_/_/ƿ/i/l/e(AAAACACV)
_/_/_/_/ƿ/i/l/e(AAAACACV)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wile
					resolving (2)
					> version: _/_/_/w/i/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				_/_/_/w/i/l/e(AAACACV)
_/_/_/w/i/l/e(AAACACV)
_/_/_/_/w/i/l/e(AAAACACV)
_/_/_/_/w/i/l/e(AAAACACV)
				version split: ['_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿill
					resolving (4)
					> version: _/_/_/ƿ/i/l/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				_/_/_/ƿ/i/l/l(AAACACC)
_/_/_/ƿ/i/l/l(AAACACC)
_/_/_/ƿ/i/ll(AAACAC)
_/_/_/ƿ/i/ll(AAACAC)
_/_/_/_/ƿ/i/l/l(AAAACACC)
_/_/_/_/ƿ/i/l/l(AAAACACC)
_/_/_/_/ƿ/i/ll(AAAACAC)
_/_/_/_/ƿ/i/ll(AAAACAC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: will
					resolving (4)
					> version: _/_/_/w/i/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll']
				_/_/_/w/i/l/l(AAACACC)
_/_/_/w/i/l/l(AAACACC)
_/_/_/w/i/ll(AAACAC)
_/_/_/w/i/ll(AAACAC)
_/_/_/_/w/i/l/l(AAAACACC)
_/_/_/_/w/i/l/l(AAAACACC)
_/_/_/_/w/i/ll(AAAACAC)
_/_/_/_/w/i/ll(AAAACAC)
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿilla
					resolving (4)
					> version: _/_/_/ƿ/i/l/l/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/a
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				_/_/_/ƿ/i/l/l/a(AAACACCV)
_/_/_/ƿ/i/l/l/a(AAACACCV)
_/_/_/ƿ/i/ll/a(AAACACV)
_/_/_/ƿ/i/ll/a(AAACACV)
_/_/_/_/ƿ/i/l/l/a(AAAACACCV)
_/_/_/_/ƿ/i/l/l/a(AAAACACCV)
_/_/_/_/ƿ/i/ll/a(AAAACACV)
_/_/_/_/ƿ/i/ll/a(AAAACACV)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: willa
					resolving (4)
					> version: _/_/_/w/i/l/l/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l/l/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/a
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				_/_/_/w/i/l/l/a(AAACACCV)
_/_/_/w/i/l/l/a(AAACACCV)
_/_/_/w/i/ll/a(AAACACV)
_/_/_/w/i/ll/a(AAACACV)
_/_/_/_/w/i/l/l/a(AAAACACCV)
_/_/_/_/w/i/l/l/a(AAAACACCV)
_/_/_/_/w/i/ll/a(AAAACACV)
_/_/_/_/w/i/ll/a(AAAACACV)
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿillan
					resolving (4)
					> version: _/_/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/a/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				_/_/_/ƿ/i/l/l/a/n(AAACACCVC)
_/_/_/ƿ/i/l/l/a/n(AAACACCVC)
_/_/_/ƿ/i/ll/a/n(AAACACVC)
_/_/_/ƿ/i/ll/a/n(AAACACVC)
_/_/_/_/ƿ/i/l/l/a/n(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/a/n(AAAACACCVC)
_/_/_/_/ƿ/i/ll/a/n(AAAACACVC)
_/_/_/_/ƿ/i/ll/a/n(AAAACACVC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿille
					resolving (4)
					> version: _/_/_/ƿ/i/l/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				_/_/_/ƿ/i/l/l/e(AAACACCV)
_/_/_/ƿ/i/l/l/e(AAACACCV)
_/_/_/ƿ/i/ll/e(AAACACV)
_/_/_/ƿ/i/ll/e(AAACACV)
_/_/_/_/ƿ/i/l/l/e(AAAACACCV)
_/_/_/_/ƿ/i/l/l/e(AAAACACCV)
_/_/_/_/ƿ/i/ll/e(AAAACACV)
_/_/_/_/ƿ/i/ll/e(AAAACACV)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wille
					resolving (4)
					> version: _/_/_/w/i/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				_/_/_/w/i/l/l/e(AAACACCV)
_/_/_/w/i/l/l/e(AAACACCV)
_/_/_/w/i/ll/e(AAACACV)
_/_/_/w/i/ll/e(AAACACV)
_/_/_/_/w/i/l/l/e(AAAACACCV)
_/_/_/_/w/i/l/l/e(AAAACACCV)
_/_/_/_/w/i/ll/e(AAAACACV)
_/_/_/_/w/i/ll/e(AAAACACV)
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿillen
					resolving (4)
					> version: _/_/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e/n
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				_/_/_/ƿ/i/l/l/e/n(AAACACCVC)
_/_/_/ƿ/i/l/l/e/n(AAACACCVC)
_/_/_/ƿ/i/ll/e/n(AAACACVC)
_/_/_/ƿ/i/ll/e/n(AAACACVC)
_/_/_/_/ƿ/i/l/l/e/n(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/e/n(AAAACACCVC)
_/_/_/_/ƿ/i/ll/e/n(AAAACACVC)
_/_/_/_/ƿ/i/ll/e/n(AAAACACVC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: willen
					resolving (4)
					> version: _/_/_/w/i/l/l/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/l/l/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/i/ll/e/n
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				_/_/_/w/i/l/l/e/n(AAACACCVC)
_/_/_/w/i/l/l/e/n(AAACACCVC)
_/_/_/w/i/ll/e/n(AAACACVC)
_/_/_/w/i/ll/e/n(AAACACVC)
_/_/_/_/w/i/l/l/e/n(AAAACACCVC)
_/_/_/_/w/i/l/l/e/n(AAAACACCVC)
_/_/_/_/w/i/ll/e/n(AAAACACVC)
_/_/_/_/w/i/ll/e/n(AAAACACVC)
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: ƿilles
					resolving (4)
					> version: _/_/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					> version: _/_/_/ƿ/i/ll/e/s
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, l, _
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				_/_/_/ƿ/i/l/l/e/s(AAACACCVC)
_/_/_/ƿ/i/l/l/e/s(AAACACCVC)
_/_/_/ƿ/i/ll/e/s(AAACACVC)
_/_/_/ƿ/i/ll/e/s(AAACACVC)
_/_/_/_/ƿ/i/l/l/e/s(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/e/s(AAAACACCVC)
_/_/_/_/ƿ/i/ll/e/s(AAAACACVC)
_/_/_/_/ƿ/i/ll/e/s(AAAACACVC)
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wyl
					resolving (2)
					> version: _/_/_/w/y/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l']
				_/_/_/w/y/l(AAACAC)
_/_/_/w/y/l(AAACAC)
_/_/_/_/w/y/l(AAAACAC)
_/_/_/_/w/y/l(AAAACAC)
				version split: ['_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wyll
					resolving (4)
					> version: _/_/_/w/y/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/l/l
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/ll
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'll']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'll']
				_/_/_/w/y/l/l(AAACACC)
_/_/_/w/y/l/l(AAACACC)
_/_/_/w/y/ll(AAACAC)
_/_/_/w/y/ll(AAACAC)
_/_/_/_/w/y/l/l(AAAACACC)
_/_/_/_/w/y/l/l(AAAACACC)
_/_/_/_/w/y/ll(AAAACAC)
_/_/_/_/w/y/ll(AAAACAC)
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				ANALYSING: wylle
					resolving (4)
					> version: _/_/_/w/y/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/l/l/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					> version: _/_/_/w/y/ll/e
					TRYING: w
					adding blocked set: C = C >> l, _, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				_/_/_/w/y/l/l/e(AAACACCV)
_/_/_/w/y/l/l/e(AAACACCV)
_/_/_/w/y/ll/e(AAACACV)
_/_/_/w/y/ll/e(AAACACV)
_/_/_/_/w/y/l/l/e(AAAACACCV)
_/_/_/_/w/y/l/l/e(AAAACACCV)
_/_/_/_/w/y/ll/e(AAAACACV)
_/_/_/_/w/y/ll/e(AAAACACV)
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
				version split: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_', 'rgx': '((_))/((_))/((_))/((_))$'}
			___VVCCV : 4___
				ANALYSING: ville
				adding littera based on matching pattern
				ANALYSING: ƿil
					resolving (2)
					> version: _/_/_/_/ƿ/i/l
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				_/_/_/_/ƿ/i/l(AAAACAC)
_/_/_/_/ƿ/i/l(AAAACAC)
_/_/_/_/_/ƿ/i/l(AAAAACAC)
_/_/_/_/_/ƿ/i/l(AAAAACAC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l']
				ANALYSING: wil
					resolving (2)
					> version: _/_/_/_/w/i/l
					TRYING: w
					> version: _/_/_/_/w/i/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l']
				_/_/_/_/w/i/l(AAAACAC)
_/_/_/_/w/i/l(AAAACAC)
_/_/_/_/_/w/i/l(AAAAACAC)
_/_/_/_/_/w/i/l(AAAAACAC)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l']
				ANALYSING: ƿile
					resolving (2)
					> version: _/_/_/_/ƿ/i/l/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				_/_/_/_/ƿ/i/l/e(AAAACACV)
_/_/_/_/ƿ/i/l/e(AAAACACV)
_/_/_/_/_/ƿ/i/l/e(AAAAACACV)
_/_/_/_/_/ƿ/i/l/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'e']
				ANALYSING: wile
					resolving (2)
					> version: _/_/_/_/w/i/l/e
					TRYING: w
					> version: _/_/_/_/w/i/l/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				_/_/_/_/w/i/l/e(AAAACACV)
_/_/_/_/w/i/l/e(AAAACACV)
_/_/_/_/_/w/i/l/e(AAAAACACV)
_/_/_/_/_/w/i/l/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'e']
				ANALYSING: ƿill
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				_/_/_/_/ƿ/i/l/l(AAAACACC)
_/_/_/_/ƿ/i/l/l(AAAACACC)
_/_/_/_/ƿ/i/ll(AAAACAC)
_/_/_/_/ƿ/i/ll(AAAACAC)
_/_/_/_/_/ƿ/i/l/l(AAAAACACC)
_/_/_/_/_/ƿ/i/l/l(AAAAACACC)
_/_/_/_/_/ƿ/i/ll(AAAAACAC)
_/_/_/_/_/ƿ/i/ll(AAAAACAC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll']
				ANALYSING: will
					resolving (4)
					> version: _/_/_/_/w/i/l/l
					TRYING: w
					> version: _/_/_/_/w/i/l/l
					TRYING: w
					> version: _/_/_/_/w/i/ll
					TRYING: w
					> version: _/_/_/_/w/i/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll']
				_/_/_/_/w/i/l/l(AAAACACC)
_/_/_/_/w/i/l/l(AAAACACC)
_/_/_/_/w/i/ll(AAAACAC)
_/_/_/_/w/i/ll(AAAACAC)
_/_/_/_/_/w/i/l/l(AAAAACACC)
_/_/_/_/_/w/i/l/l(AAAAACACC)
_/_/_/_/_/w/i/ll(AAAAACAC)
_/_/_/_/_/w/i/ll(AAAAACAC)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll']
				ANALYSING: ƿilla
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l/a
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l/a
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/a
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/a
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				_/_/_/_/ƿ/i/l/l/a(AAAACACCV)
_/_/_/_/ƿ/i/l/l/a(AAAACACCV)
_/_/_/_/ƿ/i/ll/a(AAAACACV)
_/_/_/_/ƿ/i/ll/a(AAAACACV)
_/_/_/_/_/ƿ/i/l/l/a(AAAAACACCV)
_/_/_/_/_/ƿ/i/l/l/a(AAAAACACCV)
_/_/_/_/_/ƿ/i/ll/a(AAAAACACV)
_/_/_/_/_/ƿ/i/ll/a(AAAAACACV)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a']
				ANALYSING: willa
					resolving (4)
					> version: _/_/_/_/w/i/l/l/a
					TRYING: w
					> version: _/_/_/_/w/i/l/l/a
					TRYING: w
					> version: _/_/_/_/w/i/ll/a
					TRYING: w
					> version: _/_/_/_/w/i/ll/a
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				_/_/_/_/w/i/l/l/a(AAAACACCV)
_/_/_/_/w/i/l/l/a(AAAACACCV)
_/_/_/_/w/i/ll/a(AAAACACV)
_/_/_/_/w/i/ll/a(AAAACACV)
_/_/_/_/_/w/i/l/l/a(AAAAACACCV)
_/_/_/_/_/w/i/l/l/a(AAAAACACCV)
_/_/_/_/_/w/i/ll/a(AAAAACACV)
_/_/_/_/_/w/i/ll/a(AAAAACACV)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'a']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'a']
				ANALYSING: ƿillan
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l/a/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/a/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/a/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				_/_/_/_/ƿ/i/l/l/a/n(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/a/n(AAAACACCVC)
_/_/_/_/ƿ/i/ll/a/n(AAAACACVC)
_/_/_/_/ƿ/i/ll/a/n(AAAACACVC)
_/_/_/_/_/ƿ/i/l/l/a/n(AAAAACACCVC)
_/_/_/_/_/ƿ/i/l/l/a/n(AAAAACACCVC)
_/_/_/_/_/ƿ/i/ll/a/n(AAAAACACVC)
_/_/_/_/_/ƿ/i/ll/a/n(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'a', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'a', 'n']
				ANALYSING: ƿille
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				_/_/_/_/ƿ/i/l/l/e(AAAACACCV)
_/_/_/_/ƿ/i/l/l/e(AAAACACCV)
_/_/_/_/ƿ/i/ll/e(AAAACACV)
_/_/_/_/ƿ/i/ll/e(AAAACACV)
_/_/_/_/_/ƿ/i/l/l/e(AAAAACACCV)
_/_/_/_/_/ƿ/i/l/l/e(AAAAACACCV)
_/_/_/_/_/ƿ/i/ll/e(AAAAACACV)
_/_/_/_/_/ƿ/i/ll/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e']
				ANALYSING: wille
					resolving (4)
					> version: _/_/_/_/w/i/l/l/e
					TRYING: w
					> version: _/_/_/_/w/i/l/l/e
					TRYING: w
					> version: _/_/_/_/w/i/ll/e
					TRYING: w
					> version: _/_/_/_/w/i/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				_/_/_/_/w/i/l/l/e(AAAACACCV)
_/_/_/_/w/i/l/l/e(AAAACACCV)
_/_/_/_/w/i/ll/e(AAAACACV)
_/_/_/_/w/i/ll/e(AAAACACV)
_/_/_/_/_/w/i/l/l/e(AAAAACACCV)
_/_/_/_/_/w/i/l/l/e(AAAAACACCV)
_/_/_/_/_/w/i/ll/e(AAAAACACV)
_/_/_/_/_/w/i/ll/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e']
				ANALYSING: ƿillen
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l/e/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e/n
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e/n
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				_/_/_/_/ƿ/i/l/l/e/n(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/e/n(AAAACACCVC)
_/_/_/_/ƿ/i/ll/e/n(AAAACACVC)
_/_/_/_/ƿ/i/ll/e/n(AAAACACVC)
_/_/_/_/_/ƿ/i/l/l/e/n(AAAAACACCVC)
_/_/_/_/_/ƿ/i/l/l/e/n(AAAAACACCVC)
_/_/_/_/_/ƿ/i/ll/e/n(AAAAACACVC)
_/_/_/_/_/ƿ/i/ll/e/n(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 'n']
				ANALYSING: willen
					resolving (4)
					> version: _/_/_/_/w/i/l/l/e/n
					TRYING: w
					> version: _/_/_/_/w/i/l/l/e/n
					TRYING: w
					> version: _/_/_/_/w/i/ll/e/n
					TRYING: w
					> version: _/_/_/_/w/i/ll/e/n
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				_/_/_/_/w/i/l/l/e/n(AAAACACCVC)
_/_/_/_/w/i/l/l/e/n(AAAACACCVC)
_/_/_/_/w/i/ll/e/n(AAAACACVC)
_/_/_/_/w/i/ll/e/n(AAAACACVC)
_/_/_/_/_/w/i/l/l/e/n(AAAAACACCVC)
_/_/_/_/_/w/i/l/l/e/n(AAAAACACCVC)
_/_/_/_/_/w/i/ll/e/n(AAAAACACVC)
_/_/_/_/_/w/i/ll/e/n(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/w/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'l', 'l', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				version split: ['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'i', 'll', 'e', 'n']
				ANALYSING: ƿilles
					resolving (4)
					> version: _/_/_/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/l/l/e/s
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e/s
					TRYING: ƿ
					> version: _/_/_/_/ƿ/i/ll/e/s
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				_/_/_/_/ƿ/i/l/l/e/s(AAAACACCVC)
_/_/_/_/ƿ/i/l/l/e/s(AAAACACCVC)
_/_/_/_/ƿ/i/ll/e/s(AAAACACVC)
_/_/_/_/ƿ/i/ll/e/s(AAAACACVC)
_/_/_/_/_/ƿ/i/l/l/e/s(AAAAACACCVC)
_/_/_/_/_/ƿ/i/l/l/e/s(AAAAACACCVC)
_/_/_/_/_/ƿ/i/ll/e/s(AAAAACACVC)
_/_/_/_/_/ƿ/i/ll/e/s(AAAAACACVC)
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_/ƿ/i', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				version split: ['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				{'string': '_/_/_/_/_/ƿ', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'ƿ', 'i', 'll', 'e', 's']
				ANALYSING: wyl
					resolving (2)
					> version: _/_/_/_/w/y/l
					TRYING: w
					> version: _/_/_/_/w/y/l
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l']
				_/_/_/_/w/y/l(AAAACAC)
_/_/_/_/w/y/l(AAAACAC)
_/_/_/_/_/w/y/l(AAAAACAC)
_/_/_/_/_/w/y/l(AAAAACAC)
				version split: ['_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l']
				ANALYSING: wyll
					resolving (4)
					> version: _/_/_/_/w/y/l/l
					TRYING: w
					> version: _/_/_/_/w/y/l/l
					TRYING: w
					> version: _/_/_/_/w/y/ll
					TRYING: w
					> version: _/_/_/_/w/y/ll
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'll']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'll']
				_/_/_/_/w/y/l/l(AAAACACC)
_/_/_/_/w/y/l/l(AAAACACC)
_/_/_/_/w/y/ll(AAAACAC)
_/_/_/_/w/y/ll(AAAACAC)
_/_/_/_/_/w/y/l/l(AAAAACACC)
_/_/_/_/_/w/y/l/l(AAAAACACC)
_/_/_/_/_/w/y/ll(AAAAACAC)
_/_/_/_/_/w/y/ll(AAAAACAC)
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'll']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'll']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'll']
				ANALYSING: wylle
					resolving (4)
					> version: _/_/_/_/w/y/l/l/e
					TRYING: w
					> version: _/_/_/_/w/y/l/l/e
					TRYING: w
					> version: _/_/_/_/w/y/ll/e
					TRYING: w
					> version: _/_/_/_/w/y/ll/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
				adding dashed alternative: ['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
				_/_/_/_/w/y/l/l/e(AAAACACCV)
_/_/_/_/w/y/l/l/e(AAAACACCV)
_/_/_/_/w/y/ll/e(AAAACACV)
_/_/_/_/w/y/ll/e(AAAACACV)
_/_/_/_/_/w/y/l/l/e(AAAAACACCV)
_/_/_/_/_/w/y/l/l/e(AAAAACACCV)
_/_/_/_/_/w/y/ll/e(AAAAACACV)
_/_/_/_/_/w/y/ll/e(AAAAACACV)
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_/w/y', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'l', 'l', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
				version split: ['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
				{'string': '_/_/_/_/_/w', 'rgx': '((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', '_', 'w', 'y', 'll', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['v', 'i', 'l', 'l', 'e']
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern VVCCV is INVALID
		[]
		17
		OVERVIEW: version for pattern VVCCV

faulty splits: 17
[''][''][''][''][''] <-! ƿil
[''][''][''][''][''] <-! wil
[''][''][''][''][''] <-! ƿile
[''][''][''][''][''] <-! wile
[''][''][''][''][''] <-! ƿill
[''][''][''][''][''] <-! will
[''][''][''][''][''] <-! ƿilla
[''][''][''][''][''] <-! willa
[''][''][''][''][''] <-! ƿillan
[''][''][''][''][''] <-! ƿille
[''][''][''][''][''] <-! wille
[''][''][''][''][''] <-! ƿillen
[''][''][''][''][''] <-! willen
[''][''][''][''][''] <-! ƿilles
[''][''][''][''][''] <-! wyl
[''][''][''][''][''] <-! wyll
[''][''][''][''][''] <-! wylle
v | i | l | l | e
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_'] | ['_']
2 : {'ƿ', 'l', '_'},{'l', '_', 'w'},{'ƿ', 'l'}
3 : {'ƿ', 'l', '_'},{'l', '_', 'w'},{'ƿ', 'l'}
	FOUND __ 3 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCVC

faulty splits: 0
ƿ | i | ll | a | n
ƿ | i | ll | e | n
w | i | ll | e | n
ƿ | i | ll | e | s
v | i | ll | e | _
ƿ | i | l | _ | _
w | i | l | _ | _
ƿ | i | l | e | _
w | i | l | e | _
ƿ | i | ll | _ | _
w | i | ll | _ | _
ƿ | i | ll | a | _
w | i | ll | a | _
ƿ | i | ll | e | _
w | i | ll | e | _
w | y | l | _ | _
w | y | ll | _ | _
w | y | ll | e | _
4 : {'l', 'n', '_', 's'}
	{'VCVCCV', 'VVCCCV', 'VVCCVC'}
